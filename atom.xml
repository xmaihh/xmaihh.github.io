<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小麦</title>
  
  <subtitle>人生的大起大落来得太突然，搞得我直想尿尿...</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-02-24T03:45:33.615Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java中double转int类型按四舍五入取整</title>
    <link href="http://example.com/2019/12/11/Java%E4%B8%ADdouble%E8%BD%ACint%E7%B1%BB%E5%9E%8B%E6%8C%89%E5%9B%9B%E8%88%8D%E4%BA%94%E5%85%A5%E5%8F%96%E6%95%B4/"/>
    <id>http://example.com/2019/12/11/Java%E4%B8%ADdouble%E8%BD%ACint%E7%B1%BB%E5%9E%8B%E6%8C%89%E5%9B%9B%E8%88%8D%E4%BA%94%E5%85%A5%E5%8F%96%E6%95%B4/</id>
    <published>2019-12-11T08:44:53.000Z</published>
    <updated>2021-02-24T03:45:33.615Z</updated>
    
    <content type="html"><![CDATA[<p>Java中的double转int类型，小数点后面抹零，只取小数点前的整数<br>所以被踩了丢失精度的坑，后续在将小数的double转换成为int的时候，一定要注意，小数点后面的部分是自动抹去的。<br>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">double</span> d =<span class="number">1.76</span>;</span><br><span class="line">System.out.println((<span class="keyword">int</span>)d);</span><br><span class="line"><span class="keyword">double</span> f =<span class="number">1.16</span>;</span><br><span class="line">System.out.println((<span class="keyword">int</span>)f);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出是:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>正确double转int按四舍五入取整</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;向上取整:&quot;</span> + (<span class="keyword">int</span>) Math.ceil(<span class="number">96.1</span>));<span class="comment">// 97 (去掉小数凑整:不管小数是多少，都进一)</span></span><br><span class="line">        System.out.println(<span class="string">&quot;向下取整&quot;</span> + (<span class="keyword">int</span>) Math.floor(<span class="number">96.8</span>));<span class="comment">// 96 (去掉小数凑整:不论小数是多少，都不进位)</span></span><br><span class="line">        System.out.println(<span class="string">&quot;四舍五入取整:&quot;</span> + Math.round(<span class="number">96.1</span>));<span class="comment">// 96 (这个好理解，不解释)</span></span><br><span class="line">        System.out.println(<span class="string">&quot;四舍五入取整:&quot;</span> + Math.round(<span class="number">96.8</span>));<span class="comment">// 97</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">向上取整: <span class="number">97</span></span><br><span class="line">向下取整: <span class="number">96</span></span><br><span class="line">四舍五入取整:<span class="number">96</span></span><br><span class="line">四舍五人取整:<span class="number">97</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">どんな人でも、 不安がきれいに 消えるということはない。</summary>
    
    
    
    <category term="Android Framework" scheme="http://example.com/categories/Android-Framework/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java位运算(移位、与、或、异或、非)</title>
    <link href="http://example.com/2019/11/05/Java%E4%BD%8D%E8%BF%90%E7%AE%97(%E7%A7%BB%E4%BD%8D%E3%80%81%E4%B8%8E%E3%80%81%E6%88%96%E3%80%81%E5%BC%82%E6%88%96%E3%80%81%E9%9D%9E)/"/>
    <id>http://example.com/2019/11/05/Java%E4%BD%8D%E8%BF%90%E7%AE%97(%E7%A7%BB%E4%BD%8D%E3%80%81%E4%B8%8E%E3%80%81%E6%88%96%E3%80%81%E5%BC%82%E6%88%96%E3%80%81%E9%9D%9E)/</id>
    <published>2019-11-05T02:57:22.000Z</published>
    <updated>2021-02-24T06:26:22.078Z</updated>
    
    <content type="html"><![CDATA[<p>Java的位运算符：左移（&lt;&lt;）、右移（&gt;&gt;）、无符号右移（&gt;&gt;&gt;）、与（&amp;）、异或（|）、非（~）<br>除了 非(~) 是一元操作符外，其他都是二元操作符。</p><table><thead><tr><th>运算符</th><th>运算</th><th>说明</th></tr></thead><tbody><tr><td>&lt;&lt;</td><td>左移</td><td>空位补0,被移除的高位丢失</td></tr><tr><td>&gt;&gt;</td><td>右移</td><td>被移位的二进制最高位是0,右移后，空缺位补0,最高位是1,最高位补1</td></tr><tr><td>&gt;&gt;&gt;</td><td>无符号右移</td><td>被移位的二进制无论是０或者是１，空缺位都是用０补</td></tr><tr><td>&amp;</td><td>与运算</td><td>任何二进制位和0进行&amp;运算，结果都是0，和１进行&amp;运算，都是原值</td></tr><tr><td>l</td><td>或运算</td><td>任何二进制位和０进行或运算，结果都是原值，和1进行或运算，都是1</td></tr><tr><td>^</td><td>异或运算</td><td>任何相同二进制位进行异或运算，结果都是０，不同二进制位进行异或运算，结果都是１</td></tr><tr><td>~</td><td>非运算</td><td>反转操作数的二进制位，即0变成1，1变成0</td></tr></tbody></table><ol><li><p>左移(&lt;&lt;)</p><p>​    示例1: 将５左移２位</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.code;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="number">5</span> &lt;&lt; <span class="number">2</span>);<span class="comment">//运行结果是20</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>java</code>中，整数默认就是<code>int</code>类型32位，首先将５转为二进制表示:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0000 0000 0000 0000 0000 0000 0000 0101      然后左移2位后，低位补0</span><br><span class="line"></span><br><span class="line">0000 0000 0000 0000 0000 0000 0001 0100      换算成10进制为20</span><br></pre></td></tr></table></figure></li><li><p>右移(&gt;&gt;)</p><p>​    示例2: 将５右移２位</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="number">5</span>&gt;&gt;<span class="number">2</span>);<span class="comment">//运行结果是1</span></span><br></pre></td></tr></table></figure><p>还是先将５转为二进制表示:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0000 0000 0000 0000 0000 0000 0000 0101      然后右移2位，高位补0</span><br><span class="line"></span><br><span class="line">0000 0000 0000 0000 0000 0000 0000 0001      换算成10进制为１</span><br></pre></td></tr></table></figure></li><li><p>无符号右移(&gt;&gt;&gt;)</p><p>​    示例3: 分别将５右移3位、将-５右移３位、将-5无符号右移３位</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="number">5</span>&gt;&gt;<span class="number">3</span>);<span class="comment">//结果是0</span></span><br><span class="line">System.out.println(-<span class="number">5</span>&gt;&gt;<span class="number">3</span>);<span class="comment">//结果是-1</span></span><br><span class="line">System.out.println(-<span class="number">5</span>&gt;&gt;&gt;<span class="number">3</span>);<span class="comment">//结果是536870911</span></span><br></pre></td></tr></table></figure><p>还是来看看位移过程:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">5换算成二进制： 0000 0000 0000 0000 0000 0000 0000 0101</span><br><span class="line">5右移3位后结果为0，0的二进制为： 0000 0000 0000 0000 0000 0000 0000 0000</span><br><span class="line"></span><br><span class="line">-5换算成二进制： 1111 1111 1111 1111 1111 1111 1111 1011</span><br><span class="line">-5右移3位后结果为-1，-1的二进制为： 1111 1111 1111 1111 1111 1111 1111 1111</span><br><span class="line">-5无符号右移3位后的结果 536870911 换算成二进制： 0001 1111 1111 1111 1111 1111 1111 1111</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>正数右移，高位用0补，负数右移，高位用1补，当负数使用无符号右移时，用0进行部位(自然而然的，就由负数变成了正数了)</p></blockquote><ol start="4"><li><p>与(&amp;)</p><p>​    示例4: 5&amp;3 进行与运算</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="number">5</span> &amp; <span class="number">3</span>);<span class="comment">//结果为1</span></span><br></pre></td></tr></table></figure><p>转换为二进制比较:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">5转换为二进制：0000 0000 0000 0000 0000 0000 0000 0101</span><br><span class="line">3转换为二进制：0000 0000 0000 0000 0000 0000 0000 0011</span><br><span class="line"></span><br><span class="line">1转换为二进制：0000 0000 0000 0000 0000 0000 0000 0001</span><br></pre></td></tr></table></figure><blockquote><p>与(&amp;)第一个操作数的的第n位于第二个操作数的第n位如果都是1，那么结果的第n为也为1，否则为0</p></blockquote></li><li><p>或(|)</p><p>​    示例5: 5|3 进行或运算</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="number">5</span> | <span class="number">3</span>);<span class="comment">//结果为7</span></span><br></pre></td></tr></table></figure><p>转换为二进制比较:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">5转换为二进制：0000 0000 0000 0000 0000 0000 0000 0101</span><br><span class="line">3转换为二进制：0000 0000 0000 0000 0000 0000 0000 0011</span><br><span class="line"></span><br><span class="line">7转换为二进制：0000 0000 0000 0000 0000 0000 0000 0111</span><br></pre></td></tr></table></figure><blockquote><p>或(|)第一个操作数的的第n位于第二个操作数的第n位 只要有一个是1，那么结果的第n为也为1，否则为0</p></blockquote></li><li><p>异或(^)</p><p>​    示例6: 5^3 进行异或运算</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="number">5</span> ^ <span class="number">3</span>);<span class="comment">//结果为6</span></span><br></pre></td></tr></table></figure><p>转换为二进制比较:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">5转换为二进制：0000 0000 0000 0000 0000 0000 0000 0101</span><br><span class="line">3转换为二进制：0000 0000 0000 0000 0000 0000 0000 0011</span><br><span class="line"></span><br><span class="line">6转换为二进制：0000 0000 0000 0000 0000 0000 0000 0110</span><br></pre></td></tr></table></figure><blockquote><p>异或(^)第一个操作数的的第n位于第二个操作数的第n位 相反，那么结果的第n为也为1，否则为0</p></blockquote></li><li><p>非(~)</p><p>​    示例7: ~5 进行非运算</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(~<span class="number">5</span>);<span class="comment">//结果为-6</span></span><br></pre></td></tr></table></figure><p>转换为二进制比较:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5转换为二进制：0000 0000 0000 0000 0000 0000 0000 0101</span><br><span class="line">-6转换为二进制：1111 1111 1111 1111 1111 1111 1111 1010</span><br></pre></td></tr></table></figure><blockquote><p>非：操作数的第n位为1，那么结果的第n位为0，反之。</p></blockquote></li></ol><p>位运算操作符衍生而来的有：</p><ul><li><p>&amp;= 按位与赋值</p></li><li><p>|= 按位或赋值</p></li><li><p>^= 按位非赋值</p></li><li><p>&gt;&gt;= 右移赋值</p></li><li><p>= 无符号右移赋值</p></li><li><p>&lt;&lt;= 赋值左移</p></li></ul><p>和 += 一个概念。</p><p>示例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">5</span></span><br><span class="line">a &amp;= <span class="number">3</span>; <span class="comment">//此时等同于　a = a&amp;3　即　ａ = 5＆３; </span></span><br><span class="line">System.out.println(a);<span class="comment">//结果是1</span></span><br></pre></td></tr></table></figure><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://blog.csdn.net/xiaochunyong/article/details/7748713">Java 位运算</a></p>]]></content>
    
    
    <summary type="html">自分の欠点を 直視し認めることです。 ただし 欠点に振り回され てはいけません。</summary>
    
    
    
    <category term="Android Framework" scheme="http://example.com/categories/Android-Framework/"/>
    
    
    <category term="Android" scheme="http://example.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>小程序开发的内容安全审核</title>
    <link href="http://example.com/2019/10/20/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%9A%84%E5%86%85%E5%AE%B9%E5%AE%89%E5%85%A8%E5%AE%A1%E6%A0%B8/"/>
    <id>http://example.com/2019/10/20/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%9A%84%E5%86%85%E5%AE%B9%E5%AE%89%E5%85%A8%E5%AE%A1%E6%A0%B8/</id>
    <published>2019-10-20T02:34:38.000Z</published>
    <updated>2021-02-24T03:24:16.188Z</updated>
    
    <content type="html"><![CDATA[<p>最近做一个带图片和文字发布的微信小程序，当时心里犯嘀咕，没有自我审查估摸着上不了。果不其然微信小程序提交代码审核的时候，审核不通过，提示如下:为避免您的小程序被滥用，请你完善内容审核机制，如调用小程序内容安全API，或使用其他技术、人工审核手段，过滤色情、违法等有害信息，保障发布内容的安全。<br>得，去到后台一看，审核员测试了一个词<code>xxx</code>给显示出来了，直接导致小程序不通过。<br><img src="https://i.loli.net/2019/11/22/W9agLfOjtbvFyoM.png"></p><p>好在提示给了解决方案，因此这里做一下记录。</p><h1 id="调用小程序内容安全API"><a href="#调用小程序内容安全API" class="headerlink" title="调用小程序内容安全API"></a>调用小程序内容安全API</h1><ul><li><a href="https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/sec-check/security.imgSecCheck.html">校验一张图片是否含有违法违规内容</a></li><li><a href="https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/sec-check/security.mediaCheckAsync.html">异步校验图片/音频是否含有违法违规内容</a></li><li><a href="https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/sec-check/security.msgSecCheck.html">检查一段文本是否含有违法违规内容</a></li></ul><p>还挺全，我主要用到了图片和文字审查，所以对<code>security.imgSecCheck</code>和<code>security.msgSecCheck</code>的使用做记录。</p><img src="https://i.loli.net/2019/11/22/UvmjLFTXAphqdlD.png" style="zoom:50%;" /><h1 id="开通云开发"><a href="#开通云开发" class="headerlink" title="开通云开发"></a>开通云开发</h1><p>在微信开发者工具打开你的小程序工程，点击“云开发”菜单进去，之前没开的按照提示填写云开发环境名称就好。</p><p><img src="https://i.loli.net/2019/11/22/wLgMkAFEbOeIVPH.png"></p><h1 id="创建云函数"><a href="#创建云函数" class="headerlink" title="创建云函数"></a>创建云函数</h1><p>在你小程序工程的<code>app.js</code>同级目录下创建一个文件夹<code>functions</code>来存放云函数</p><p><img src="https://i.loli.net/2019/11/22/35T7Gke9bxDOacA.png"></p><p>并在<code>project.config.json</code>中配置<code>&quot;cloudfunctionRoot&quot;: &quot;functions/&quot;,</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;项目配置文件&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;cloudfunctionRoot&quot;</span>: <span class="string">&quot;functions/&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;packOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;ignore&quot;</span>: []</span><br><span class="line">  &#125;, ...</span><br><span class="line">.......</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/11/22/th5suyaJXiNWeK8.png"></p><p>编译一下，可以看到<code>functions</code>文件夹有变化后面加上了你之前创建的环境名。右键<code>functions</code>文件夹唤出菜单新建<code>Node.js</code>云函数</p><p><img src="https://i.loli.net/2019/11/22/aytDq2p1cdun4xj.png"></p><p>我这里创建了一个名称叫<code>ContentCheck</code>的云函数，调用<code>security.imgSecCheck</code>和<code>security.msgSecCheck</code>需要声明权限，需要配置一个<code>config.json</code>文件，如果目录文件中没有<code>config.json</code>，需要自己建一个。</p><p><img src="https://i.loli.net/2019/11/22/xmzKXBnf69LhR5V.png"></p><p><strong>config.json</strong>的配置如下:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;permissions&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;openapi&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;security.msgSecCheck&quot;</span>,</span><br><span class="line">            <span class="string">&quot;security.imgSecCheck&quot;</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ContentCheck</strong>云函数的目录结构如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">├─checkContent</span><br><span class="line">│      config.json    <span class="comment">//云调用的权限配置</span></span><br><span class="line">│      index.js       <span class="comment">//云服务器node 入口文件</span></span><br><span class="line">│      package.json   <span class="comment">// NPM包依赖</span></span><br><span class="line">│ ...</span><br></pre></td></tr></table></figure><p>编辑<code>ContentCheck</code>云函数目录下的<code>index.js</code>文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 云函数入口文件</span></span><br><span class="line"><span class="keyword">const</span> cloud = <span class="built_in">require</span>(<span class="string">&#x27;wx-server-sdk&#x27;</span>)</span><br><span class="line"></span><br><span class="line">cloud.init()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 云函数入口函数</span></span><br><span class="line"><span class="built_in">exports</span>.main = <span class="keyword">async</span>(event, context) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> msgR = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">let</span> imageR = <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">//  检查文本内容是否违规</span></span><br><span class="line">    <span class="keyword">if</span> (event.msg) &#123;</span><br><span class="line">      msgR = <span class="keyword">await</span> cloud.openapi.security.msgSecCheck(&#123;</span><br><span class="line">        content: event.msg</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//  检查图像内容是否违规</span></span><br><span class="line">    <span class="keyword">if</span> (event.img) &#123;</span><br><span class="line">      imageR = <span class="keyword">await</span> cloud.openapi.security.imgSecCheck(&#123;</span><br><span class="line">        media: &#123;</span><br><span class="line">          header: &#123;</span><br><span class="line">            <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/octet-stream&#x27;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          contentType: <span class="string">&#x27;image/png&#x27;</span>,</span><br><span class="line">          value: Buffer.from(event.img)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      msgR,</span><br><span class="line">      imageR</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="keyword">return</span> e</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编辑完云函数之后，右键<code>ContentCheck</code>唤起菜单选择 上传并部署：云端安装依赖<br><img src="https://i.loli.net/2019/11/22/Ho3zqjR9NIuPp5y.png"></p><p><strong>注意</strong><br>使用微信小程序云函数开发本地需要实现安装好Node.js环境，并配置好环境变量，之前新电脑没装Node.js环境导致上传的云函数老是调用失败，解决办法是安装好Node.js就好了。<br>验证Node.js是否安装<code>npm -v</code>和<code>node -version</code></p><p><img src="https://i.loli.net/2019/11/22/JN8oOtmIZSE3zMV.png"></p><h1 id="调用云函数"><a href="#调用云函数" class="headerlink" title="调用云函数"></a>调用云函数</h1><p>在<code>app.js</code>初始化云环境，参数<code>env</code>可以在云开发的设置中可以看到当前的环境ID</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//app.js</span></span><br><span class="line">App(&#123;</span><br><span class="line">  onLaunch: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    wx.cloud.init(&#123;</span><br><span class="line">      env: <span class="string">&quot;manjaro-7l50h&quot;</span>,</span><br><span class="line">      traceUser: <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">    ...</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/11/22/nxMyfWwH4eO6oD7.png"></p><ol><li><p>检查文字是否违规</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">//  调用ContentCheck云函数检查文字是否违规</span></span><br><span class="line">   wx.cloud.callFunction(&#123;</span><br><span class="line">     name: <span class="string">&#x27;ContentCheck&#x27;</span>,</span><br><span class="line">     data: &#123;</span><br><span class="line">       msg: _this.data.msg,</span><br><span class="line">     &#125;,</span><br><span class="line">     <span class="function"><span class="title">success</span>(<span class="params">res</span>)</span> &#123;</span><br><span class="line">       <span class="built_in">console</span>.log(res.result)</span><br><span class="line">       <span class="keyword">if</span> (res.result.msgR.errCode == <span class="number">87014</span>) &#123;</span><br><span class="line">         wx.showToast(&#123;</span><br><span class="line">           title: <span class="string">&#x27;文字违规&#x27;</span>,</span><br><span class="line">         &#125;)</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文字违规打印的console.log(res.result)</span></span><br><span class="line">&#123;</span><br><span class="line">msgR: &#123;</span><br><span class="line">errCode: <span class="number">87014</span>,</span><br><span class="line">errMsg: <span class="string">&quot;openapi.security.msgSecCheck:fail risky content hint: [cSp9ka06218622]&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line">imageR: <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 文字正常打印的console.log(res.result)</span></span><br><span class="line">&#123;</span><br><span class="line">msgR: &#123;</span><br><span class="line">errCode: <span class="number">0</span>,</span><br><span class="line">errMsg: <span class="string">&quot;openapi.security.msgSecCheck:ok&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line">imageR: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>检查图片是否违规</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  调用ContentCheck云函数检查图片是否违规</span></span><br><span class="line">   wx.cloud.callFunction(&#123;</span><br><span class="line">     name: <span class="string">&#x27;ContentCheck&#x27;</span>,</span><br><span class="line">     data: &#123;</span><br><span class="line">       img: _this.data.img</span><br><span class="line">     &#125;,</span><br><span class="line">     <span class="function"><span class="title">success</span>(<span class="params">res</span>)</span> &#123;</span><br><span class="line">       <span class="built_in">console</span>.log(res.result)</span><br><span class="line">       <span class="keyword">if</span>(res.result.imageR.errCode == <span class="number">87014</span>)&#123;</span><br><span class="line">         wx.showToast(&#123;</span><br><span class="line">           title: <span class="string">&#x27;图片违规&#x27;</span>,</span><br><span class="line">         &#125;)</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;)</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// 图片违规打印的console.log(res.result)</span></span><br><span class="line">   &#123;</span><br><span class="line">   msgR: <span class="literal">false</span>,</span><br><span class="line">   imageR: &#123;</span><br><span class="line">   errCode: <span class="number">87014</span>,</span><br><span class="line">   errMsg: <span class="string">&quot;openapi.security.imgSecCheck:fail risky content hint: [LGrV.a05623955]&quot;</span></span><br><span class="line">   &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 图片正常打印的console.log(res.result)</span></span><br><span class="line">   &#123;</span><br><span class="line">   msgR: <span class="literal">false</span>,</span><br><span class="line">   imageR: &#123;</span><br><span class="line">   errCode: <span class="number">0</span>,</span><br><span class="line">   errMsg: <span class="string">&quot;openapi.security.imgSecCheck:ok&quot;</span></span><br><span class="line">   &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ol><p><a href="https://github.com/xmaihh/Gamecode/tree/master/contentSecCheck">完整例子 contentSecCheck</a></p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/sec-check/security.imgSecCheck.html">微信小程序官方文档</a><br><a href="https://segmentfault.com/a/1190000019955207">小程序评论回复和发帖功能实战</a></p>]]></content>
    
    
    <summary type="html">うつむいてはいけない。 いつも頭を高く あげていなさい。 世の中を 真っ正面から見つめなさい。</summary>
    
    
    
    <category term="微信小程序" scheme="http://example.com/categories/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
    <category term="微信小程序" scheme="http://example.com/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>Flutter开发中的页面跳转和传值</title>
    <link href="http://example.com/2019/10/13/Flutter%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E9%A1%B5%E9%9D%A2%E8%B7%B3%E8%BD%AC%E5%92%8C%E4%BC%A0%E5%80%BC/"/>
    <id>http://example.com/2019/10/13/Flutter%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E9%A1%B5%E9%9D%A2%E8%B7%B3%E8%BD%AC%E5%92%8C%E4%BC%A0%E5%80%BC/</id>
    <published>2019-10-13T08:20:03.000Z</published>
    <updated>2021-02-24T06:22:35.130Z</updated>
    
    <content type="html"><![CDATA[<p>在Android原生开发中,页面跳转用Intent类实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Intent intent =<span class="keyword">new</span> Intent(MainActivity.<span class="keyword">this</span>,SecondActivity.class);</span><br><span class="line">startActivity(intent);</span><br></pre></td></tr></table></figure><p>而在安卓原生开发中，页面传值有多种方法，常见的可以用intent、Bundle、自定义类、静态变量等等来传值。<br>Flutter提供了两种方法路由，分别是 <a href="https://flutter.dev/docs/cookbook/navigation/navigation-basics">Navigator.push()</a>  以及 <a href="https://flutter.dev/docs/cookbook/navigation/named-routes">Navigator.pushNamed()</a> 。</p><blockquote><p>此文基于 Flutter版本 Channel stable，v1.9.1+hotfix.2</p></blockquote><h1 id="页面跳转"><a href="#页面跳转" class="headerlink" title="页面跳转"></a>页面跳转</h1><h2 id="构建路由Navigator-push"><a href="#构建路由Navigator-push" class="headerlink" title="构建路由Navigator.push()"></a>构建路由Navigator.push()</h2><ol><li>Navigator.push()<br>从第一个页面(FirstPage())跳转到第二个页面(SecondPage())<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Within the `FirstPage` widget</span></span><br><span class="line">onPressed: () &#123;</span><br><span class="line">  Navigator.push(</span><br><span class="line">    context,</span><br><span class="line">    MaterialPageRoute(builder: (context) =&gt; SecondPage()),</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>使用<code>Navigator.pop()</code>回到第一个页面(FirstPage())<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Within the SecondPage widget</span></span><br><span class="line">onPressed: () &#123;</span><br><span class="line">  Navigator.pop(context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="命名路由Navigator-pushNamed"><a href="#命名路由Navigator-pushNamed" class="headerlink" title="命名路由Navigator.pushNamed()"></a>命名路由Navigator.pushNamed()</h2></li><li>Navigator.pushNamed()<br>首先需要定义一个<code>routes</code><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">MaterialApp(</span><br><span class="line">  <span class="comment">// home: FirstPage(),</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Start the app with the &quot;/&quot; named route. In this case, the app starts</span></span><br><span class="line">  <span class="comment">// on the FirstPage widget.</span></span><br><span class="line">  initialRoute: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">  routes: &#123;</span><br><span class="line">    <span class="comment">// When navigating to the &quot;/&quot; route, build the FirstPage widget.</span></span><br><span class="line">    <span class="string">&#x27;/&#x27;</span>: (context) =&gt; FirstPage(),</span><br><span class="line">    <span class="comment">// When navigating to the &quot;/second&quot; route, build the SecondPage widget.</span></span><br><span class="line">    <span class="string">&#x27;/second&#x27;</span>: (context) =&gt; SecondPage(),</span><br><span class="line">  &#125;,</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>注意这里定义了<code>initialRoute</code>之后，就不能定义<code>home</code>属性。应该把之前定义的<code>home</code>属性注释掉。<br><code>initialRoute</code>属性不能与<code>home</code>共存，只能选一个。</p></blockquote><ol start="2"><li>从第一个页面(FirstPage())跳转到第二个页面(SecondPage())</li></ol><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Within the `FirstPage` widget</span></span><br><span class="line">onPressed: () &#123;</span><br><span class="line">  <span class="comment">// Navigate to the second page using a named route.</span></span><br><span class="line">  Navigator.pushNamed(context, <span class="string">&#x27;/second&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>Navigator.pop()</code>回到第一个页面(FirstPage())</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Within the SecondPage widget</span></span><br><span class="line">onPressed: () &#123;</span><br><span class="line">  Navigator.pop(context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="传值跳转"><a href="#传值跳转" class="headerlink" title="传值跳转"></a>传值跳转</h1><h2 id="构建路由Navigator-push-1"><a href="#构建路由Navigator-push-1" class="headerlink" title="构建路由Navigator.push()"></a>构建路由Navigator.push()</h2><ol><li>首先定义需要传的值</li></ol><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// You can pass any object to the arguments parameter.</span></span><br><span class="line"><span class="comment">// In this example, create a class that contains a customizable</span></span><br><span class="line"><span class="comment">// title and message.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ScreenArguments</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> title;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> message;</span><br><span class="line"></span><br><span class="line">  ScreenArguments(<span class="keyword">this</span>.title, <span class="keyword">this</span>.message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>第二个页面(SecondPage())接受传值</li></ol><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// A widget that extracts the necessary arguments from the ModalRoute.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SecondPage</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="comment">// Extract the arguments from the current ModalRoute settings and cast</span></span><br><span class="line">    <span class="comment">// them as ScreenArguments.</span></span><br><span class="line">    <span class="keyword">final</span> ScreenArguments args = ModalRoute.of(context).settings.arguments;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(args.title),</span><br><span class="line">      ),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: Text(args.message),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><p>从第一个页面(FirstPage())传值</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">onPressed: () &#123;</span><br><span class="line">    <span class="comment">// When the user taps the button, navigate to the specific route</span></span><br><span class="line">    <span class="comment">// and provide the arguments as part of the RouteSettings.</span></span><br><span class="line">    Navigator.push(</span><br><span class="line">      context,</span><br><span class="line">      MaterialPageRoute(</span><br><span class="line">        builder: (context) =&gt; SecondPage(),</span><br><span class="line">        <span class="comment">// Pass the arguments as part of the RouteSettings. The</span></span><br><span class="line">        <span class="comment">// ExtractArgumentScreen reads the arguments from these</span></span><br><span class="line">        <span class="comment">// settings.</span></span><br><span class="line">        settings: RouteSettings(</span><br><span class="line">          arguments: ScreenArguments(</span><br><span class="line">            <span class="string">&#x27;Extract Arguments Screen&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;This message is extracted in the build method.&#x27;</span>,</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="命名路由Navigator-pushNamed-1"><a href="#命名路由Navigator-pushNamed-1" class="headerlink" title="命名路由Navigator.pushNamed()"></a>命名路由Navigator.pushNamed()</h2></li><li><p>首先定义需要传的值</p></li></ol><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// You can pass any object to the arguments parameter.</span></span><br><span class="line"><span class="comment">// In this example, create a class that contains a customizable</span></span><br><span class="line"><span class="comment">// title and message.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ScreenArguments</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> title;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> message;</span><br><span class="line"></span><br><span class="line">  ScreenArguments(<span class="keyword">this</span>.title, <span class="keyword">this</span>.message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>其次定义一下<code>routes</code></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">  MaterialApp(</span><br><span class="line">  <span class="comment">// Provide a function to handle named routes. Use this function to</span></span><br><span class="line">  <span class="comment">// identify the named route being pushed, and create the correct</span></span><br><span class="line">  <span class="comment">// Screen.</span></span><br><span class="line">  onGenerateRoute: </span><br><span class="line">      (settings) &#123;</span><br><span class="line">    <span class="comment">// If you push the PassArguments route</span></span><br><span class="line">    <span class="keyword">if</span> (settings.name == <span class="string">&quot;/passArguments&quot;</span>) &#123;</span><br><span class="line">      <span class="comment">// Cast the arguments to the correct type: ScreenArguments.</span></span><br><span class="line">      <span class="keyword">final</span> ScreenArguments args = settings.arguments;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Then, extract the required data from the arguments and</span></span><br><span class="line">      <span class="comment">// pass the data to the correct screen.</span></span><br><span class="line">      <span class="keyword">return</span> MaterialPageRoute(</span><br><span class="line">        builder: (context) &#123;</span><br><span class="line">          <span class="keyword">return</span> SecondPage(</span><br><span class="line">            title: args.title,</span><br><span class="line">            message: args.message,</span><br><span class="line">          );</span><br><span class="line">        &#125;,</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>第二个页面(SecondPage())接受传值</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// A Widget that accepts the necessary arguments via the constructor.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SecondPage</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> title;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> message;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// This Widget accepts the arguments as constructor parameters. It does not</span></span><br><span class="line">  <span class="comment">// extract the arguments from the ModalRoute.</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// The arguments are extracted by the onGenerateRoute function provided to the</span></span><br><span class="line">  <span class="comment">// MaterialApp widget.</span></span><br><span class="line">  <span class="keyword">const</span> SecondPage(&#123;</span><br><span class="line">    Key key,</span><br><span class="line">    <span class="meta">@required</span> <span class="keyword">this</span>.title,</span><br><span class="line">    <span class="meta">@required</span> <span class="keyword">this</span>.message,</span><br><span class="line">  &#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(title),</span><br><span class="line">      ),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: Text(message),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>从第一个页面(FirstPage())传值</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">onPressed: () &#123;</span><br><span class="line">  <span class="comment">// When the user taps the button, navigate to a named route</span></span><br><span class="line">  <span class="comment">// and provide the arguments as an optional parameter.</span></span><br><span class="line">  Navigator.pushNamed(</span><br><span class="line">    context,</span><br><span class="line">    <span class="string">&quot;/passArguments&quot;</span>,</span><br><span class="line">    arguments: ScreenArguments(</span><br><span class="line">      <span class="string">&#x27;Accept Arguments Screen&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;This message is extracted in the onGenerateRoute function.&#x27;</span>,</span><br><span class="line">    ),</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="第三方插件"><a href="#第三方插件" class="headerlink" title="第三方插件"></a>第三方插件</h1><p>Fluro是Flutter路由库</p></li></ol><p>添加方式</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dependencies:</span></span><br><span class="line"> <span class="attr">fluro:</span> <span class="string">&quot;^1.5.1&quot;</span></span><br></pre></td></tr></table></figure><p>使用例子</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;app_route.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:fluro/fluro.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  router.define(<span class="string">&#x27;home/:data&#x27;</span>, handler: <span class="keyword">new</span> Handler(</span><br><span class="line">      handlerFunc: (BuildContext context, <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; params) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Home(params[<span class="string">&#x27;data&#x27;</span>][<span class="number">0</span>]);</span><br><span class="line">      &#125;));</span><br><span class="line">  runApp(<span class="keyword">new</span> Login());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Login</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span></span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  createState() =&gt; <span class="keyword">new</span> LoginState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">Login</span>&gt;</span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MaterialApp(</span><br><span class="line">        title: <span class="string">&#x27;Fluro 例子&#x27;</span>,</span><br><span class="line"></span><br><span class="line">        home: <span class="keyword">new</span> Scaffold(</span><br><span class="line">          appBar: <span class="keyword">new</span> AppBar(</span><br><span class="line">            title: <span class="keyword">new</span> Text(<span class="string">&quot;登录&quot;</span>),</span><br><span class="line">          ),</span><br><span class="line">          body: <span class="keyword">new</span> Builder(builder: (BuildContext context) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Center(child:</span><br><span class="line">            <span class="keyword">new</span> Container(</span><br><span class="line">                height: <span class="number">30.0</span>,</span><br><span class="line">                color: Colors.blue,</span><br><span class="line">                child:<span class="keyword">new</span> FlatButton(</span><br><span class="line">                  child: <span class="keyword">const</span> Text(<span class="string">&#x27;传递帐号密码&#x27;</span>),</span><br><span class="line">                  onPressed: () &#123;</span><br><span class="line">                    <span class="keyword">var</span> bodyJson = <span class="string">&#x27;&#123;&quot;user&quot;:Manjaro,&quot;pass&quot;:passwd123&#125;&#x27;</span>;</span><br><span class="line">                    router.navigateTo(context, <span class="string">&#x27;/home/<span class="subst">$bodyJson</span>&#x27;</span>);</span><br><span class="line">                  &#125;,</span><br><span class="line">                )),</span><br><span class="line">            );</span><br><span class="line">          &#125;),</span><br><span class="line">        ));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Home</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span></span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> _result;</span><br><span class="line">  Home(<span class="keyword">this</span>._result);</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  createState() =&gt; <span class="keyword">new</span> HomeState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">Home</span>&gt;</span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Center(</span><br><span class="line">        child: <span class="keyword">new</span> Scaffold(</span><br><span class="line">          appBar: <span class="keyword">new</span> AppBar(</span><br><span class="line">            title: <span class="keyword">new</span> Text(<span class="string">&quot;个人主页&quot;</span>),</span><br><span class="line">          ),</span><br><span class="line">          body:<span class="keyword">new</span> Center(child:  <span class="keyword">new</span> Text(widget._result)),</span><br><span class="line">        )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> ‘app_route.dart’的代码:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:fluro/fluro.dart&#x27;</span>;</span><br><span class="line">Router router = <span class="keyword">new</span> Router();</span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2019/11/21/xsScWX6qYb75fw9.gif" style="zoom:80%;" /><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://pub.dev/packages/fluro">fluro</a><br><a href="https://flutter.dev/docs/cookbook/navigation/navigate-with-arguments">官方文档</a><br><a href="https://my.oschina.net/u/248241/blog/1796503">flutter移动开发中的页面跳转和传值</a></p>]]></content>
    
    
    <summary type="html">休息とは 回復であり、 何もしないこと ではない。</summary>
    
    
    
    <category term="Flutter" scheme="http://example.com/categories/Flutter/"/>
    
    
    <category term="Flutter" scheme="http://example.com/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>树莓派4-Ubuntu18.04.2LTS下配置WiFi与SSH连接</title>
    <link href="http://example.com/2019/09/17/%E6%A0%91%E8%8E%93%E6%B4%BE4-Ubuntu18.04.2LTS%E4%B8%8B%E9%85%8D%E7%BD%AEWiFi%E4%B8%8ESSH%E8%BF%9E%E6%8E%A5/"/>
    <id>http://example.com/2019/09/17/%E6%A0%91%E8%8E%93%E6%B4%BE4-Ubuntu18.04.2LTS%E4%B8%8B%E9%85%8D%E7%BD%AEWiFi%E4%B8%8ESSH%E8%BF%9E%E6%8E%A5/</id>
    <published>2019-09-17T02:03:51.000Z</published>
    <updated>2019-09-17T07:35:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h1><ul><li><a href="https://www.raspberrypi.org/products/raspberry-pi-4-model-b/">Raspberry Pi 4</a></li><li>SD卡，读卡器</li><li>电源适配器</li></ul><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="下载安装到SD卡"><a href="#下载安装到SD卡" class="headerlink" title="下载安装到SD卡"></a>下载安装到SD卡</h2><p>树莓派系统官方镜像下载：·<a href="https://www.raspberrypi.org/downloads/raspbian/">Raspberry Pi Raspbian</a></p><p>下载<a href="https://www.balena.io/etcher/">Etcher</a>工具，把镜像烧写到SD卡里面去<br>工具的操作很简单的三个步骤:<br>选择镜像 –&gt; 选择SD卡 –&gt; 烧写!</p><p><img src="https://i.loli.net/2019/09/17/n6rucIg4UNXQTqj.png"></p><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>出于安全考虑，SSH在raspbian中默认disabled。启用SSH,在SD卡的boot目录下建立一个空白文件<code>ssh</code>即可启用,文件命名为 ssh。注意要小写且不要有任何扩展名。</p><p>配置WiFi,在SD卡的boot目录下建立一个 <code>wpa_supplicant.conf</code>文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev</span><br><span class="line">update_config=1</span><br><span class="line">country=US</span><br><span class="line"> </span><br><span class="line">network=&#123;</span><br><span class="line">ssid=&quot;WiFi-A&quot;</span><br><span class="line">psk=&quot;123456789&quot;</span><br><span class="line">key_mgmt=WPA-PSK</span><br><span class="line">priority=1</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">network=&#123;</span><br><span class="line">ssid=&quot;WiFi-B&quot;</span><br><span class="line">psk=&quot;123456789&quot;</span><br><span class="line">key_mgmt=WPA-PSK</span><br><span class="line">priority=2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/09/17/GbJksDFXnLjf5i8.png"></p><h2 id="连接数莓派"><a href="#连接数莓派" class="headerlink" title="连接数莓派"></a>连接数莓派</h2><p>将SD卡放入Raspberry Pi中，它应该在启用网络的情况下启动到Debian。如果出现问题，您可以通过将SD卡移回Linux计算机并查看var / log目录来查看日志。</p><p>要连接到Raspberry Pi，需要知道它已分配的IP地址。在无线路由器上找到Raspberry Pi的IP地址,需确保Ubuntu 连接的和Raspberry Pi是在同一个局域网内.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ssh pi@hostname</span></span><br></pre></td></tr></table></figure><blockquote><p>hostname为树莓派的ip地址.</p></blockquote><p>官方系统镜像默认用户名为<code>pi</code>,密码为<code>raspberry</code>.</p><p><img src="https://i.loli.net/2019/09/17/8qxRmcvLn7zAEGJ.png"></p><blockquote><p>执行<code>passwd</code>命令来修改默认密码</p></blockquote><p>Raspbian镜像基于Debian Buster,基本命令使用和Debian基本一致.</p><ul><li><p>更新</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pi@raspberrypi:~ $ sudo apt-get update</span><br></pre></td></tr></table></figure></li><li><p>升级</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pi@raspberrypi:~ $ sudo apt-get upgrade</span><br></pre></td></tr></table></figure></li><li><p>安装软件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pi@raspberrypi:~ $ sudo apt-get install &lt;name of software&gt;</span><br></pre></td></tr></table></figure></li><li><p>检查SD容量<br>当运行<code>upgrade</code>命令时，会显示数据下载量和空间需要量。可以运行df -h来确定卡剩余空间是否足够。注意下载的包(.deb文件)保存在<code>/var/cache/apt/archives</code>路径下。你可以通过<code>sudo apt-get clean</code>来争取空间。</p></li><li><p>配置更改<br>可对树莓派进行配置更改</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo raspi-config</span><br></pre></td></tr></table></figure></li></ul><h1 id="安装docker和docker-compose"><a href="#安装docker和docker-compose" class="headerlink" title="安装docker和docker-compose"></a>安装docker和docker-compose</h1><p>树莓派是ARM架构的,如果需要找树莓派专用的镜像，那就在Dockerhub上搜索ARM或Rpi相关就能找到了。<br>有一个叫<a href="https://hub.docker.com/u/hypriot/">Hypriot</a>的仓库制作了非常多树莓派专用docker，可以参考下。</p><h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pi@raspberrypi:~ $ sudo apt-get update</span><br><span class="line">pi@raspberrypi:~ $ sudo apt-get upgrade</span><br><span class="line">pi@raspberrypi:~ $ curl -sSL https://get.docker.com| sh</span><br></pre></td></tr></table></figure><p>然后运行<code>hello world</code>检测是否安装成功.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pi@raspberrypi:~ $ sudo docker run hello-world</span><br></pre></td></tr></table></figure><h2 id="无需sudo执行docker"><a href="#无需sudo执行docker" class="headerlink" title="无需sudo执行docker"></a>无需sudo执行docker</h2><p>为了每次执行docker不需要总是输入sudo，我们需要为docker创建一个用户组，并授予权限才行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建docker用户组</span></span><br><span class="line">pi@raspberrypi:~ $ sudo groupadd docker</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 把当前用户加入到docker用户组</span></span><br><span class="line">pi@raspberrypi:~ $ sudo gpasswd -a $USER docker</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 更新当前用户组变动（就不用退出并重新登录了）</span></span><br><span class="line">pi@raspberrypi:~ $ newgrp docker</span><br></pre></td></tr></table></figure><p>或者 直接执行下面这条命令,会重启,需要重新登入.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pi@raspberrypi:~ $ sudo usermod -aG docker pi &amp;&amp; sudo reboot</span><br></pre></td></tr></table></figure><h2 id="安装docker-compose"><a href="#安装docker-compose" class="headerlink" title="安装docker-compose"></a>安装docker-compose</h2><h3 id="第一种方法"><a href="#第一种方法" class="headerlink" title="第一种方法"></a>第一种方法</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pi@raspberrypi:~ $ sudo apt-get update</span><br><span class="line">pi@raspberrypi:~ $ sudo apt-get install -y python python-pip</span><br><span class="line">pi@raspberrypi:~ $ sudo pip install docker-compose</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/09/17/JZfydCovKcF9MTn.png"></p><p>先执行,再执行<code>docker-compose</code>安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pi@raspberrypi:~ $ sudo apt install -y python python-pip libffi-dev</span><br></pre></td></tr></table></figure><p><del>### 第二种方法</del><br><del><a href="https://github.com/docker/compose">https://github.com/docker/compose</a></del><br><del>通过把<code>docker compose</code>当作一个<code>docker</code>的<code>container</code>下载并运行</del></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line">    -v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">    -v &quot;$PWD:/rootfs/$PWD&quot; \</span><br><span class="line">    -w=&quot;/rootfs/$PWD&quot; \</span><br><span class="line">    docker/compose:1.24.1 up</span><br></pre></td></tr></table></figure><p><del>设置alias快捷键,编辑(<code>~/.bash_profile</code>)</del></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">alias docker-compose=&quot;&#x27;&quot;&#x27;docker run \</span><br><span class="line">    -v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">    -v &quot;$PWD:/rootfs/$PWD&quot; \</span><br><span class="line">    -w=&quot;/rootfs/$PWD&quot; \</span><br><span class="line">    docker/compose:1.24.1&#x27;&quot;&#x27;&quot;</span><br></pre></td></tr></table></figure><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p>[<a href="https://segmentfault.com/a/1190000018028887">树莓派安装Docker</a>]<br><a href="http://www.penguintutor.com/raspberrypi/">Raspberry Pi - Linux computer for learning programming</a></p>]]></content>
    
    
    <summary type="html">Storm clouds may gather and stars may collide but I love you until the end of time.</summary>
    
    
    
    <category term="Raspberry Pi" scheme="http://example.com/categories/Raspberry-Pi/"/>
    
    
    <category term="Raspberry Pi" scheme="http://example.com/tags/Raspberry-Pi/"/>
    
  </entry>
  
  <entry>
    <title>AndroidStudio快速生成jni头文件</title>
    <link href="http://example.com/2019/07/31/AndroidStudio%E5%BF%AB%E9%80%9F%E7%94%9F%E6%88%90jni%E5%A4%B4%E6%96%87%E4%BB%B6/"/>
    <id>http://example.com/2019/07/31/AndroidStudio%E5%BF%AB%E9%80%9F%E7%94%9F%E6%88%90jni%E5%A4%B4%E6%96%87%E4%BB%B6/</id>
    <published>2019-07-31T09:33:13.000Z</published>
    <updated>2019-08-01T01:49:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>依次打开<code>Settings</code>–&gt;<code>Tools</code>–&gt;<code>External Tools</code>–&gt;<code>点击加号创建一个快速生成jni头文件的工具</code></p><p><img src="https://i.loli.net/2019/07/31/5d41618c4f9d413087.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. Program: javah  </span><br><span class="line">2. Parameters: -v -jni -d $ModuleFileDir$/src/main/cpp $FileClass$  </span><br><span class="line">3. Working directory: $SourcepathEntry$  </span><br></pre></td></tr></table></figure><p>选中包含native方法的 JAVA 文件，右键唤起菜单，依次找到<code>ExternalTools</code>=&gt;<code>Jni create .h</code>，执行前面添加的生成.h头文件的工具。<br><img src="https://i.loli.net/2019/07/31/5d41688405d3932421.jpg"><br><img src="https://i.loli.net/2019/07/31/5d416983e1d3667068.png"></p>]]></content>
    
    
    <summary type="html">What is the most resilient parasite? Bacteria? A virus? An intestinal worm? An idea.</summary>
    
    
    
    <category term="Android" scheme="http://example.com/categories/Android/"/>
    
    
    <category term="AndroidStudio" scheme="http://example.com/tags/AndroidStudio/"/>
    
  </entry>
  
  <entry>
    <title>Android录音</title>
    <link href="http://example.com/2019/07/30/Android%E5%BD%95%E9%9F%B3/"/>
    <id>http://example.com/2019/07/30/Android%E5%BD%95%E9%9F%B3/</id>
    <published>2019-07-30T12:23:26.000Z</published>
    <updated>2019-08-01T03:53:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="介绍-Android-中录音功能的实现"><a href="#介绍-Android-中录音功能的实现" class="headerlink" title="介绍 Android 中录音功能的实现"></a>介绍 Android 中录音功能的实现</h1><h2 id="录音方法"><a href="#录音方法" class="headerlink" title="录音方法"></a>录音方法</h2><p>Android 中的录音主要有两种方式 MediaRecorder 和 AudioRecord</p><ul><li><p>MediaRecorder（基于文件）</p><p>  可以录制音、视频；</p><p>  封装了录制、编码、压缩、线程等功能，直接生成可播放的音频文件；</p><p>  优点：封装度高，操作简单</p><p>  缺点：编码格式有限，.aac  .amr  .3gp，但是没有 mp3、wav 格式</p></li><li><p>AudioRecord（基于字节流）</p><p>  ​    只能录制音频；</p><p>  ​    输出的是 PCM 的声音数据，如果保存成文件是不能直接播放的，需要编码；</p><p>  ​    可以捕获音频流，边录制边处理，比如编码、变声、添加背景音乐。</p><p>  ​    优点：更灵活</p><p>  ​    缺点：需自行处理编码、开线程等工作</p><p>  ​    应用场景：语音聊天、汤姆猫、K歌…</p></li></ul><blockquote><p>PCM：Pulse Code Modulation（脉冲编码调制），是对连续变化的模拟信号进行抽样、量化和编码产生的数字信号。<br>它不是一种音频格式，它是声音文件的元数据，也就是声音的内容，没有文件头。经过某种格式的压缩、编码算法处理以后，再加上这种格式的文件头，才是这种格式的音频文件。</p></blockquote><h2 id="音频参数"><a href="#音频参数" class="headerlink" title="音频参数"></a>音频参数</h2><ul><li>采样频率：</li></ul><p>​       自然界的声音转换成数字格式时，要对它进行采样，每秒钟采样的次数就是采样率。就好比电影的1秒24帧画面。最常用：44.1kHz。</p><ul><li>采样位数：</li></ul><p>​       一个采样样本用多少位二进制数编码，最常用：16位。</p><ul><li>声道数：</li></ul><p>​       分为单声道和双声道，双声道又叫立体声，双声道音频文件比单声道大一倍。</p><ul><li>比特率（码率）：</li></ul><p>​       每秒钟音频文件所占的 bit 数。单位 ：kbps（每秒千比特数）。比特率（原始音频 PCM） = 采样频率 x 采样位数  x  声道数，这是未经压缩的比特率，压缩后会远小于这个值。<br>​<br>​       采用44.1kHz采样频率、16位采样位数、双声道编码的原始音频 PCM 比特率为：1411.2 kbps 。而最常见的 mp3 格式的比特率为：128kbps，约 1MB/分钟。</p><ul><li>编码格式：</li></ul><p>​       将原始音频 PCM 采用特定压缩算法处理后，加上文件头，所保存成的文件的格式。例如 mp3、wav、aac…</p><h2 id="编码格式"><a href="#编码格式" class="headerlink" title="编码格式"></a>编码格式</h2><ul><li>mp3</li></ul><p>​       是当今最流行的一种数字音频编码和有损压缩格式，就是将 PCM 通过算法进行压缩，常规 mp3 文件约为 1MB/分钟。</p><ul><li>aac</li></ul><p>​        是 mp3 的下一代格式，也是有损压缩，相对于mp3，aac 格式的音频更佳，文件更小。ios 平台也支持，跨平台性好。</p><ul><li>wav</li></ul><p>​        最流行的非压缩数据格式，微软开发。</p><ul><li> amr</li></ul><p>​        压缩比比较大，但相对其他的压缩格式质量比较差，多用于人声，通话录音。</p><blockquote><p>riff：一种文件描述的格式，wav文件就采用了riff描述，前面44字节就是 riff 描述内容，就是文件头。</p></blockquote><h2 id="MediaRecorder"><a href="#MediaRecorder" class="headerlink" title="MediaRecorder"></a>MediaRecorder</h2><p> 首先在 AndroidManifest 配置文件中添加录音权限：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.RECORD_AUDIO&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>Android 6.0 以上还要动态获取权限。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 录音对象声明</span></span><br><span class="line">   <span class="keyword">private</span> MediaRecorder mRecorder;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startRecording</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="comment">// 创建录音对象</span></span><br><span class="line">       mRecorder = <span class="keyword">new</span> MediaRecorder();</span><br><span class="line">       <span class="comment">// 设置声音来源 MIC 即手机麦克风</span></span><br><span class="line">       mRecorder.setAudioSource(MediaRecorder.AudioSource.MIC);</span><br><span class="line">       <span class="comment">// 设置音频格式 aac</span></span><br><span class="line">       mRecorder.setOutputFormat(MediaRecorder.OutputFormat.AAC_ADTS);</span><br><span class="line">       <span class="comment">// 设置录音文件</span></span><br><span class="line">       mRecorder.setOutputFile(getExternalCacheDir() + <span class="string">&quot;/demo.aac&quot;</span>);</span><br><span class="line">       <span class="comment">// 设置编码器</span></span><br><span class="line">       mRecorder.setAudioEncoder(MediaRecorder.AudioEncoder.AAC);</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="comment">// 准备录音</span></span><br><span class="line">           mRecorder.prepare();</span><br><span class="line">       &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 开始录音</span></span><br><span class="line">       mRecorder.start();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>录音是耗时操作，但是，由于<code>MediaRecorder</code>已经封装了线程，故以上代码放在主线程即可。<br><code>MediaRecorder</code>是很占资源的，使用完毕需要释放掉：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">stopRecording</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="comment">// 停止录音</span></span><br><span class="line">       mRecorder.stop();</span><br><span class="line">       <span class="comment">// 释放资源</span></span><br><span class="line">       mRecorder.release();</span><br><span class="line">       <span class="comment">// 引用置空</span></span><br><span class="line">       mRecorder = <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="AudioRecord"><a href="#AudioRecord" class="headerlink" title="AudioRecord"></a>AudioRecord</h2><p>首先在 AndroidManifest 配置文件中添加录音权限：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.RECORD_AUDIO&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>当然 Android 6.0 以上还要动态获取权限，具体实现方式请百度之。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 录音状态</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> isRecording = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startRecording</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 耗时操作要开线程</span></span><br><span class="line">    <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 音源</span></span><br><span class="line">            <span class="keyword">int</span> audioSource = MediaRecorder.AudioSource.MIC;</span><br><span class="line">            <span class="comment">// 采样率</span></span><br><span class="line">            <span class="keyword">int</span> sampleRate = <span class="number">44100</span>;</span><br><span class="line">            <span class="comment">// 声道数</span></span><br><span class="line">            <span class="keyword">int</span> channelConfig = AudioFormat.CHANNEL_IN_STEREO;<span class="comment">//双声道</span></span><br><span class="line">            <span class="comment">// 采样位数</span></span><br><span class="line">            <span class="keyword">int</span> audioFormat = AudioFormat.ENCODING_PCM_16BIT;</span><br><span class="line">            <span class="comment">// 获取最小缓存区大小</span></span><br><span class="line">            <span class="keyword">int</span> minBufferSize = AudioRecord.getMinBufferSize(sampleRate, channelConfig, audioFormat);</span><br><span class="line">            <span class="comment">// 创建录音对象</span></span><br><span class="line">            AudioRecord audioRecord = <span class="keyword">new</span> AudioRecord(audioSource, sampleRate, channelConfig, audioFormat, minBufferSize);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 创建随机读写流</span></span><br><span class="line">                RandomAccessFile raf = <span class="keyword">new</span> RandomAccessFile(getExternalCacheDir() + <span class="string">&quot;/demo.wav&quot;</span>, <span class="string">&quot;rw&quot;</span>);</span><br><span class="line">                <span class="comment">// 留出文件头的位置</span></span><br><span class="line">                raf.seek(<span class="number">44</span>);</span><br><span class="line">                <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[minBufferSize];</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 录音中</span></span><br><span class="line">                audioRecord.startRecording();</span><br><span class="line">                isRecording = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">while</span> (isRecording) &#123;</span><br><span class="line">                    <span class="keyword">int</span> readSize = audioRecord.read(buffer, <span class="number">0</span>, minBufferSize);</span><br><span class="line">                    raf.write(buffer,<span class="number">0</span>,readSize);</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 录音停止</span></span><br><span class="line">                audioRecord.stop();</span><br><span class="line">                audioRecord.release();</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 写文件头</span></span><br><span class="line">                WriteWaveFileHeader(raf, raf.length(),sampleRate,<span class="number">2</span>,sampleRate*<span class="number">16</span>*<span class="number">2</span>/<span class="number">8</span>);</span><br><span class="line">                raf.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 为 wav 文件添加文件头，前提是在头部预留了 44字节空间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> raf</span></span><br><span class="line"><span class="comment">     *              随机读写流</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileLength</span></span><br><span class="line"><span class="comment">     *              文件总长</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sampleRate</span></span><br><span class="line"><span class="comment">     *              采样率</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> channels</span></span><br><span class="line"><span class="comment">     *              声道数量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> byteRate</span></span><br><span class="line"><span class="comment">     *              码率 = 采样率 * 采样位数 * 声道数 / 8</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">WriteWaveFileHeader</span><span class="params">(RandomAccessFile raf, <span class="keyword">long</span> fileLength, <span class="keyword">long</span> sampleRate, <span class="keyword">int</span> channels, <span class="keyword">long</span> byteRate)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> totalDataLen = fileLength + <span class="number">36</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] header = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">44</span>];</span><br><span class="line">        header[<span class="number">0</span>] = <span class="string">&#x27;R&#x27;</span>; <span class="comment">// RIFF/WAVE header</span></span><br><span class="line">        header[<span class="number">1</span>] = <span class="string">&#x27;I&#x27;</span>;</span><br><span class="line">        header[<span class="number">2</span>] = <span class="string">&#x27;F&#x27;</span>;</span><br><span class="line">        header[<span class="number">3</span>] = <span class="string">&#x27;F&#x27;</span>;</span><br><span class="line">        header[<span class="number">4</span>] = (<span class="keyword">byte</span>) (totalDataLen &amp; <span class="number">0xff</span>);</span><br><span class="line">        header[<span class="number">5</span>] = (<span class="keyword">byte</span>) ((totalDataLen &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xff</span>);</span><br><span class="line">        header[<span class="number">6</span>] = (<span class="keyword">byte</span>) ((totalDataLen &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>);</span><br><span class="line">        header[<span class="number">7</span>] = (<span class="keyword">byte</span>) ((totalDataLen &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xff</span>);</span><br><span class="line">        header[<span class="number">8</span>] = <span class="string">&#x27;W&#x27;</span>;</span><br><span class="line">        header[<span class="number">9</span>] = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">        header[<span class="number">10</span>] = <span class="string">&#x27;V&#x27;</span>;</span><br><span class="line">        header[<span class="number">11</span>] = <span class="string">&#x27;E&#x27;</span>;</span><br><span class="line">        header[<span class="number">12</span>] = <span class="string">&#x27;f&#x27;</span>; <span class="comment">// &#x27;fmt &#x27; chunk</span></span><br><span class="line">        header[<span class="number">13</span>] = <span class="string">&#x27;m&#x27;</span>;</span><br><span class="line">        header[<span class="number">14</span>] = <span class="string">&#x27;t&#x27;</span>;</span><br><span class="line">        header[<span class="number">15</span>] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        header[<span class="number">16</span>] = <span class="number">16</span>; <span class="comment">// 4 bytes: size of &#x27;fmt &#x27; chunk</span></span><br><span class="line">        header[<span class="number">17</span>] = <span class="number">0</span>;</span><br><span class="line">        header[<span class="number">18</span>] = <span class="number">0</span>;</span><br><span class="line">        header[<span class="number">19</span>] = <span class="number">0</span>;</span><br><span class="line">        header[<span class="number">20</span>] = <span class="number">1</span>; <span class="comment">// format = 1</span></span><br><span class="line">        header[<span class="number">21</span>] = <span class="number">0</span>;</span><br><span class="line">        header[<span class="number">22</span>] = (<span class="keyword">byte</span>) channels;</span><br><span class="line">        header[<span class="number">23</span>] = <span class="number">0</span>;</span><br><span class="line">        header[<span class="number">24</span>] = (<span class="keyword">byte</span>) (sampleRate &amp; <span class="number">0xff</span>);</span><br><span class="line">        header[<span class="number">25</span>] = (<span class="keyword">byte</span>) ((sampleRate &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xff</span>);</span><br><span class="line">        header[<span class="number">26</span>] = (<span class="keyword">byte</span>) ((sampleRate &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>);</span><br><span class="line">        header[<span class="number">27</span>] = (<span class="keyword">byte</span>) ((sampleRate &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xff</span>);</span><br><span class="line">        header[<span class="number">28</span>] = (<span class="keyword">byte</span>) (byteRate &amp; <span class="number">0xff</span>);</span><br><span class="line">        header[<span class="number">29</span>] = (<span class="keyword">byte</span>) ((byteRate &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xff</span>);</span><br><span class="line">        header[<span class="number">30</span>] = (<span class="keyword">byte</span>) ((byteRate &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>);</span><br><span class="line">        header[<span class="number">31</span>] = (<span class="keyword">byte</span>) ((byteRate &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xff</span>);</span><br><span class="line">        header[<span class="number">32</span>] = (<span class="keyword">byte</span>) (<span class="number">2</span> * <span class="number">16</span> / <span class="number">8</span>); <span class="comment">// block align</span></span><br><span class="line">        header[<span class="number">33</span>] = <span class="number">0</span>;</span><br><span class="line">        header[<span class="number">34</span>] = <span class="number">16</span>; <span class="comment">// bits per sample</span></span><br><span class="line">        header[<span class="number">35</span>] = <span class="number">0</span>;</span><br><span class="line">        header[<span class="number">36</span>] = <span class="string">&#x27;d&#x27;</span>;</span><br><span class="line">        header[<span class="number">37</span>] = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        header[<span class="number">38</span>] = <span class="string">&#x27;t&#x27;</span>;</span><br><span class="line">        header[<span class="number">39</span>] = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        header[<span class="number">40</span>] = (<span class="keyword">byte</span>) (fileLength &amp; <span class="number">0xff</span>);</span><br><span class="line">        header[<span class="number">41</span>] = (<span class="keyword">byte</span>) ((fileLength &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xff</span>);</span><br><span class="line">        header[<span class="number">42</span>] = (<span class="keyword">byte</span>) ((fileLength &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>);</span><br><span class="line">        header[<span class="number">43</span>] = (<span class="keyword">byte</span>) ((fileLength &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xff</span>);</span><br><span class="line">        raf.seek(<span class="number">0</span>);</span><br><span class="line">        raf.write(header, <span class="number">0</span>, <span class="number">44</span>);</span><br><span class="line">    &#125; </span><br></pre></td></tr></table></figure><p> 以下是停止录音的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">stopRecording</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="comment">// 停止录音</span></span><br><span class="line">     isRecording = <span class="keyword">false</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="边录边播（AudioRecord-AudioTrack）"><a href="#边录边播（AudioRecord-AudioTrack）" class="headerlink" title="边录边播（AudioRecord + AudioTrack）"></a>边录边播（AudioRecord + AudioTrack）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 录音状态</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">boolean</span> isRecording = <span class="keyword">true</span>;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="comment">// 耗时操作要开线程</span></span><br><span class="line">       <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">               </span><br><span class="line">               <span class="comment">// 音源</span></span><br><span class="line">               <span class="keyword">int</span> audioSource = MediaRecorder.AudioSource.MIC;</span><br><span class="line">               <span class="comment">// 采样率</span></span><br><span class="line">               <span class="keyword">int</span> sampleRate = <span class="number">8000</span>;</span><br><span class="line">               <span class="comment">// 声道数</span></span><br><span class="line">               <span class="keyword">int</span> channelConfig = AudioFormat.CHANNEL_IN_STEREO;<span class="comment">//双声道</span></span><br><span class="line">               <span class="comment">// 采样位数</span></span><br><span class="line">               <span class="keyword">int</span> audioFormat = AudioFormat.ENCODING_PCM_8BIT;</span><br><span class="line">               <span class="comment">// 获取录音最小缓存区大小</span></span><br><span class="line">               <span class="keyword">int</span> recorderBufferSize = AudioRecord.getMinBufferSize(sampleRate, channelConfig, audioFormat);</span><br><span class="line">               <span class="comment">// 创建录音对象</span></span><br><span class="line">               AudioRecord audioRecord = <span class="keyword">new</span> AudioRecord(audioSource, sampleRate, channelConfig, audioFormat, recorderBufferSize);</span><br><span class="line">               </span><br><span class="line">               <span class="comment">// 音频类型</span></span><br><span class="line">               <span class="keyword">int</span> streamType = AudioManager.STREAM_MUSIC;</span><br><span class="line">               <span class="comment">// 静态音频还是音频流</span></span><br><span class="line">               <span class="keyword">int</span> mode = AudioTrack.MODE_STREAM;</span><br><span class="line">               <span class="comment">//  获取播放最小缓存区大小</span></span><br><span class="line">               <span class="keyword">int</span> playerBufferSize = AudioTrack.getMinBufferSize(sampleRate, channelConfig, audioFormat);</span><br><span class="line">               <span class="comment">// 创建播放对象</span></span><br><span class="line">               AudioTrack audioTrack = <span class="keyword">new</span> AudioTrack(streamType, sampleRate, channelConfig, audioFormat, playerBufferSize, mode);</span><br><span class="line">               </span><br><span class="line">               <span class="comment">// 缓存区</span></span><br><span class="line">               <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[recorderBufferSize];</span><br><span class="line">               </span><br><span class="line">               <span class="comment">// 录音中</span></span><br><span class="line">               audioTrack.play();</span><br><span class="line">               audioRecord.startRecording();</span><br><span class="line">               isRecording = <span class="keyword">true</span>;</span><br><span class="line">               <span class="keyword">while</span> (isRecording) &#123;</span><br><span class="line">                   audioRecord.read(buffer, <span class="number">0</span>, recorderBufferSize);</span><br><span class="line">                   audioTrack.write(buffer, <span class="number">0</span>, buffer.length);</span><br><span class="line">               &#125;</span><br><span class="line">               </span><br><span class="line">               <span class="comment">// 录音停止</span></span><br><span class="line">               audioRecord.stop();</span><br><span class="line">               audioTrack.stop();</span><br><span class="line">               audioRecord.release();</span><br><span class="line">               audioTrack.release();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;.start();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p> 停止录音和播放：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="comment">// 停止录音</span></span><br><span class="line">       isRecording = <span class="keyword">false</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="录制mp3格式音频"><a href="#录制mp3格式音频" class="headerlink" title="录制mp3格式音频"></a>录制mp3格式音频</h2><p> 众多周知，mp3 是跨平台性最好的音频格式，由于采用了压缩率更高的有损压缩算法，文件大小是大约每分钟1M，使其在网络中传输更快，占用存储空间也更少；与此同时，它的声音质量也不错，尤其是人声（相声、评书、脱口秀），当然追求无损音乐的除外。<br> Android 中没有提供录制 mp3 的 API，需要使用开源库 lame，lame 是专门用于编码 mp3 的轻量高效的 c 代码库。由于采用 c 语言编写，故需要用到 jni。</p><h3 id="下载lame库"><a href="#下载lame库" class="headerlink" title="下载lame库"></a>下载lame库</h3><ul><li>lame库下载(以下使用的是<code>lame</code> v3.100)<br>  <a href="https://sourceforge.net/projects/lame/files/lame/">https://sourceforge.net/projects/lame/files/lame/</a></li></ul><h3 id="源码导入"><a href="#源码导入" class="headerlink" title="源码导入"></a>源码导入</h3><p>解压下载的lame库，把<code>libmp3lame</code>文件夹下后缀为<code>.c .h</code>的文件（不包括子文件夹i386和vector下的）复制到cpp/lame文件夹内，同时把<code>include</code>目录下的lame.h也复制到cpp/lame文件夹内，此时 lame文件夹内包含42个文件。<br><img src="https://i.loli.net/2019/07/31/5d4157b88dbd619403.png"><br>（可参考<a href="https://github.com/xmaihh/MFSocket/tree/master/liblame/src/main/cpp/lame%EF%BC%89">https://github.com/xmaihh/MFSocket/tree/master/liblame/src/main/cpp/lame）</a></p><h3 id="修改库文件"><a href="#修改库文件" class="headerlink" title="修改库文件"></a>修改库文件</h3><p>打开刚刚拷贝的lame库文件，修改：</p><ol><li>util.h 文件，把 570 行的两处 ieee754_float32_t 改为 float  因为Android下并不支持该类型</li><li>set_get.h 文件，把头部的 #include &lt;lame.h&gt; 改为 #include “lame.h”</li><li>fft.c 文件，删除第47行  #include “vector/lame_intrin.h”</li><li>id3tag.c和machine.h两个文件里，將HAVE_STRCHR和HAVE_MEMCPY的ifdef结构体删除或者注释</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> STDC_HEADERS</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="comment">/*# ifndef HAVE_STRCHR</span></span><br><span class="line"><span class="comment">#  define strchr index</span></span><br><span class="line"><span class="comment">#  define strrchr rindex</span></span><br><span class="line"><span class="comment"># endif*/</span></span><br><span class="line">char   *strchr(), *strrchr();</span><br><span class="line"><span class="comment">/*# ifndef HAVE_MEMCPY</span></span><br><span class="line"><span class="comment">#  define memcpy(d, s, n) bcopy ((s), (d), (n))</span></span><br><span class="line"><span class="comment">#  define memmove(d, s, n) bcopy ((s), (d), (n))</span></span><br><span class="line"><span class="comment"># endif*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>可参考以下完整修改文件</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">diff --git a/VbrTag.c b/VbrTag.c</span></span><br><span class="line"><span class="comment">index 5800a44..36ee7b6 100644</span></span><br><span class="line"><span class="comment">--- a/VbrTag.c</span></span><br><span class="line"><span class="comment">+++ b/VbrTag.c</span></span><br><span class="line"><span class="meta">@@ -26,6 +26,8 @@</span></span><br><span class="line"> # include &lt;config.h&gt;</span><br><span class="line"> #endif</span><br><span class="line"> </span><br><span class="line"><span class="addition">+#include &lt;stdlib.h&gt;</span></span><br><span class="line"><span class="addition">+#include &lt;string.h&gt;</span></span><br><span class="line"> #include &quot;lame.h&quot;</span><br><span class="line"> #include &quot;machine.h&quot;</span><br><span class="line"> #include &quot;encoder.h&quot;</span><br><span class="line"><span class="comment">diff --git a/bitstream.c b/bitstream.c</span></span><br><span class="line"><span class="comment">index aa35915..a2fe294 100644</span></span><br><span class="line"><span class="comment">--- a/bitstream.c</span></span><br><span class="line"><span class="comment">+++ b/bitstream.c</span></span><br><span class="line"><span class="meta">@@ -29,6 +29,7 @@</span></span><br><span class="line"> </span><br><span class="line"> #include &lt;stdlib.h&gt;</span><br><span class="line"> #include &lt;stdio.h&gt;</span><br><span class="line"><span class="addition">+#include &lt;string.h&gt;</span></span><br><span class="line"> </span><br><span class="line"> #include &quot;lame.h&quot;</span><br><span class="line"> #include &quot;machine.h&quot;</span><br><span class="line"><span class="comment">diff --git a/encoder.c b/encoder.c</span></span><br><span class="line"><span class="comment">index 48f46c7..437067f 100644</span></span><br><span class="line"><span class="comment">--- a/encoder.c</span></span><br><span class="line"><span class="comment">+++ b/encoder.c</span></span><br><span class="line"><span class="meta">@@ -30,6 +30,7 @@</span></span><br><span class="line"> #endif</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="addition">+#include &lt;string.h&gt;</span></span><br><span class="line"> #include &quot;lame.h&quot;</span><br><span class="line"> #include &quot;machine.h&quot;</span><br><span class="line"> #include &quot;encoder.h&quot;</span><br><span class="line"><span class="comment">diff --git a/fft.c b/fft.c</span></span><br><span class="line"><span class="comment">index 4eea1ad..27febdb 100644</span></span><br><span class="line"><span class="comment">--- a/fft.c</span></span><br><span class="line"><span class="comment">+++ b/fft.c</span></span><br><span class="line"><span class="meta">@@ -44,7 +44,7 @@</span></span><br><span class="line"> #include &quot;util.h&quot;</span><br><span class="line"><span class="comment">--- a/fft.c</span></span><br><span class="line"><span class="comment">+++ b/fft.c</span></span><br><span class="line"><span class="meta">@@ -44,7 +44,7 @@</span></span><br><span class="line"> #include &quot;util.h&quot;</span><br><span class="line"> #include &quot;fft.h&quot;</span><br><span class="line"> </span><br><span class="line"><span class="deletion">-#include &quot;vector/lame_intrin.h&quot;</span></span><br><span class="line"><span class="addition">+//#include &quot;vector/lame_intrin.h&quot;</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">diff --git a/id3tag.c b/id3tag.c</span></span><br><span class="line"><span class="comment">index ac48510..8f148b8 100644</span></span><br><span class="line"><span class="comment">--- a/id3tag.c</span></span><br><span class="line"><span class="comment">+++ b/id3tag.c</span></span><br><span class="line"><span class="meta">@@ -41,17 +41,20 @@</span></span><br><span class="line"> # include &lt;string.h&gt;</span><br><span class="line"> # include &lt;ctype.h&gt;</span><br><span class="line"> #else</span><br><span class="line"><span class="deletion">-# ifndef HAVE_STRCHR</span></span><br><span class="line"><span class="deletion">-#  define strchr index</span></span><br><span class="line"><span class="deletion">-#  define strrchr rindex</span></span><br><span class="line"><span class="deletion">-# endif</span></span><br><span class="line"><span class="addition">+//# ifndef HAVE_STRCHR</span></span><br><span class="line"><span class="addition">+//#  define strchr index</span></span><br><span class="line"><span class="addition">+//#  define strrchr rindex</span></span><br><span class="line"><span class="addition">+//# endif</span></span><br><span class="line"> char   *strchr(), *strrchr();</span><br><span class="line"><span class="deletion">-# ifndef HAVE_MEMCPY</span></span><br><span class="line"><span class="deletion">-#  define memcpy(d, s, n) bcopy ((s), (d), (n))</span></span><br><span class="line"><span class="deletion">-# endif</span></span><br><span class="line"><span class="addition">+//# ifndef HAVE_MEMCPY</span></span><br><span class="line"><span class="addition">+//#  define memcpy(d, s, n) bcopy ((s), (d), (n))</span></span><br><span class="line"><span class="addition">+//# endif</span></span><br><span class="line"> #endif</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="addition">+#include &lt;malloc.h&gt;</span></span><br><span class="line"><span class="addition">+#include &lt;string.h&gt;</span></span><br><span class="line"><span class="addition">+#include &lt;stdlib.h&gt;</span></span><br><span class="line"> #include &quot;lame.h&quot;</span><br><span class="line"> #include &quot;machine.h&quot;</span><br><span class="line"> #include &quot;encoder.h&quot;</span><br><span class="line"><span class="comment">diff --git a/lame.c b/lame.c</span></span><br><span class="line"><span class="comment">index cb82225..299fd56 100644</span></span><br><span class="line"><span class="comment">--- a/lame.c</span></span><br><span class="line"><span class="comment">+++ b/lame.c</span></span><br><span class="line"><span class="meta">@@ -31,6 +31,8 @@</span></span><br><span class="line"> #endif</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="addition">+#include &lt;malloc.h&gt;</span></span><br><span class="line"><span class="addition">+#include &lt;string.h&gt;</span></span><br><span class="line"> #include &quot;lame.h&quot;</span><br><span class="line"> #include &quot;machine.h&quot;</span><br><span class="line"> </span><br><span class="line"><span class="comment">diff --git a/machine.h b/machine.h</span></span><br><span class="line"><span class="comment">index bf6fff2..c675c20 100644</span></span><br><span class="line"><span class="comment">--- a/machine.h</span></span><br><span class="line"><span class="comment">+++ b/machine.h</span></span><br><span class="line"><span class="meta">@@ -31,15 +31,15 @@</span></span><br><span class="line"> # include &lt;stdlib.h&gt;</span><br><span class="line"> # include &lt;string.h&gt;</span><br><span class="line"> #else</span><br><span class="line"><span class="deletion">-# ifndef HAVE_STRCHR</span></span><br><span class="line"><span class="deletion">-#  define strchr index</span></span><br><span class="line"><span class="deletion">-#  define strrchr rindex</span></span><br><span class="line"><span class="deletion">-# endif</span></span><br><span class="line"><span class="addition">+//# ifndef HAVE_STRCHR</span></span><br><span class="line"><span class="addition">+//#  define strchr index</span></span><br><span class="line"><span class="addition">+//#  define strrchr rindex</span></span><br><span class="line"><span class="addition">+//# endif</span></span><br><span class="line"> char   *strchr(), *strrchr();</span><br><span class="line"><span class="deletion">-# ifndef HAVE_MEMCPY</span></span><br><span class="line"><span class="deletion">-#  define memcpy(d, s, n) bcopy ((s), (d), (n))</span></span><br><span class="line"><span class="deletion">-#  define memmove(d, s, n) bcopy ((s), (d), (n))</span></span><br><span class="line"><span class="deletion">-# endif</span></span><br><span class="line"><span class="addition">+//# ifndef HAVE_MEMCPY</span></span><br><span class="line"><span class="addition">+//#  define memcpy(d, s, n) bcopy ((s), (d), (n))</span></span><br><span class="line"><span class="addition">+//#  define memmove(d, s, n) bcopy ((s), (d), (n))</span></span><br><span class="line"><span class="addition">+//# endif</span></span><br><span class="line"> #endif</span><br><span class="line"> </span><br><span class="line"> #if  defined(__riscos__)  &amp;&amp;  defined(FPA10)</span><br><span class="line"><span class="comment">diff --git a/newmdct.c b/newmdct.c</span></span><br><span class="line"><span class="comment">index 596cac9..ac98abd 100644</span></span><br><span class="line"><span class="comment">--- a/newmdct.c</span></span><br><span class="line"><span class="comment">+++ b/newmdct.c</span></span><br><span class="line"><span class="meta">@@ -30,6 +30,7 @@</span></span><br><span class="line"> # include &lt;config.h&gt;</span><br><span class="line"> #endif</span><br><span class="line"> </span><br><span class="line"><span class="addition">+#include &lt;string.h&gt;</span></span><br><span class="line"> #include &quot;lame.h&quot;</span><br><span class="line"> #include &quot;machine.h&quot;</span><br><span class="line"> #include &quot;encoder.h&quot;</span><br><span class="line"><span class="comment">diff --git a/psymodel.c b/psymodel.c</span></span><br><span class="line"><span class="comment">index 60076ee..1393c2a 100644</span></span><br><span class="line"><span class="comment">--- a/psymodel.c</span></span><br><span class="line"><span class="comment">+++ b/psymodel.c</span></span><br><span class="line"><span class="meta">@@ -145,7 +145,8 @@</span> blocktype_d[2]        block type to use for previous granule</span><br><span class="line"> #endif</span><br><span class="line"> </span><br><span class="line"> #include &lt;float.h&gt;</span><br><span class="line"><span class="deletion">-</span></span><br><span class="line"><span class="addition">+#include &lt;stdlib.h&gt;</span></span><br><span class="line"><span class="addition">+#include &lt;string.h&gt;</span></span><br><span class="line"> #include &quot;lame.h&quot;</span><br><span class="line"> #include &quot;machine.h&quot;</span><br><span class="line"> #include &quot;encoder.h&quot;</span><br><span class="line"><span class="comment">diff --git a/quantize.c b/quantize.c</span></span><br><span class="line"><span class="comment">index 9ba9c16..2906c00 100644</span></span><br><span class="line"><span class="comment">--- a/quantize.c</span></span><br><span class="line"><span class="comment">+++ b/quantize.c</span></span><br><span class="line"><span class="meta">@@ -28,6 +28,8 @@</span></span><br><span class="line"> # include &lt;config.h&gt;</span><br><span class="line"> #endif</span><br><span class="line"> </span><br><span class="line"><span class="addition">+#include &lt;stdlib.h&gt;</span></span><br><span class="line"><span class="addition">+#include &lt;string.h&gt;</span></span><br><span class="line"> #include &quot;lame.h&quot;</span><br><span class="line"> #include &quot;machine.h&quot;</span><br><span class="line"> #include &quot;encoder.h&quot;</span><br><span class="line"><span class="comment">diff --git a/quantize_pvt.c b/quantize_pvt.c</span></span><br><span class="line">:</span><br><span class="line"> #endif</span><br><span class="line"> </span><br><span class="line"> #include &lt;float.h&gt;</span><br><span class="line"><span class="deletion">-</span></span><br><span class="line"><span class="addition">+#include &lt;stdlib.h&gt;</span></span><br><span class="line"><span class="addition">+#include &lt;string.h&gt;</span></span><br><span class="line"> #include &quot;lame.h&quot;</span><br><span class="line"> #include &quot;machine.h&quot;</span><br><span class="line"> #include &quot;encoder.h&quot;</span><br><span class="line"><span class="comment">diff --git a/quantize.c b/quantize.c</span></span><br><span class="line"><span class="comment">index 9ba9c16..2906c00 100644</span></span><br><span class="line"><span class="comment">--- a/quantize.c</span></span><br><span class="line"><span class="comment">+++ b/quantize.c</span></span><br><span class="line"><span class="meta">@@ -28,6 +28,8 @@</span></span><br><span class="line"> # include &lt;config.h&gt;</span><br><span class="line"> #endif</span><br><span class="line"> </span><br><span class="line"><span class="addition">+#include &lt;stdlib.h&gt;</span></span><br><span class="line"><span class="addition">+#include &lt;string.h&gt;</span></span><br><span class="line"> #include &quot;lame.h&quot;</span><br><span class="line"> #include &quot;machine.h&quot;</span><br><span class="line"> #include &quot;encoder.h&quot;</span><br><span class="line"><span class="comment">diff --git a/quantize_pvt.c b/quantize_pvt.c</span></span><br><span class="line"><span class="comment">index d8d6447..3cd9966 100644</span></span><br><span class="line"><span class="comment">--- a/quantize_pvt.c</span></span><br><span class="line"><span class="comment">+++ b/quantize_pvt.c</span></span><br><span class="line"><span class="meta">@@ -36,6 +36,7 @@</span></span><br><span class="line"> #include &quot;reservoir.h&quot;</span><br><span class="line"> #include &quot;lame-analysis.h&quot;</span><br><span class="line"> #include &lt;float.h&gt;</span><br><span class="line"><span class="addition">+#include &lt;string.h&gt;</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> #define NSATHSCALE 100  /* Assuming dynamic range=96dB, this value should be 92 */</span><br><span class="line"><span class="comment">diff --git a/set_get.h b/set_get.h</span></span><br><span class="line"><span class="comment">index 37e4bcd..99ab73c 100644</span></span><br><span class="line"><span class="comment">--- a/set_get.h</span></span><br><span class="line"><span class="comment">+++ b/set_get.h</span></span><br><span class="line"><span class="meta">@@ -21,7 +21,7 @@</span></span><br><span class="line"> #ifndef __SET_GET_H__</span><br><span class="line"> #define __SET_GET_H__</span><br><span class="line"> </span><br><span class="line"><span class="deletion">-#include &lt;lame.h&gt;</span></span><br><span class="line"><span class="addition">+#include &quot;lame.h&quot;</span></span><br><span class="line"> </span><br><span class="line"> #if defined(__cplusplus)</span><br><span class="line"> extern  &quot;C&quot; &#123;</span><br><span class="line"><span class="comment">diff --git a/takehiro.c b/takehiro.c</span></span><br><span class="line"><span class="comment">index 67aba1b..ca02f98 100644</span></span><br><span class="line"><span class="comment">--- a/takehiro.c</span></span><br><span class="line"><span class="comment">+++ b/takehiro.c</span></span><br><span class="line"><span class="meta">@@ -27,6 +27,7 @@</span></span><br><span class="line"> #endif</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="addition">+#include &lt;string.h&gt;</span></span><br><span class="line"> #include &quot;lame.h&quot;</span><br><span class="line"> #include &quot;machine.h&quot;</span><br><span class="line"> #include &quot;encoder.h&quot;</span><br><span class="line"><span class="comment">diff --git a/util.c b/util.c</span></span><br><span class="line"><span class="comment">index 43b457c..e9255fe 100644</span></span><br><span class="line"><span class="comment">--- a/util.c</span></span><br><span class="line"><span class="comment">+++ b/util.c</span></span><br><span class="line"><span class="meta">@@ -27,6 +27,7 @@</span></span><br><span class="line"> #endif</span><br><span class="line"> </span><br><span class="line"> #include &lt;float.h&gt;</span><br><span class="line"><span class="addition">+#include &lt;malloc.h&gt;</span></span><br><span class="line"> #include &quot;lame.h&quot;</span><br><span class="line"> #include &quot;machine.h&quot;</span><br><span class="line"> #include &quot;encoder.h&quot;</span><br><span class="line"><span class="comment">diff --git a/util.h b/util.h</span></span><br><span class="line"><span class="comment">index 13f0cd4..b6bf306 100644</span></span><br><span class="line"><span class="comment">--- a/util.h</span></span><br><span class="line"><span class="comment">+++ b/util.h</span></span><br><span class="line"><span class="meta">@@ -567,7 +567,7 @@</span> extern  &quot;C&quot; &#123;</span><br><span class="line"> </span><br><span class="line"> /* log/log10 approximations */</span><br><span class="line">     extern void init_log_table(void);</span><br><span class="line"><span class="deletion">-    extern ieee754_float32_t fast_log2(ieee754_float32_t x);</span></span><br><span class="line"><span class="addition">+    extern float fast_log2(float x);</span></span><br><span class="line"> </span><br><span class="line">     int     isResamplingNecessary(SessionConfig_t const* cfg);</span><br><span class="line"> </span><br><span class="line"><span class="comment">diff --git a/vbrquantize.c b/vbrquantize.c</span></span><br><span class="line"><span class="comment">index 0f703b7..60834d3 100644</span></span><br><span class="line"><span class="comment">--- a/vbrquantize.c</span></span><br><span class="line"><span class="comment">+++ b/vbrquantize.c</span></span><br><span class="line"><span class="meta">@@ -27,6 +27,8 @@</span></span><br><span class="line"> #endif</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="addition">+#include &lt;stdlib.h&gt;</span></span><br><span class="line"><span class="addition">+#include &lt;string.h&gt;</span></span><br><span class="line"> #include &quot;lame.h&quot;</span><br><span class="line"> #include &quot;machine.h&quot;</span><br><span class="line"> #include &quot;encoder.h&quot;</span><br></pre></td></tr></table></figure><h3 id="编写CmakeList-txt"><a href="#编写CmakeList-txt" class="headerlink" title="编写CmakeList.txt"></a>编写CmakeList.txt</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.6</span>.<span class="number">0</span>)</span><br><span class="line"><span class="keyword">set</span>(CURRENT_DIR <span class="variable">$&#123;CMAKE_SOURCE_DIR&#125;</span>)</span><br><span class="line"><span class="keyword">message</span>(<span class="string">&quot;CURRENT_DIR:&quot;</span> <span class="variable">$&#123;CMAKE_SOURCE_DIR&#125;</span>)</span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;CMAKE_SOURCE_DIR&#125;</span>src/main/cpp/lame)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(LAME_DIR src/main/cpp/lame)</span><br><span class="line"><span class="keyword">message</span>(<span class="string">&quot;LAME_DIR:&quot;</span> <span class="variable">$&#123;LAME_DIR&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">aux_source_directory</span>(src/main/cpp/lame SRC_LIST)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_library</span>(mp3lame</span><br><span class="line">        SHARED</span><br><span class="line">        src/main/cpp/MP3Recorder.c</span><br><span class="line">        <span class="variable">$&#123;SRC_LIST&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#add_library(mp3lame</span></span><br><span class="line"><span class="comment">#        SHARED</span></span><br><span class="line"><span class="comment">#        src/main/cpp/MP3Recorder.c</span></span><br><span class="line"><span class="comment">#        src/main/cpp/lame/bitstream.c</span></span><br><span class="line"><span class="comment">#        src/main/cpp/lame/fft.c</span></span><br><span class="line"><span class="comment">#        src/main/cpp/lame/id3tag.c</span></span><br><span class="line"><span class="comment">#        src/main/cpp/lame/mpglib_interface.c</span></span><br><span class="line"><span class="comment">#        src/main/cpp/lame/presets.c</span></span><br><span class="line"><span class="comment">#        src/main/cpp/lame/quantize.c</span></span><br><span class="line"><span class="comment">#        src/main/cpp/lame/reservoir.c</span></span><br><span class="line"><span class="comment">#        src/main/cpp/lame/tables.c</span></span><br><span class="line"><span class="comment">#        src/main/cpp/lame/util.c</span></span><br><span class="line"><span class="comment">#        src/main/cpp/lame/VbrTag.c</span></span><br><span class="line"><span class="comment">#        src/main/cpp/lame/encoder.c</span></span><br><span class="line"><span class="comment">#        src/main/cpp/lame/gain_analysis.c</span></span><br><span class="line"><span class="comment">#        src/main/cpp/lame/lame.c</span></span><br><span class="line"><span class="comment">#        src/main/cpp/lame/newmdct.c</span></span><br><span class="line"><span class="comment">#        src/main/cpp/lame/psymodel.c</span></span><br><span class="line"><span class="comment">#        src/main/cpp/lame/quantize_pvt.c</span></span><br><span class="line"><span class="comment">#        src/main/cpp/lame/set_get.c</span></span><br><span class="line"><span class="comment">#        src/main/cpp/lame/takehiro.c</span></span><br><span class="line"><span class="comment">#        src/main/cpp/lame/vbrquantize.c</span></span><br><span class="line"><span class="comment">#        src/main/cpp/lame/version.c)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">find_library</span>( <span class="comment"># Sets the name of the path variable.</span></span><br><span class="line">        log-lib</span><br><span class="line">        log)</span><br><span class="line"></span><br><span class="line"><span class="keyword">target_link_libraries</span>(mp3lame</span><br><span class="line">        <span class="variable">$&#123;log-lib&#125;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>（可参考<a href="https://github.com/xmaihh/MFSocket/blob/master/liblame/CMakeLists.txt%EF%BC%89">https://github.com/xmaihh/MFSocket/blob/master/liblame/CMakeLists.txt）</a></p><h3 id="编写-java-类和-c-文件"><a href="#编写-java-类和-c-文件" class="headerlink" title="编写 java 类和 c 文件"></a>编写 java 类和 c 文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MP3Recorder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">     System.loadLibrary(<span class="string">&quot;mp3lame&quot;</span>);   </span><br><span class="line">  &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化 lame编码器</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inSampleRate</span></span><br><span class="line"><span class="comment">     *              输入采样率</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> outChannel</span></span><br><span class="line"><span class="comment">     *              声道数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> outSampleRate</span></span><br><span class="line"><span class="comment">     *              输出采样率</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> outBitrate</span></span><br><span class="line"><span class="comment">     *              比特率(kbps)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> quality</span></span><br><span class="line"><span class="comment">     *              0~9，0最好</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> inSampleRate, <span class="keyword">int</span> outChannel, <span class="keyword">int</span> outSampleRate, <span class="keyword">int</span> outBitrate, <span class="keyword">int</span> quality)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  编码，把 AudioRecord 录制的 PCM 数据转换成 mp3 格式</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> buffer_l</span></span><br><span class="line"><span class="comment">     *          左声道输入数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> buffer_r</span></span><br><span class="line"><span class="comment">     *          右声道输入数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> samples</span></span><br><span class="line"><span class="comment">     *          输入数据的size</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mp3buf</span></span><br><span class="line"><span class="comment">     *          输出数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     *          输出到mp3buf的byte数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">encode</span><span class="params">(<span class="keyword">short</span>[] buffer_l, <span class="keyword">short</span>[] buffer_r, <span class="keyword">int</span> samples, <span class="keyword">byte</span>[] mp3buf)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  刷写</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mp3buf</span></span><br><span class="line"><span class="comment">     *          mp3数据缓存区</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     *          返回刷写的数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">flush</span><span class="params">(<span class="keyword">byte</span>[] mp3buf)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭 lame 编码器，释放资源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生成.h文件</p><p><a href="https://xmaihh.github.io/2019/07/31/AndroidStudio%E5%BF%AB%E9%80%9F%E7%94%9F%E6%88%90jni%E5%A4%B4%E6%96%87%E4%BB%B6/">AndroidStudio快速生成jni头文件</a></p><p>编写MP3Recorder.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;lame/lame.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;MP3Recorder.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> lame_global_flags *glf = <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Class:     com_android_liblame_MP3Recorder</span></span><br><span class="line"><span class="comment"> * Method:    init</span></span><br><span class="line"><span class="comment"> * Signature: (IIIII)V</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">JNIEXPORT <span class="keyword">void</span> JNICALL Java_com_android_liblame_MP3Recorder_init</span><br><span class="line">        (JNIEnv *env, jclass instance, jint inSamplerate, jint outChannel, jint outSamplerate,</span><br><span class="line">         jint outBitrate, jint quality) &#123;</span><br><span class="line">    <span class="keyword">if</span> (glf != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        lame_close(glf);</span><br><span class="line">        glf = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    glf = lame_init();</span><br><span class="line">    lame_set_in_samplerate(glf, inSamplerate);</span><br><span class="line">    lame_set_num_channels(glf, outChannel);</span><br><span class="line">    lame_set_out_samplerate(glf, outSamplerate);</span><br><span class="line">    lame_set_brate(glf, outBitrate);</span><br><span class="line">    lame_set_quality(glf, quality);</span><br><span class="line">    lame_init_params(glf);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Class:     com_android_liblame_MP3Recorder</span></span><br><span class="line"><span class="comment"> * Method:    encode</span></span><br><span class="line"><span class="comment"> * Signature: ([S[SI[B)I</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">JNIEXPORT jint JNICALL Java_com_android_liblame_MP3Recorder_encode</span><br><span class="line">        (JNIEnv *env, jclass instance, jshortArray buffer_l, jshortArray buffer_r, jint samples,</span><br><span class="line">         jbyteArray mp3buf) &#123;</span><br><span class="line">    jshort *j_buffer_l = (*env)-&gt;GetShortArrayElements(env, buffer_l, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    jshort *j_buffer_r = (*env)-&gt;GetShortArrayElements(env, buffer_r, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> jsize mp3buf_size = (*env)-&gt;GetArrayLength(env, mp3buf);</span><br><span class="line">    jbyte *j_mp3buf = (*env)-&gt;GetByteArrayElements(env, mp3buf, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> result = lame_encode_buffer(glf, j_buffer_l, j_buffer_r,</span><br><span class="line">                                    samples, j_mp3buf, mp3buf_size);</span><br><span class="line"></span><br><span class="line">    (*env)-&gt;ReleaseShortArrayElements(env, buffer_l, j_buffer_l, <span class="number">0</span>);</span><br><span class="line">    (*env)-&gt;ReleaseShortArrayElements(env, buffer_r, j_buffer_r, <span class="number">0</span>);</span><br><span class="line">    (*env)-&gt;ReleaseByteArrayElements(env, mp3buf, j_mp3buf, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Class:     com_android_liblame_MP3Recorder</span></span><br><span class="line"><span class="comment"> * Method:    flush</span></span><br><span class="line"><span class="comment"> * Signature: ([B)I</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">JNIEXPORT jint JNICALL Java_com_android_liblame_MP3Recorder_flush</span><br><span class="line">        (JNIEnv *env, jclass instance, jbyteArray mp3buf) &#123;</span><br><span class="line">    <span class="keyword">const</span> jsize mp3buf_size = (*env)-&gt;GetArrayLength(env, mp3buf);</span><br><span class="line">    jbyte *j_mp3buf = (*env)-&gt;GetByteArrayElements(env, mp3buf, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> result = lame_encode_flush(glf, j_mp3buf, mp3buf_size);</span><br><span class="line"></span><br><span class="line">    (*env)-&gt;ReleaseByteArrayElements(env, mp3buf, j_mp3buf, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Class:     com_android_liblame_MP3Recorder</span></span><br><span class="line"><span class="comment"> * Method:    close</span></span><br><span class="line"><span class="comment"> * Signature: ()V</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">JNIEXPORT <span class="keyword">void</span> JNICALL Java_com_android_liblame_MP3Recorder_close</span><br><span class="line">        (JNIEnv *env, jclass instance) &#123;</span><br><span class="line">    lame_close(glf);</span><br><span class="line">    glf = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置build-gradle"><a href="#配置build-gradle" class="headerlink" title="配置build.gradle"></a>配置<code>build.gradle</code></h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">....</span><br><span class="line">...</span><br><span class="line">..</span><br><span class="line">.</span><br><span class="line">   <span class="comment">//*</span></span><br><span class="line">    externalNativeBuild &#123;</span><br><span class="line">        cmake &#123;</span><br><span class="line">            path <span class="string">&quot;CMakeLists.txt&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>点一下小锤子 :hammer: MakeProject。</p><p>编译生成 so库。</p><h3 id="录制MP3格式音频"><a href="#录制MP3格式音频" class="headerlink" title="录制MP3格式音频"></a>录制MP3格式音频</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 录音状态</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isRecording;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//开始录音</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">record</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 音源</span></span><br><span class="line">                <span class="keyword">int</span> audioSource = MediaRecorder.AudioSource.MIC;</span><br><span class="line">                <span class="comment">// 采样率</span></span><br><span class="line">                <span class="keyword">int</span> sampleRate = <span class="number">44100</span>;</span><br><span class="line">                <span class="comment">// 声道</span></span><br><span class="line">                <span class="keyword">int</span> channelConfig = AudioFormat.CHANNEL_IN_MONO;<span class="comment">//单声道</span></span><br><span class="line">                <span class="comment">// 采样位数</span></span><br><span class="line">                <span class="keyword">int</span> audioFormat = AudioFormat.ENCODING_PCM_16BIT;</span><br><span class="line">                <span class="comment">// 录音缓存区大小</span></span><br><span class="line">                <span class="keyword">int</span> bufferSizeInBytes;</span><br><span class="line">                <span class="comment">// 文件输出流</span></span><br><span class="line">                FileOutputStream fos;</span><br><span class="line">                <span class="comment">// 录音最小缓存大小</span></span><br><span class="line">                bufferSizeInBytes = AudioRecord.getMinBufferSize(sampleRate, channelConfig, audioFormat);</span><br><span class="line">                AudioRecord audioRecord = <span class="keyword">new</span> AudioRecord(audioSource, sampleRate, channelConfig, audioFormat, bufferSizeInBytes);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fos = <span class="keyword">new</span> FileOutputStream(getExternalCacheDir() + <span class="string">&quot;/demo.mp3&quot;</span>);</span><br><span class="line">                    MP3Recorder.init(sampleRate, <span class="number">2</span>, sampleRate, <span class="number">128</span>, <span class="number">5</span>);</span><br><span class="line">                    <span class="keyword">short</span>[] buffer = <span class="keyword">new</span> <span class="keyword">short</span>[bufferSizeInBytes];</span><br><span class="line">                    <span class="keyword">byte</span>[] mp3buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[(<span class="keyword">int</span>) (<span class="number">7200</span> + buffer.length * <span class="number">1.25</span>)];</span><br><span class="line">                    audioRecord.startRecording();</span><br><span class="line">                    isRecording = <span class="keyword">true</span>;</span><br><span class="line">                    <span class="keyword">while</span> (isRecording &amp;&amp; audioRecord.getRecordingState() == AudioRecord.RECORDSTATE_RECORDING) &#123;</span><br><span class="line">                        <span class="keyword">int</span> readSize = audioRecord.read(buffer, <span class="number">0</span>, bufferSizeInBytes);</span><br><span class="line">                        <span class="keyword">if</span> (readSize &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="keyword">int</span> encodeSize = MP3Recorder.encode(buffer, buffer, readSize, mp3buffer);</span><br><span class="line">                            <span class="keyword">if</span> (encodeSize &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                                <span class="keyword">try</span> &#123;</span><br><span class="line">                                    fos.write(mp3buffer, <span class="number">0</span>, encodeSize);</span><br><span class="line">                                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                                    e.printStackTrace();</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">int</span> flushSize = MP3Recorder.flush(mp3buffer);</span><br><span class="line">                    <span class="keyword">if</span> (flushSize &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            fos.write(mp3buffer, <span class="number">0</span>, flushSize);</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        fos.close();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    audioRecord.stop();</span><br><span class="line">                    audioRecord.release();</span><br><span class="line">                    MP3Recorder.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"> <span class="comment">// 停止录音</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        isRecording = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="音频解码"><a href="#音频解码" class="headerlink" title="音频解码"></a>音频解码</h1><p> 想要转换音频格式（如 mp3格式转 wav格式）或者添加背景音乐，都需要解码声音文件。<br> Android SDK 中提供了解码的 API，它就是 MediaCodec，也就是音频解码器，我们用它实现 mp3格式音频的解码：<br>把mp3格式转wav格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startDecoding</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="comment">// 待解码声音文件路径</span></span><br><span class="line">       String filePath = getExternalCacheDir() + <span class="string">&quot;/bg.mp3&quot;</span>;</span><br><span class="line">       <span class="comment">// 音/视频 提取器</span></span><br><span class="line">       MediaExtractor mediaExtractor = <span class="keyword">new</span> MediaExtractor(); <span class="keyword">try</span> &#123;</span><br><span class="line">           mediaExtractor.setDataSource(filePath);</span><br><span class="line">           <span class="comment">// 分离音频用的，获取音频数据</span></span><br><span class="line">           MediaFormat mediaFormat = mediaExtractor.getTrackFormat(<span class="number">0</span>);</span><br><span class="line">         <span class="comment">/*// 获取采样率</span></span><br><span class="line"><span class="comment">           int sampleRate = mediaFormat.getInteger(MediaFormat.KEY_SAMPLE_RATE);</span></span><br><span class="line"><span class="comment">           // 获取声道数</span></span><br><span class="line"><span class="comment">           int channelCount = mediaFormat.getInteger(MediaFormat.KEY_CHANNEL_COUNT);</span></span><br><span class="line"><span class="comment">           // 获取时长</span></span><br><span class="line"><span class="comment">           long duration = mediaFormat.getLong(MediaFormat.KEY_DURATION);*/</span></span><br><span class="line">           <span class="comment">// 获取类型</span></span><br><span class="line">           String mime = mediaFormat.getString(MediaFormat.KEY_MIME);</span><br><span class="line">         <span class="comment">/*System.out.println(&quot;sampleRate:&quot; + sampleRate + &quot;,channelCount:&quot; +</span></span><br><span class="line"><span class="comment">           channelCount + &quot;,duration:&quot; + duration + &quot;,mime:&quot; + mime );*/</span></span><br><span class="line">           </span><br><span class="line">           <span class="comment">// 选择音轨</span></span><br><span class="line">           mediaExtractor.selectTrack(<span class="number">0</span>);</span><br><span class="line">           <span class="comment">// 解码器</span></span><br><span class="line">           MediaCodec mediaCodec = MediaCodec.createDecoderByType(mime);</span><br><span class="line">           <span class="comment">// 配置解码器</span></span><br><span class="line">           mediaCodec.configure(mediaFormat, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="number">0</span>);</span><br><span class="line">           <span class="comment">// 开始解码</span></span><br><span class="line">           mediaCodec.start();</span><br><span class="line">           </span><br><span class="line">           <span class="comment">// 解码器在此缓存中获取输入数据</span></span><br><span class="line">           ByteBuffer[] inputBuffers = mediaCodec.getInputBuffers();</span><br><span class="line">           <span class="comment">// 编码器将解码后的数据放入此缓存中，保存的是pcm数据</span></span><br><span class="line">           ByteBuffer[] outputBuffers = mediaCodec.getOutputBuffers();</span><br><span class="line">           <span class="comment">// 用于描述解码得到的byte[]数据的相关信息</span></span><br><span class="line">           MediaCodec.BufferInfo bufferInfo = <span class="keyword">new</span> MediaCodec.BufferInfo();</span><br><span class="line">           </span><br><span class="line">           <span class="comment">// 创建随机读写流</span></span><br><span class="line">           RandomAccessFile raf = <span class="keyword">new</span> RandomAccessFile(getExternalCacheDir() + <span class="string">&quot;/demo.wav&quot;</span>, <span class="string">&quot;rw&quot;</span>);</span><br><span class="line">           <span class="comment">// 留出文件头的位置</span></span><br><span class="line">           raf.seek(<span class="number">44</span>);</span><br><span class="line">           <span class="comment">// 解码状态</span></span><br><span class="line">           <span class="keyword">boolean</span> isDecoding = <span class="keyword">true</span>;</span><br><span class="line">           main:</span><br><span class="line">           <span class="keyword">while</span> (isDecoding) &#123;</span><br><span class="line">               <span class="keyword">for</span> (ByteBuffer ib : inputBuffers) &#123;</span><br><span class="line">                   <span class="comment">// 获取输入缓存器</span></span><br><span class="line">                   <span class="keyword">int</span> inputIndex = mediaCodec.dequeueInputBuffer(-<span class="number">1</span>);</span><br><span class="line">                   <span class="keyword">if</span> (inputIndex &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                       <span class="keyword">break</span> main;</span><br><span class="line">                   &#125;</span><br><span class="line">                   ByteBuffer inputBuffer = inputBuffers[inputIndex];</span><br><span class="line">                   <span class="comment">// 读取数据到输入缓存器</span></span><br><span class="line">                   <span class="keyword">int</span> sampleSize = mediaExtractor.readSampleData(inputBuffer, <span class="number">0</span>);</span><br><span class="line">                   <span class="keyword">if</span> (sampleSize &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                       isDecoding = <span class="keyword">false</span>;</span><br><span class="line">                   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                       <span class="comment">// 通知解码器输入了数据</span></span><br><span class="line">                       mediaCodec.queueInputBuffer(inputIndex, <span class="number">0</span>, sampleSize, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">                       <span class="comment">// 移动到下一取样处</span></span><br><span class="line">                       mediaExtractor.advance();</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">               </span><br><span class="line">               <span class="comment">// 获取输出缓存器</span></span><br><span class="line">               <span class="keyword">int</span> outputIndex = mediaCodec.dequeueOutputBuffer(bufferInfo, <span class="number">10000</span>);</span><br><span class="line">               <span class="keyword">if</span> (outputIndex == -<span class="number">2</span>) &#123;</span><br><span class="line">                   <span class="comment">// 格式变了，重新获取一次</span></span><br><span class="line">                   outputIndex = mediaCodec.dequeueOutputBuffer(bufferInfo, <span class="number">10000</span>);</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="comment">// 拿到用于存放PCM数据的buffer</span></span><br><span class="line">               ByteBuffer outputBuffer;</span><br><span class="line">               <span class="comment">// PCM数据</span></span><br><span class="line">               <span class="keyword">byte</span>[] chunckPCM;</span><br><span class="line">               </span><br><span class="line">               <span class="keyword">while</span> (outputIndex &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                   <span class="comment">// 拿到用于存放PCM数据的buffer</span></span><br><span class="line">                   outputBuffer = outputBuffers[outputIndex];</span><br><span class="line">                   <span class="comment">// bufferInfo 定义了次数据块的大小</span></span><br><span class="line">                   chunckPCM = <span class="keyword">new</span> <span class="keyword">byte</span>[bufferInfo.size];</span><br><span class="line">                   <span class="comment">// 将buffer内的数据取出到字节数组中</span></span><br><span class="line">                   outputBuffer.get(chunckPCM);</span><br><span class="line">                   <span class="comment">// 数据取出后，一定记得清空，mediaCodec是反复使用这些buffer的</span></span><br><span class="line">                   outputBuffer.clear();</span><br><span class="line">                   <span class="comment">// 输出PCM数据到文件夹</span></span><br><span class="line">                   raf.write(chunckPCM, <span class="number">0</span>, bufferInfo.size);</span><br><span class="line">                   <span class="comment">// 释放输出buffer，不然mediaCodec用完所有buffer后，就不再向外输出数据</span></span><br><span class="line">                   mediaCodec.releaseOutputBuffer(outputIndex, <span class="keyword">false</span>);</span><br><span class="line">                   <span class="comment">// 再次获取数据,如果没有数据则outputIndex=-1,结束循环</span></span><br><span class="line">                   outputIndex = mediaCodec.dequeueOutputBuffer(bufferInfo, <span class="number">10000</span>);</span><br><span class="line">               &#125;</span><br><span class="line">               </span><br><span class="line">           &#125;</span><br><span class="line">           WriteWaveFileHeader(raf, raf.length(), <span class="number">44100</span>, <span class="number">1</span>, <span class="number">44100</span> * <span class="number">16</span> / <span class="number">8</span>);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 为 wav 文件添加文件头，前提是在头部预留了 44字节空间</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> raf        随机读写流</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> fileLength 文件总长</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> sampleRate 采样率</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> channels   声道数量</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> byteRate   码率 = 采样率 * 采样位数 * 声道数 / 8</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">WriteWaveFileHeader</span><span class="params">(RandomAccessFile raf, <span class="keyword">long</span> fileLength, <span class="keyword">long</span> sampleRate, <span class="keyword">int</span> channels, <span class="keyword">long</span> byteRate)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">       <span class="keyword">long</span> totalDataLen = fileLength + <span class="number">36</span>;</span><br><span class="line">       <span class="keyword">byte</span>[] header = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">44</span>];</span><br><span class="line">       header[<span class="number">0</span>] = <span class="string">&#x27;R&#x27;</span>; <span class="comment">// RIFF/WAVE header</span></span><br><span class="line">       header[<span class="number">1</span>] = <span class="string">&#x27;I&#x27;</span>;</span><br><span class="line">       header[<span class="number">2</span>] = <span class="string">&#x27;F&#x27;</span>;</span><br><span class="line">       header[<span class="number">3</span>] = <span class="string">&#x27;F&#x27;</span>;</span><br><span class="line">       header[<span class="number">4</span>] = (<span class="keyword">byte</span>) (totalDataLen &amp; <span class="number">0xff</span>);</span><br><span class="line">       header[<span class="number">5</span>] = (<span class="keyword">byte</span>) ((totalDataLen &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xff</span>);</span><br><span class="line">       header[<span class="number">6</span>] = (<span class="keyword">byte</span>) ((totalDataLen &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>);</span><br><span class="line">       header[<span class="number">7</span>] = (<span class="keyword">byte</span>) ((totalDataLen &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xff</span>);</span><br><span class="line">       header[<span class="number">8</span>] = <span class="string">&#x27;W&#x27;</span>;</span><br><span class="line">       header[<span class="number">9</span>] = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">       header[<span class="number">10</span>] = <span class="string">&#x27;V&#x27;</span>;</span><br><span class="line">       header[<span class="number">11</span>] = <span class="string">&#x27;E&#x27;</span>;</span><br><span class="line">       header[<span class="number">12</span>] = <span class="string">&#x27;f&#x27;</span>; <span class="comment">// &#x27;fmt &#x27; chunk</span></span><br><span class="line">       header[<span class="number">13</span>] = <span class="string">&#x27;m&#x27;</span>;</span><br><span class="line">       header[<span class="number">14</span>] = <span class="string">&#x27;t&#x27;</span>;</span><br><span class="line">       header[<span class="number">15</span>] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">       header[<span class="number">16</span>] = <span class="number">16</span>; <span class="comment">// 4 bytes: size of &#x27;fmt &#x27; chunk</span></span><br><span class="line">       header[<span class="number">17</span>] = <span class="number">0</span>;</span><br><span class="line">       header[<span class="number">18</span>] = <span class="number">0</span>;</span><br><span class="line">       header[<span class="number">19</span>] = <span class="number">0</span>;</span><br><span class="line">       header[<span class="number">20</span>] = <span class="number">1</span>; <span class="comment">// format = 1</span></span><br><span class="line">       header[<span class="number">21</span>] = <span class="number">0</span>;</span><br><span class="line">       header[<span class="number">22</span>] = (<span class="keyword">byte</span>) channels;</span><br><span class="line">       header[<span class="number">23</span>] = <span class="number">0</span>;</span><br><span class="line">       header[<span class="number">24</span>] = (<span class="keyword">byte</span>) (sampleRate &amp; <span class="number">0xff</span>);</span><br><span class="line">       header[<span class="number">25</span>] = (<span class="keyword">byte</span>) ((sampleRate &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xff</span>);</span><br><span class="line">       header[<span class="number">26</span>] = (<span class="keyword">byte</span>) ((sampleRate &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>);</span><br><span class="line">       header[<span class="number">27</span>] = (<span class="keyword">byte</span>) ((sampleRate &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xff</span>);</span><br><span class="line">       header[<span class="number">28</span>] = (<span class="keyword">byte</span>) (byteRate &amp; <span class="number">0xff</span>);</span><br><span class="line">       header[<span class="number">29</span>] = (<span class="keyword">byte</span>) ((byteRate &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xff</span>);</span><br><span class="line">       header[<span class="number">30</span>] = (<span class="keyword">byte</span>) ((byteRate &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>);</span><br><span class="line">       header[<span class="number">31</span>] = (<span class="keyword">byte</span>) ((byteRate &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xff</span>);</span><br><span class="line">       header[<span class="number">32</span>] = (<span class="keyword">byte</span>) (<span class="number">2</span> * <span class="number">16</span> / <span class="number">8</span>); <span class="comment">// block align</span></span><br><span class="line">       header[<span class="number">33</span>] = <span class="number">0</span>;</span><br><span class="line">       header[<span class="number">34</span>] = <span class="number">16</span>; <span class="comment">// bits per sample</span></span><br><span class="line">       header[<span class="number">35</span>] = <span class="number">0</span>;</span><br><span class="line">       header[<span class="number">36</span>] = <span class="string">&#x27;d&#x27;</span>;</span><br><span class="line">       header[<span class="number">37</span>] = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">       header[<span class="number">38</span>] = <span class="string">&#x27;t&#x27;</span>;</span><br><span class="line">       header[<span class="number">39</span>] = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">       header[<span class="number">40</span>] = (<span class="keyword">byte</span>) (fileLength &amp; <span class="number">0xff</span>);</span><br><span class="line">       header[<span class="number">41</span>] = (<span class="keyword">byte</span>) ((fileLength &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xff</span>);</span><br><span class="line">       header[<span class="number">42</span>] = (<span class="keyword">byte</span>) ((fileLength &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>);</span><br><span class="line">       header[<span class="number">43</span>] = (<span class="keyword">byte</span>) ((fileLength &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xff</span>);</span><br><span class="line">       raf.seek(<span class="number">0</span>);</span><br><span class="line">       raf.write(header, <span class="number">0</span>, <span class="number">44</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h1 id="录音添加背景音乐并实时播放，类似K歌效果"><a href="#录音添加背景音乐并实时播放，类似K歌效果" class="headerlink" title="录音添加背景音乐并实时播放，类似K歌效果"></a>录音添加背景音乐并实时播放，类似K歌效果</h1><p>K歌类 APP 都是录音加伴奏，这里实现 mp3 格式的背景音乐解码，与录音合并，并最终输出 mp3 格式的文件。即边录音边解码边合成，录音结束即合并结束。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 录音状态</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> isRecording;</span><br><span class="line"></span><br><span class="line"><span class="comment">//开始录音</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">record</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 音源</span></span><br><span class="line">            <span class="keyword">int</span> audioSource = MediaRecorder.AudioSource.MIC;</span><br><span class="line">            <span class="comment">// 采样率</span></span><br><span class="line">            <span class="keyword">int</span> sampleRate = <span class="number">44100</span>;</span><br><span class="line">            <span class="comment">// 声道</span></span><br><span class="line">            <span class="keyword">int</span> channelConfig = AudioFormat.CHANNEL_IN_MONO;<span class="comment">//单声道</span></span><br><span class="line">            <span class="comment">// 采样位数</span></span><br><span class="line">            <span class="keyword">int</span> audioFormat = AudioFormat.ENCODING_PCM_16BIT;</span><br><span class="line">            <span class="comment">// 录音最小缓存区大小</span></span><br><span class="line">            <span class="keyword">int</span> bufferSizeInBytes = AudioRecord.getMinBufferSize(sampleRate, channelConfig, audioFormat);</span><br><span class="line">            <span class="comment">// 录音对象</span></span><br><span class="line">            AudioRecord audioRecord = <span class="keyword">new</span> AudioRecord(audioSource, sampleRate, channelConfig, audioFormat, bufferSizeInBytes);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 音轨提取器</span></span><br><span class="line">                MediaExtractor mediaExtractor = <span class="keyword">new</span> MediaExtractor();</span><br><span class="line">                <span class="comment">// 给音轨提取器设置文件路径</span></span><br><span class="line">                mediaExtractor.setDataSource(getExternalCacheDir() + <span class="string">&quot;/bg.mp3&quot;</span>);</span><br><span class="line">                <span class="comment">// 获取音频格式信息</span></span><br><span class="line">                MediaFormat mediaFormat = mediaExtractor.getTrackFormat(<span class="number">0</span>);</span><br><span class="line">                <span class="comment">// 获取音频类型</span></span><br><span class="line">                String mime = mediaFormat.getString(MediaFormat.KEY_MIME);</span><br><span class="line">                <span class="comment">// 选中音轨</span></span><br><span class="line">                mediaExtractor.selectTrack(<span class="number">0</span>);</span><br><span class="line">                <span class="comment">// 构造解码器</span></span><br><span class="line">                MediaCodec mediaCodec = MediaCodec.createDecoderByType(mime);</span><br><span class="line">                <span class="comment">// 配置解码器</span></span><br><span class="line">                mediaCodec.configure(mediaFormat, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="number">0</span>);</span><br><span class="line">                <span class="comment">// 开始解码</span></span><br><span class="line">                mediaCodec.start();</span><br><span class="line">                <span class="comment">// 解码器在此缓存中获取输入数据</span></span><br><span class="line">                ByteBuffer[] inputBuffers = mediaCodec.getInputBuffers();</span><br><span class="line">                <span class="comment">// 编码器将解码后的数据放入此缓存中，存放的是pcm数据</span></span><br><span class="line">                ByteBuffer[] outputBuffers = mediaCodec.getOutputBuffers();</span><br><span class="line">                <span class="comment">// 用于描述解码得到的byte[]数据的相关信息</span></span><br><span class="line">                MediaCodec.BufferInfo bufferInfo = <span class="keyword">new</span> MediaCodec.BufferInfo();</span><br><span class="line">                <span class="comment">// 背景音乐解码后的数据输出流，先存储，然后读取再和录音合并</span></span><br><span class="line">                FileOutputStream fos_wav = <span class="keyword">new</span> FileOutputStream(getExternalCacheDir() + <span class="string">&quot;/demo.wav&quot;</span>);</span><br><span class="line">                <span class="comment">// 读取处理好的背景音乐，和录音合并</span></span><br><span class="line">                RandomAccessFile raf = <span class="keyword">new</span> RandomAccessFile(getExternalCacheDir() + <span class="string">&quot;/demo.wav&quot;</span>, <span class="string">&quot;rw&quot;</span>);</span><br><span class="line">                <span class="comment">// 背景音字节数</span></span><br><span class="line">                <span class="keyword">long</span> length = <span class="number">0</span>;</span><br><span class="line">                <span class="comment">// 存储大小端</span></span><br><span class="line">                <span class="keyword">boolean</span> isBigEnding = ByteOrder.nativeOrder() == ByteOrder.BIG_ENDIAN;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 录音缓存</span></span><br><span class="line">                <span class="keyword">short</span>[] buffer = <span class="keyword">new</span> <span class="keyword">short</span>[bufferSizeInBytes];</span><br><span class="line">                <span class="comment">// 最终生成的mp3数据的缓存器</span></span><br><span class="line">                <span class="keyword">byte</span>[] mp3buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[(<span class="keyword">int</span>) (<span class="number">7200</span> + buffer.length * <span class="number">1.25</span>)];</span><br><span class="line">                <span class="comment">// 开始录音</span></span><br><span class="line">                audioRecord.startRecording();</span><br><span class="line">                <span class="comment">// 录音状态</span></span><br><span class="line">                isRecording = <span class="keyword">true</span>;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 最终文件输出流</span></span><br><span class="line">                FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(getExternalCacheDir() + <span class="string">&quot;/demo.mp3&quot;</span>);</span><br><span class="line">                <span class="comment">// mp3编码器初始化</span></span><br><span class="line">                MP3Recorder.init(sampleRate, <span class="number">1</span>, sampleRate, <span class="number">128</span>, <span class="number">5</span>);</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">while</span> (isRecording) &#123;</span><br><span class="line">                    <span class="comment">// 读取录音</span></span><br><span class="line">                    <span class="keyword">int</span> readSize = audioRecord.read(buffer, <span class="number">0</span>, bufferSizeInBytes);</span><br><span class="line">                    </span><br><span class="line">                    <span class="comment">// 解码背景音乐</span></span><br><span class="line">                    <span class="keyword">for</span> (ByteBuffer ib : inputBuffers) &#123;</span><br><span class="line">                        <span class="comment">// 获取输入缓存器</span></span><br><span class="line">                        <span class="keyword">int</span> inputIndex = mediaCodec.dequeueInputBuffer(<span class="number">0</span>);</span><br><span class="line">                        <span class="keyword">if</span> (inputIndex &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        ByteBuffer inputBuffer = inputBuffers[inputIndex];</span><br><span class="line">                        <span class="comment">// 读取数据到输入缓存器</span></span><br><span class="line">                        <span class="keyword">int</span> sampleSize = mediaExtractor.readSampleData(inputBuffer, <span class="number">0</span>);</span><br><span class="line">                        <span class="keyword">if</span> (sampleSize &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="comment">// 通知解码器输入了数据</span></span><br><span class="line">                            mediaCodec.queueInputBuffer(inputIndex, <span class="number">0</span>, sampleSize, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">                            <span class="comment">// 移动到下一取样处</span></span><br><span class="line">                            mediaExtractor.advance();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 输出缓存器</span></span><br><span class="line">                    <span class="keyword">int</span> outputIndex = mediaCodec.dequeueOutputBuffer(bufferInfo, <span class="number">0</span>);</span><br><span class="line">                    <span class="keyword">if</span> (outputIndex == -<span class="number">2</span>) &#123;</span><br><span class="line">                        <span class="comment">// 格式变了，重新获取一次</span></span><br><span class="line">                        outputIndex = mediaCodec.dequeueOutputBuffer(bufferInfo, <span class="number">0</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 拿到用于存放PCM数据的buffer</span></span><br><span class="line">                    ByteBuffer outputBuffer;</span><br><span class="line">                    <span class="comment">// PCM数据</span></span><br><span class="line">                    <span class="keyword">byte</span>[] chunckPCM;</span><br><span class="line">                    <span class="comment">// 循环读取解码数据</span></span><br><span class="line">                    <span class="keyword">while</span> (outputIndex &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="comment">// 拿到用于存放PCM数据的buffer</span></span><br><span class="line">                        outputBuffer = outputBuffers[outputIndex];</span><br><span class="line">                        <span class="comment">// bufferInfo 定义了数据块的大小</span></span><br><span class="line">                        chunckPCM = <span class="keyword">new</span> <span class="keyword">byte</span>[bufferInfo.size];</span><br><span class="line">                        <span class="comment">// 将buffer内的数据取出到字节数组中</span></span><br><span class="line">                        outputBuffer.get(chunckPCM);</span><br><span class="line">                        <span class="comment">// 数据取出后，一定记得清空，mediaCodec是反复使用这些buffer的</span></span><br><span class="line">                        outputBuffer.clear();</span><br><span class="line">                        <span class="comment">// 输出PCM数据到文件夹</span></span><br><span class="line">                        fos_wav.write(chunckPCM, <span class="number">0</span>, bufferInfo.size);</span><br><span class="line">                        <span class="comment">// 背景音字节数（解码后的）</span></span><br><span class="line">                        length += bufferInfo.size;</span><br><span class="line">                        <span class="comment">// 释放输出buffer，不然mediaCodec用完所有buffer后，就不再向外输出数据</span></span><br><span class="line">                        mediaCodec.releaseOutputBuffer(outputIndex, <span class="keyword">false</span>);</span><br><span class="line">                        <span class="comment">// 再次获取数据,如果没有数据则outputIndex=-1,结束循环</span></span><br><span class="line">                        outputIndex = mediaCodec.dequeueOutputBuffer(bufferInfo, <span class="number">0</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    </span><br><span class="line">                    <span class="comment">// 混音</span></span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; buffer.length; i++) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (raf.getFilePointer() &gt;= length - <span class="number">1</span>) &#123;</span><br><span class="line">                            raf.seek(<span class="number">0</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (isBigEnding) &#123;</span><br><span class="line">                            buffer[i] += (<span class="keyword">short</span>) ((raf.read() &lt;&lt; <span class="number">8</span>) + raf.read());</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            buffer[i] += (<span class="keyword">short</span>) (raf.read() + (raf.read() &lt;&lt; <span class="number">8</span>));</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">if</span> (readSize &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">int</span> encodeSize = MP3Recorder.encode(buffer, buffer, readSize, mp3buffer);</span><br><span class="line">                        <span class="keyword">if</span> (encodeSize &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                fos.write(mp3buffer, <span class="number">0</span>, encodeSize);</span><br><span class="line">                            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                                e.printStackTrace();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">int</span> flushSize = MP3Recorder.flush(mp3buffer);</span><br><span class="line">                <span class="keyword">if</span> (flushSize &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        fos.write(mp3buffer, <span class="number">0</span>, flushSize);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fos.close();</span><br><span class="line">                    raf.close();</span><br><span class="line">                    fos_wav.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                audioRecord.stop();</span><br><span class="line">                audioRecord.release();</span><br><span class="line">                MP3Recorder.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    isRecording = <span class="keyword">false</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="http://blog.elight.cn/?post=200">Android 录音详解（一）—— MediaRecorder、AudioRecord、生成wav格式、边录边播</a><br><a href="http://blog.elight.cn/?post=201">Android 录音详解（二）—— 录制 mp3 格式音频（ lame 库的编译及使用）</a><br><a href="http://blog.elight.cn/?post=213">Android 录音详解（三）—— 音频解码</a><br><a href="http://blog.elight.cn/?post=220">Android 录音详解（四）—— 录音添加背景音乐</a></p>]]></content>
    
    
    <summary type="html">A man can fail many times, but he isn&#39;t a failure until he begins to blame somebody else.</summary>
    
    
    
    <category term="Android" scheme="http://example.com/categories/Android/"/>
    
    
    <category term="Android" scheme="http://example.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu18.04.2LTS下Wireshark报错Permission denied</title>
    <link href="http://example.com/2019/07/19/Ubuntu18-04-2LTS%E4%B8%8BWireshark%E6%8A%A5%E9%94%99Permission-denied/"/>
    <id>http://example.com/2019/07/19/Ubuntu18-04-2LTS%E4%B8%8BWireshark%E6%8A%A5%E9%94%99Permission-denied/</id>
    <published>2019-07-19T05:50:33.000Z</published>
    <updated>2019-07-19T07:01:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装Wireshark"><a href="#安装Wireshark" class="headerlink" title="安装Wireshark"></a>安装Wireshark</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install wireshark</span></span><br></pre></td></tr></table></figure><p>打开Wireshark，报错提示权限不足。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Couldn’t run &#x2F;usr&#x2F;bin&#x2F;dumpcap in child process: Permission denied</span><br></pre></td></tr></table></figure><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install libcap2-bin</span></span><br><span class="line">// 添加一个组，名字为 wireshark</span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo groupadd wireshark</span>  </span><br><span class="line">// 把当前的用户名添加到 wireshark组</span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo usermod -a -G wireshark YOUR-USER-NAME</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> newgrp wireshark</span></span><br><span class="line">// 修改组别</span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo chgrp wireshark /usr/bin/dumpcap</span></span><br><span class="line">// 添加执行权限</span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo chmod 754 /usr/bin/dumpcap</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo <span class="built_in">setcap</span> <span class="string">&#x27;CAP_NET_RAW+eip CAP_NET_ADMIN+eip&#x27;</span> /usr/bin/dumpcap</span></span><br></pre></td></tr></table></figure><h1 id="重启或者登出当前用户重新登入"><a href="#重启或者登出当前用户重新登入" class="headerlink" title="重启或者登出当前用户重新登入"></a>重启或者登出当前用户重新登入</h1>]]></content>
    
    
    <summary type="html">Look up at the stars, not down at your feet.</summary>
    
    
    
    <category term="Linux" scheme="http://example.com/categories/Linux/"/>
    
    
    <category term="Ubuntu" scheme="http://example.com/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu18.04.2LTS配置vnc+frp内网穿透实现桌面远程访问</title>
    <link href="http://example.com/2019/07/10/Ubuntu18-04-2LTS%E9%85%8D%E7%BD%AEvnc-frp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%AE%9E%E7%8E%B0%E6%A1%8C%E9%9D%A2%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE/"/>
    <id>http://example.com/2019/07/10/Ubuntu18-04-2LTS%E9%85%8D%E7%BD%AEvnc-frp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%AE%9E%E7%8E%B0%E6%A1%8C%E9%9D%A2%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE/</id>
    <published>2019-07-10T09:13:28.000Z</published>
    <updated>2019-07-12T02:43:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前使用<strong>Teamviewer</strong>来远程电脑，更新之后老是提示被商用，无奈，寻求其他方案如anyDesk、向日葵远程控制、splashtop、VNC。</p><p>frp项目地址：<a href="https://github.com/fatedier/frp">https://github.com/fatedier/frp</a><br>frp 是一个可用于内网穿透的高性能的反向代理应用，支持 tcp, udp,http 和 https协议。<br>VNC，全称为Virtual Network Computing，它是一个桌面共享系统。功能，类似于windows中的远程桌面功能。VNC与Windows远程桌面一样是使用RFB(Remote FrameBuffer，远程帧缓冲）协议来实现远程控制另外一台计算机。</p><h1 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h1><p>本文介绍的是在Ubuntu 18.04.2LTS Bionic Beaver上开启VNC服务端并frp穿透内网实现远程桌面共享。</p><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ul><li> 操作系统 Ubuntu 18.04.2LTS Bionic Beaver(x86_64)</li><li>云服务器（公网ip地址）</li></ul><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><ul><li><code>#</code> -要求使用root权限直接以root用户使用命令或对执行的命令使用linux <code>sudo</code></li><li><code>$</code> -要求给定的linux命令作为常规非特权用户执行</li></ul><h1 id="Step-1-启用远程桌面共享"><a href="#Step-1-启用远程桌面共享" class="headerlink" title="Step 1 启用远程桌面共享"></a>Step 1 启用远程桌面共享</h1><p>首先查看下Ubuntu系统上是否安装远程桌面共享，没有的话就执行安装:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt update &amp;&amp; sudo apt install -y vino</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/07/11/5d269f14e8d6180155.png" alt="desktop sharing"></p><p>使用<code>Activities</code>菜单搜索<code>Sharing</code>可以在<code>Settings</code>部分看到选项，直接打开它，或者以命令行的方式打开</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gnome-control-center sharing</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/07/11/5d26a667acfd332834.png" alt="Sharing"></p><p>单击Screen Sharing以开始远程桌面配置</p><p><img src="https://i.loli.net/2019/07/11/5d26a7c92f53141971.png"></p><p>将开关打开为<code>ON</code>，可以选择设置密码并记住你设置的密码，后面连接的时候要用密码。</p><p><code>Allow connections to control the screen</code>选项使远程用户能够主动与远程桌面交互。如果未选中此选项，则远程桌面会话将设置为只读。</p><p>启用Ubuntu的远程桌面功能后，可以看到系统正在侦听端口<code>5900</code></p><p><img src="https://i.loli.net/2019/07/11/5d26a98f1745624536.png"></p><p>如果您启用了<strong>UFW</strong>防火墙，请打开<code>5900</code>端口</p><p>类似于:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo ufw allow from any to any port 5900 proto tcp</span></span><br><span class="line">Rule added</span><br><span class="line">Rule added (v6)</span><br></pre></td></tr></table></figure><h1 id="Step-2-建立远程桌面连接"><a href="#Step-2-建立远程桌面连接" class="headerlink" title="Step 2 建立远程桌面连接"></a>Step 2 建立远程桌面连接</h1><p>我们将在Ubuntu 18.04系统上使用<a href="https://remmina.org/">Remmina</a>远程桌面客户端，如果没有先安装一个，打开<code>Ubuntu Software</code>搜索<code>remmina</code>安装或者命令行方式安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt install remmina</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/07/11/5d26ab913e00539267.png"></p><p>使用<code>Activities</code>菜单搜索并启动Remmina远程桌面客户端或运行命令行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> remmina</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/07/11/5d26adac35c9b24367.png"></p><p>从下拉菜单中选择协议<code>VNC</code>,然后输入Ubuntu远程桌面系统的主机名或IP地址，按下<code>Enter</code>键即可连接.</p><p><img src="https://i.loli.net/2019/07/11/5d26af736fdc768784.png"></p><p>输入前面设置的密码确认连接。</p><p><img src="https://i.loli.net/2019/07/11/5d26aff21109717706.png"></p><p>连接成功，是这个样子。</p><p><img src="https://i.loli.net/2019/07/11/5d26b11972e9c82984.png"></p><p>远程桌面共享连接成功。你也可以使用Remmina面板进一步调整远程桌面连接设置。</p><p>好了，到了这一步已经确认我们Ubuntu18.04系统的桌面共享服务已经安装好了。这意味着你将可以与你局域网内的机器实现桌面共享，接下来，使用frp实现内网穿透，对外网提供服务，随时随地可以使用网络远程桌面到Ubuntu 18.04。</p><h1 id="Step-3-配置frp实现内网穿透"><a href="#Step-3-配置frp实现内网穿透" class="headerlink" title="Step 3 配置frp实现内网穿透"></a>Step 3 配置frp实现内网穿透</h1><p>首先下载frp二进制文件 <a href="https://github.com/fatedier/frp/releases">https://github.com/fatedier/frp/releases</a><br>根据处理器架构选择对应压缩包</p><ul><li>Windows 64位 ：frp_版本号_windows_amd64.zip</li><li>Windows 32位：frp_版本号_windows_386.zip</li><li>Linux 64位：frp_版本号_linux_amd64.tar.gz</li><li>Linux 32位：frp_版本号_linux_386.tar.gz</li></ul><blockquote><p>注意：从0.18.0版本开始，新版与旧版不兼容，并且部分配置字段不同。请确保服务端和客户端使用同一版本。</p></blockquote><h2 id="下载程序"><a href="#下载程序" class="headerlink" title="下载程序"></a>下载程序</h2><p>我这里云服务器和Ubuntu18.04都是<code>x86_64</code>架构的，所以我下载<code>linux_amd64</code>的压缩包</p><p>下面以<code>x84_64</code>处理器架构举例， 此时frp 最新版是<code>v0.27.0</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看cpu架构</span></span><br><span class="line">arch</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建frp文件夹并进入</span></span><br><span class="line">mkdir frp &amp;&amp; cd frp</span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载</span></span><br><span class="line">wget -q -c --no-check-certificate https://github.com/fatedier/frp/releases/download/v0.27.0/frp_0.27.0_linux_amd64.tar.gz</span><br><span class="line"><span class="meta">#</span><span class="bash"> 解压</span></span><br><span class="line">tar -xzvf frp_0.27.0_linux_amd64.tar.gz</span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入文件夹</span></span><br><span class="line">cd frp_0.27.0_linux_amd64</span><br><span class="line"><span class="meta">#</span><span class="bash"> 确保 frps 程序具有可执行权限</span></span><br><span class="line">chmod +x frps</span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行</span></span><br><span class="line">./frps --help</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/07/11/5d26db3f4493072975.png"></p><blockquote><p>如果有报错  <code>-bash: ./frps: cannot execute binary file: Exec format error</code>就说明你下错版本</p></blockquote><h2 id="配置程序"><a href="#配置程序" class="headerlink" title="配置程序"></a>配置程序</h2><p>服务端配置参考<a href="https://github.com/fatedier/frp/blob/master/conf/frps_full.ini">frps_full.ini</a><br>客户端配置参考<a href="https://github.com/fatedier/frp/blob/master/conf/frpc_full.ini">frpc_full.ini</a></p><h3 id="服务端-frps-ini"><a href="#服务端-frps-ini" class="headerlink" title="服务端 -frps.ini"></a>服务端 -frps.ini</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下面这句开头必须要有，表示配置的开始</span></span><br><span class="line">[common]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> frp 服务端端口（必须）</span></span><br><span class="line">bind_port = 7000</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> frp 服务端密码（必须）</span></span><br><span class="line">token = 12345678</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 认证超时时间，由于时间戳会被用于加密认证，防止报文劫持后被他人利用</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 因此服务端与客户端所在机器的时间差不能超过这个时间（秒）</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 默认为900秒，即15分钟，如果设置成0就不会对报文时间戳进行超时验证</span></span><br><span class="line">authentication_timeout = 900</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 仪表盘端口，只有设置了才能使用仪表盘（即后台）</span></span><br><span class="line">dashboard_port = 7500</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 仪表盘访问的用户名密码，如果不设置，则默认都是 admin</span></span><br><span class="line">dashboard_user = admin</span><br><span class="line">dashboard_pwd = admin</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果你想要用 frp 穿透访问内网中的网站（例如路由器设置页面）</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 则必须要设置以下两个监听端口，不设置则不会开启这项功能</span></span><br><span class="line">vhost_http_port = 10080</span><br><span class="line">vhost_https_port = 10443</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 此设置需要配合客户端设置，仅在穿透到内网中的 http 或 https 时有用（可选）</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 假设此项设置为 example.com，客户端配置 http 时将 subdomain 设置为 <span class="built_in">test</span>，</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 则你将 test.example.com 解析到服务端后，可以使用此域名来访问客户端对应的 http</span></span><br><span class="line">subdomain_host = example.com</span><br></pre></td></tr></table></figure><p>这是我的服务端-frps.ini的配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line">bind_port = 7000</span><br><span class="line">token = 12345678</span><br><span class="line">authentication_timeout = 900</span><br><span class="line">dashboard_port = 7500</span><br><span class="line">dashboard_user = admin</span><br><span class="line">dashboard_pwd = admin</span><br><span class="line">vhost_http_port = 8080</span><br><span class="line">subdomain_host = example.com</span><br><span class="line">max_pool_count = 10</span><br><span class="line">log_file = ./frps.log</span><br><span class="line">log_level = info</span><br><span class="line">log_max_days = 3</span><br></pre></td></tr></table></figure><h3 id="客户端-frpc-ini"><a href="#客户端-frpc-ini" class="headerlink" title="客户端 -frpc.ini"></a>客户端 -frpc.ini</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">###########################################</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 基本配置(必须)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 下面这句开头必须要有，表示配置的开始</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">###########################################</span></span></span><br><span class="line">[common]</span><br><span class="line"><span class="meta">#</span><span class="bash"> frp 服务端地址，可以填ip或者域名</span></span><br><span class="line">server_addr = 0.0.0.0</span><br><span class="line"><span class="meta">#</span><span class="bash"> frp 服务端端口，即填写服务端配置中的 bind_port</span></span><br><span class="line">server_port = 7000</span><br><span class="line"><span class="meta">#</span><span class="bash"> 填写 frp 服务端密码</span></span><br><span class="line">token = 12345678</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##########################################</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 转发 ssh</span> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 自定义一个配置名称，格式为“[名称]”，放在开头</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##########################################</span></span></span><br><span class="line">[ssh]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 连接类型，填 tcp 或 udp</span></span><br><span class="line">type = tcp</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 本地ip，填你需要转发到的目的ip</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果是转发到frp客户端所在本机（比如路由器）则填 127.0.0.1</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 否则填对应机器的内网ip</span></span><br><span class="line">local_ip = 127.0.0.1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 需要转发到的端口，比如 ssh 端口是 22</span></span><br><span class="line">local_port = 22</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 是否加密客户端与服务端之间的通信，默认是 <span class="literal">false</span></span></span><br><span class="line">use_encryption = false</span><br><span class="line"><span class="meta">#</span><span class="bash"> 是否压缩客户端与服务端之间的通信，默认是 <span class="literal">false</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 压缩可以节省流量，但需要消耗 CPU 资源</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 加密自然也会消耗 CPU 资源，但是不大</span></span><br><span class="line">use_compression = false</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> frp 服务端的远程监听端口，即你访问服务端的 remote_port 就相当于访问</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 客户端的 local_port，如果填0则会随机分配一个端口</span></span><br><span class="line">remote_port = 6001</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##########################################</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 转发HTTP(s)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 自定义一个配置名称，格式为“[名称]”，放在开头</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##########################################</span></span></span><br><span class="line">[router-web]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 连接类型，填 http 或 https</span></span><br><span class="line">type = http</span><br><span class="line"></span><br><span class="line">local_ip = 127.0.0.1</span><br><span class="line">local_port = 80</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> http 可以考虑加密和压缩一下</span></span><br><span class="line">use_encryption = true</span><br><span class="line">use_compression = true</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 自定义访问网站的用户名和密码，如果不定义的话谁都可以访问，会不安全</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 有些路由器如果从内部访问web是不需要用户名密码的，因此需要在这里加一层密码保护</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果你发现不加这个密码保护，路由器配置页面原本的用户认证能正常生效的话，可以不加</span></span><br><span class="line">http_user = admin</span><br><span class="line">http_pwd = admin</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 还记得我们在服务端配置的 subdomain_host = example.com 吗</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 假设这里我们填 web01，那么你将 web01.example.com 解析到服务端ip后</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 你就可以使用 域名:端口 来访问你的 http 了</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 这个域名的作用是用来区分不同的 http，因为你可以配置多个这样的配置</span></span><br><span class="line">subdomain = web01</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 自定义域名，这个不同于 subdomain，你可以设置与 subdomain_host 无关的其他域名</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> subdomain 与 custom_domains 中至少有一个必须要设置</span></span><br><span class="line">custom_domains = web02.yourdomain.com</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 匹配路径，可以设置多个，用逗号分隔，比如你设置 locations 为以下这个，</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 那么所有 http://xxx/abc 和 http://xxx/def 都会被转发到 http://xxx/</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果不需要这个功能可以不写这项，就直接该怎么访问就怎么访问</span></span><br><span class="line">locations = /abc,/def</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重写 host header，相当于反向代理中的“发送域名”</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果设置了，转发 http 时，请求中的 host 会被替换成这个</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 一般情况下不需要用到这个，可以不写这项</span></span><br><span class="line">host_header_rewrite = dev.yourdomain.com</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#############################################</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> TCP/UDP 范围转发</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 自定义一个配置名称，格式为“[range:名称]”，放在开头</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#############################################</span></span></span><br><span class="line">[range:multi-port]</span><br><span class="line"></span><br><span class="line">type = tcp</span><br><span class="line">local_ip = 127.0.0.1</span><br><span class="line">use_encryption = false</span><br><span class="line">use_compression = false</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 本地端口和远程端口可以指定多个范围，如下格式，且范围之间必须一一对应</span></span><br><span class="line">local_port = 6010-6020,6022,6024-6028</span><br><span class="line">remote_port = 16010-16020,16022,16024-16028</span><br></pre></td></tr></table></figure><p>这是我的客户端-frpc.ini的配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line">server_addr = example.com</span><br><span class="line">server_port = 7000</span><br><span class="line">token = 12345678</span><br><span class="line"></span><br><span class="line">[web]</span><br><span class="line">type = http</span><br><span class="line">local_ip = 192.168.103.145</span><br><span class="line">local_port = 80</span><br><span class="line">custom_domains = example.com</span><br><span class="line"></span><br><span class="line">[RDP]</span><br><span class="line">type = tcp</span><br><span class="line">local_ip = 192.168.103.145</span><br><span class="line">local_port = 5900</span><br><span class="line">remote_port = 5900</span><br></pre></td></tr></table></figure><h4 id="服务器端运行启动"><a href="#服务器端运行启动" class="headerlink" title="服务器端运行启动"></a>服务器端运行启动</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> nohup /root/frp/frps -c /root/frp/frps.ini &amp;</span></span><br></pre></td></tr></table></figure><h4 id="客户端-Ubuntu18-04-启动"><a href="#客户端-Ubuntu18-04-启动" class="headerlink" title="客户端(Ubuntu18.04)启动"></a>客户端(Ubuntu18.04)启动</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> nohup /home/xmaihh/frp/frpc -c /home/xmaihh/frp/frpc.ini &amp;</span></span><br></pre></td></tr></table></figure><h4 id="停止"><a href="#停止" class="headerlink" title="停止"></a>停止</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pkill frps   或者 pkill frpc</span></span><br></pre></td></tr></table></figure><blockquote><p>云服务器注意放行相关端口.</p></blockquote><h4 id="开机启动"><a href="#开机启动" class="headerlink" title="开机启动"></a>开机启动</h4><p>自启动可以修改<code>/etc/rc.local</code>文件,加入启动命令<br>或者其他系统自行设置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh -e</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="bash"><span class="comment"># rc.local</span></span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="bash"><span class="comment"># This script is executed at the end of each multiuser runlevel.</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Make sure that the script will <span class="string">&quot;exit 0&quot;</span> on success or any other</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> value on error.</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="bash"><span class="comment"># In order to enable or disable this script just change the execution</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> bits.</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="bash"><span class="comment"># By default this script does nothing.</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">nohup socat TCP4-LISTEN:4443,reuseaddr,fork TCP4:192.168.103.145:8123 &gt;&gt; /root/socat.log 2&gt;&amp;1 &amp;</span></span><br><span class="line"><span class="meta">#</span><span class="bash">nohup socat UDP4-LISTEN:4443,reuseaddr,fork UDP4:192.168.103.145:8123 &gt;&gt; /root/socat.log 2&gt;&amp;1 &amp;</span></span><br><span class="line">nohup /root/frp/frps -c /root/frp/frps.ini &amp;</span><br><span class="line">exit 0</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="建立远程连"><a href="#建立远程连" class="headerlink" title="建立远程连"></a>建立远程连</h1><p>请注意<code>remote_port = 5900</code>我把Ubuntu18.04的VNC Sharing端口<code>5900</code>映射到云服务器的<code>5900</code>端口，建立连接时，连接你的<code>服务器+服务器端口号</code>。</p><p>这里我使用手机开数据网络，关闭WIFi，下载<code>VNC Viewer</code>客户端来一下远程连接。</p><p><img src="https://i.loli.net/2019/07/12/5d27d97f26fb410469.png"></p><p>打开手机<code>VNC Viewer</code>,点击<code>+</code>,在<code>Address</code>处填入 ip+端口形式 <code>xxx.xxx.xxx.xxx::5900</code>或者 域名+端口形式 <code>example.com::5900</code>。</p><p><img src="https://i.loli.net/2019/07/12/5d27dba5ee57884621.png"></p><p>点击进行下一步输入密码以看到画面了。</p><p><img src="https://i.loli.net/2019/07/12/5d27dbbc9663997267.png"></p><h1 id="Issues"><a href="#Issues" class="headerlink" title="Issues"></a>Issues</h1><h2 id="No-matching-security-types"><a href="#No-matching-security-types" class="headerlink" title="No matching security types"></a>No matching security types</h2><p>VNC客户端不支持加密。任何连接到远程桌面共享服务器的尝试都将导致<code>No matching security types</code>错误</p><p>如果遇到这个错误，请按照以下步骤解决:</p><ol><li>安装<code>dconf</code>工具</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install dconf-tools</span></span><br></pre></td></tr></table></figure><ol start="2"><li>打开<code>dconf-editor</code></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> dconf-editor</span></span><br></pre></td></tr></table></figure><p>依次切换到<code>org-&gt;gnome-&gt;desktop-&gt;remote-access</code>并将<code>require-encryption</code>项目关闭。</p><p><img src="https://i.loli.net/2019/07/12/5d27e1f110d9a37918.png"></p><ol start="3"><li>执行</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gsettings <span class="built_in">set</span> org.gnome.Vino require-encryption <span class="literal">false</span></span></span><br></pre></td></tr></table></figure><blockquote><p>如果输出警告：<code>GLib-GIO-Message: 10:19:43.137: Using the &#39;memory&#39; GSettings backend.  Your settings will not be saved or shared with other applications.</code><br>可以先执行<code>export GIO_EXTRA_MODULES=/usr/lib/x86_64-linux-gnu/gio/modules/</code>然后再执行3。</p></blockquote><ol start="4"><li>确认已禁用远程服务器上的加密</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gsettings list-recursively org.gnome.Vino | grep encrypt</span> </span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/07/12/5d27e488a925935610.png"></p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://www.tecmint.com/enable-desktop-sharing-in-ubuntu-linux-mint/">How To Enable Desktop Sharing In Ubuntu and Linux Mint</a><br><a href="https://moe.best/tutorial/frp.html">内网穿透神器搭建 萌新也看得懂的教程系列</a></p>]]></content>
    
    
    <summary type="html">Limitations live only in our minds. But if we use our imaginations, our possibilities become limitless.</summary>
    
    
    
    <category term="Linux" scheme="http://example.com/categories/Linux/"/>
    
    
    <category term="Ubuntu" scheme="http://example.com/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>MySQL字符转义处理方法</title>
    <link href="http://example.com/2019/06/18/MySQL%E5%AD%97%E7%AC%A6%E8%BD%AC%E4%B9%89%E5%A4%84%E7%90%86%E6%96%B9%E6%B3%95/"/>
    <id>http://example.com/2019/06/18/MySQL%E5%AD%97%E7%AC%A6%E8%BD%AC%E4%B9%89%E5%A4%84%E7%90%86%E6%96%B9%E6%B3%95/</id>
    <published>2019-06-18T05:44:38.000Z</published>
    <updated>2019-06-18T09:19:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MySQL转义字符"><a href="#MySQL转义字符" class="headerlink" title="MySQL转义字符"></a>MySQL转义字符</h1><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td>\0</td><td>ASCII 0(NUL)字符</td><td></td></tr><tr><td>&#39;</td><td>ASCII 39 单引号(‘’’)</td><td></td></tr><tr><td>&quot;</td><td>ASCII 34 双引号(‘“’)</td><td></td></tr><tr><td>\b</td><td>ASCII 8 退格符</td><td></td></tr><tr><td>\n</td><td>ASCII 10 换行符</td><td></td></tr><tr><td>\r</td><td>ASCII 13 回车符</td><td></td></tr><tr><td>\t</td><td>ASCII 9 制表符(TAB)</td><td></td></tr><tr><td>\Z</td><td>ASCII 26(控制（Ctrl）-Z)。该字符可以编码为‘\Z’，以允许你解决在Windows中ASCII 26代表文件结尾这一问题</td><td></td></tr><tr><td>\</td><td>反斜线(‘\’)字符</td><td></td></tr><tr><td>%</td><td>‘%’字符</td><td></td></tr><tr><td>_</td><td>‘_’字符</td><td></td></tr></tbody></table><p>比如,对单引号、双引号和反斜杠的转义处理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">origin = origin.replace(<span class="string">&quot;\\&quot;</span>, <span class="string">&quot;\\\\&quot;</span>)</span><br><span class="line">origin = origin.replace(<span class="string">&quot;&#x27;&quot;</span>, <span class="string">&quot;\\&#x27;&quot;</span>)</span><br><span class="line">origin = origin.replace(<span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;\\&quot;&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="判断是否需要转义方法"><a href="#判断是否需要转义方法" class="headerlink" title="判断是否需要转义方法"></a>判断是否需要转义方法</h1><p>判断字符串是否含有特殊符号,Java方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断内容是否需要进行转义</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> x</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isNeedEscape</span><span class="params">(String x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> needsHexEscape = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(StringUtils.isBlank(x)) &#123;</span><br><span class="line">        <span class="keyword">return</span> needsHexEscape;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> stringLength = x.length();</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i &gt;= stringLength)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">char</span> c = x.charAt(i);</span><br><span class="line">        <span class="keyword">switch</span>(c)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>: <span class="comment">// &#x27;\0&#x27;</span></span><br><span class="line">            needsHexEscape = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="number">10</span>: <span class="comment">// &#x27;\n&#x27;</span></span><br><span class="line">            needsHexEscape = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="number">13</span>: <span class="comment">// &#x27;\r&#x27;</span></span><br><span class="line">            needsHexEscape = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="number">92</span>: <span class="comment">// &#x27;\\&#x27;</span></span><br><span class="line">            needsHexEscape = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="number">39</span>: <span class="comment">// &#x27;\&#x27;&#x27;</span></span><br><span class="line">            needsHexEscape = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="number">34</span>: <span class="comment">// &#x27;&quot;&#x27;</span></span><br><span class="line">            needsHexEscape = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="number">26</span>: <span class="comment">// &#x27;\032&#x27;</span></span><br><span class="line">            needsHexEscape = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(needsHexEscape)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        i++;</span><br><span class="line">    &#125; <span class="keyword">while</span>(<span class="keyword">true</span>);</span><br><span class="line">    <span class="keyword">return</span> needsHexEscape;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对字符转义处理:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对mysql字符进行转义</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> x</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">escapeString</span><span class="params">(String x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Strings.isBlank(x)) &#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!isNeedEscape(x)) &#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> stringLength = x.length();</span><br><span class="line">    String parameterAsString = x;</span><br><span class="line">    StringBuffer buf = <span class="keyword">new</span> StringBuffer((<span class="keyword">int</span>)((<span class="keyword">double</span>)x.length() * <span class="number">1.1000000000000001D</span>));</span><br><span class="line">    <span class="comment">// 可以指定结果前后追加单引号：&#x27;</span></span><br><span class="line">    <span class="comment">//buf.append(&#x27;\&#x27;&#x27;);</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; stringLength; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">char</span> c = x.charAt(i);</span><br><span class="line">        <span class="keyword">switch</span>(c)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>: <span class="comment">// &#x27;\0&#x27;</span></span><br><span class="line">            buf.append(<span class="string">&#x27;\\&#x27;</span>);</span><br><span class="line">            buf.append(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="number">10</span>: <span class="comment">// &#x27;\n&#x27;</span></span><br><span class="line">            buf.append(<span class="string">&#x27;\\&#x27;</span>);</span><br><span class="line">            buf.append(<span class="string">&#x27;n&#x27;</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="number">13</span>: <span class="comment">// &#x27;\r&#x27;</span></span><br><span class="line">            buf.append(<span class="string">&#x27;\\&#x27;</span>);</span><br><span class="line">            buf.append(<span class="string">&#x27;r&#x27;</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="number">92</span>: <span class="comment">// &#x27;\\&#x27;</span></span><br><span class="line">            buf.append(<span class="string">&#x27;\\&#x27;</span>);</span><br><span class="line">            buf.append(<span class="string">&#x27;\\&#x27;</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="number">39</span>: <span class="comment">// &#x27;\&#x27;&#x27;</span></span><br><span class="line">            buf.append(<span class="string">&#x27;\\&#x27;</span>);</span><br><span class="line">            buf.append(<span class="string">&#x27;\&#x27;&#x27;</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="number">34</span>: <span class="comment">// &#x27;&quot;&#x27;</span></span><br><span class="line">            buf.append(<span class="string">&#x27;\\&#x27;</span>);</span><br><span class="line">            buf.append(<span class="string">&#x27;&quot;&#x27;</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="number">26</span>: <span class="comment">// &#x27;\032&#x27;</span></span><br><span class="line">            buf.append(<span class="string">&#x27;\\&#x27;</span>);</span><br><span class="line">            buf.append(<span class="string">&#x27;Z&#x27;</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        buf.append(c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 可以指定结果前后追加单引号：&#x27;</span></span><br><span class="line">    <span class="comment">//buf.append(&#x27;\&#x27;&#x27;);</span></span><br><span class="line">    parameterAsString = buf.toString();</span><br><span class="line">    <span class="keyword">return</span> parameterAsString;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>MySQL</code>语句没有处理好转义字符，通常会报错:<code>Error code 1064: Syntax error</code></p></blockquote><h1 id="Python中re-escape-函数"><a href="#Python中re-escape-函数" class="headerlink" title="Python中re.escape()函数"></a>Python中<code>re.escape()</code>函数</h1><p>re.escape()是用来处理需要进行正则表达式匹配的字符串中，本身包含正则表达式元字符的情况，这个函数的处理方法也很简单，就是对字符串中所有的非字母（ASCII letters）、数字（numbers）及下划线（’_’）的字符前都加反斜线（’\‘），这样进行转义处理。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">a = <span class="string">&quot;he&#x27;s pen.&quot;</span></span><br><span class="line">print(a)  <span class="comment"># he&#x27;s pen.</span></span><br><span class="line">a = re.escape(a)</span><br><span class="line">print(a)  <span class="comment"># he\&#x27;s\ pen\.</span></span><br><span class="line">a = a.replace(<span class="string">&#x27;\\&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">print(a)  <span class="comment"># he&#x27;s pen.</span></span><br></pre></td></tr></table></figure><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://www.jyoryo.com/index.php/archives/21.html">MySQL字符转义涉及的问题及解决</a><br><a href="https://www.polarxiong.com/archives/Python-%E5%AF%B9%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E9%9D%9E%E5%AD%97%E6%AF%8D-%E6%95%B0%E5%AD%97%E6%88%96%E4%B8%8B%E5%88%92%E7%BA%BF%E5%AD%97%E7%AC%A6%E8%BF%9B%E8%A1%8C%E8%BD%AC%E4%B9%89.html">Python:对字符串中非字母、数字或下划线字符进行转义</a></p>]]></content>
    
    
    <summary type="html">You have to believe in yourself. That&#39;s the secret.</summary>
    
    
    
    <category term="SQL" scheme="http://example.com/categories/SQL/"/>
    
    
    <category term="SQL" scheme="http://example.com/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>Linux与Windows文件显示乱码</title>
    <link href="http://example.com/2019/06/05/Linux%E4%B8%8EWindows%E6%96%87%E4%BB%B6%E6%98%BE%E7%A4%BA%E4%B9%B1%E7%A0%81/"/>
    <id>http://example.com/2019/06/05/Linux%E4%B8%8EWindows%E6%96%87%E4%BB%B6%E6%98%BE%E7%A4%BA%E4%B9%B1%E7%A0%81/</id>
    <published>2019-06-05T06:44:29.000Z</published>
    <updated>2019-06-05T08:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>从Windows内拷贝一个txt文件到Linux下打开显示乱码</p><ul><li><p>Windows下默认使用GB2312编码</p></li><li><p>Linux下默认使用UTF-8编码</p></li></ul><p>＃　解决办法</p><p>使用Linux下的<code>iconv</code>命令改变文件的编码</p><p>  <code>test.txt</code>由<code>GB2312</code>转换成<code>UTF-8</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iconv　 -f 　GB2312　 -t　 UTF-8　 test.txt　 -o 　test.txt</span><br></pre></td></tr></table></figure><p>  <code>test.txt</code>由<code>UTF-8</code>转换成<code>GB2312</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iconv　-f　 UTF-8　 -t　 GB2312 　test.txt　 -o 　test.txt</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Today is going to be a beautiful day.</summary>
    
    
    
    <category term="Linux" scheme="http://example.com/categories/Linux/"/>
    
    
    <category term="Linux" scheme="http://example.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu18.04.2LTS安装MySQL</title>
    <link href="http://example.com/2019/05/17/Ubuntu18-04-2LTS%E5%AE%89%E8%A3%85MySQL/"/>
    <id>http://example.com/2019/05/17/Ubuntu18-04-2LTS%E5%AE%89%E8%A3%85MySQL/</id>
    <published>2019-05-17T07:32:28.000Z</published>
    <updated>2020-11-19T03:32:45.722Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.mysql.com/">MySQL</a>是一个开源数据库管理系统，通常作为流行的<a href="https://en.wikipedia.org/wiki/LAMP_(software_bundle)">LAMP</a> （Linux，Apache，MySQL，PHP / Python / Perl）的一部分进行安装。 它使用关系数据库和SQL（结构化查询语言）来管理其数据。</p><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ul><li>Ubuntu 18.04.2 LTS</li><li>MySQL 5.7.26</li><li>MySQL Workbench (可视化＊可选)</li></ul><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>在 Ubuntu 18.04 中，默认情况下最新版本的 MySQL 包含在 APT 软件包存储库中,直接执行安装即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt update</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo apt install mysql-server</span></span><br></pre></td></tr></table></figure><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>接下来配置MySQL，执行命令，运行MySQL附带的安全脚本，根据提示操作修改一些默认规则。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo mysql_secure_installation</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/05/17/5cde7753987ea12819.png"></p><p><img src="https://i.loli.net/2019/05/17/5cde78771595f84396.png"></p><h1 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h1><p>安装完MySQL已经开始自动运行。 运行命令检查一下状态。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> systemctl status mysql.service</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/05/17/5cde790f819fe19186.png"></p><p>显示如上信息说明mysql服务是正常的。</p><p>如果MySQL没有运行，你可以用<code>sudo systemctl start mysql</code>启动它。</p><p>尝试使用mysqladmin工具连接到数据库，该工具是允许您运行管理命令的客户端。 例如，该命令表示以root身份连接到MySQL（ -u root ），提示输入密码（ -p ）并返回该版本。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo mysqladmin -p -u root version</span></span><br></pre></td></tr></table></figure><p>得到类似以下输出:<br><img src="https://i.loli.net/2019/05/17/5cde7fec58af778411.png"></p><h1 id="可视化"><a href="#可视化" class="headerlink" title="可视化"></a>可视化</h1><p>MySQL可视化工具软件安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install mysql-workbench</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/05/17/5cde82554de7656758.png"></p><p>在Ubuntu中打开MySQL Workbench软件可以看到有一个本地连接，点进去打开开报错了。</p><p><img src="https://i.loli.net/2019/05/17/5cde84a6c61a011438.png"></p><blockquote><p>这跟前面配置有一些关系，前面删除了匿名用户和测试数据库，禁止了远程root用户登录。</p></blockquote><p>这里来通过配置添加一个可以访问的数据库。</p><h2 id="进入MySQL控制台"><a href="#进入MySQL控制台" class="headerlink" title="进入MySQL控制台"></a>进入MySQL控制台</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo mysql -uroot -p</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/05/20/5ce25bd4e87f614892.png"></p><h2 id="新建数据库和用户"><a href="#新建数据库和用户" class="headerlink" title="新建数据库和用户"></a>新建数据库和用户</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 创建数据库ticket</span><br><span class="line"><span class="meta">$</span><span class="bash"> CREATE DATABASE ticket;</span></span><br><span class="line">// 创建用户xmai(密码Uf4bGZ53Ds*#) 并赋予其ticketDB数据库的所有权限</span><br><span class="line"><span class="meta">$</span><span class="bash"> GRANT ALL PRIVILEGES ON ticket.* TO xmai@localhost IDENTIFIED BY <span class="string">&quot;Uf4bGZ53Ds*#&quot;</span>;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/05/21/5ce3a2ddd80a069294.png"></p><blockquote><p>我们在前面MySQL配置时，增加了密码强度验证插件validate_password，相关参数设置的较为严格。使用了该插件会检查设置的密码是否符合当前设置的强度规则，若不满足则拒绝设置并报错类似<code>ERROR 1819 (HY000):Your password does not satisfy the current policy requirements</code>。前面我选择的是<code>[1] MEDIUM Length &gt;=8 , numeric,mixed case, and special characters</code></p></blockquote><h2 id="进行访问控制配置"><a href="#进行访问控制配置" class="headerlink" title="进行访问控制配置"></a>进行访问控制配置</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 允许xmai用户可以从任意机器上登入mysql</span><br><span class="line"><span class="meta">$</span><span class="bash"> GRANT ALL PRIVILEGES ON ticket.* TO xmai@<span class="string">&quot;%&quot;</span> IDENTIFIED BY <span class="string">&quot;Uf4bGZ53Ds*#&quot;</span>;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/05/21/5ce3a337c4c2c27607.png"></p><p>配置完成。</p><p>打开MySQL workbench连接数据库</p><p><img src="https://i.loli.net/2019/05/21/5ce3a3ca4f6b732789.png"></p><p>配置访问的数据库用户名和密码，确定。</p><p><img src="https://i.loli.net/2019/05/21/5ce3a4dc6156450553.png"></p><h2 id="允许局域网连接"><a href="#允许局域网连接" class="headerlink" title="允许局域网连接"></a>允许局域网连接</h2><p>修改连接 <code>bind-address</code> 配置项</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf</span><br></pre></td></tr></table></figure><p>修改<code>bind-address = 127.0.0.1</code>配置或者修改为<code>bind-address = 0.0.0.0</code>，来允许所有IP访问，或者输入一个你指定的IP地址</p><p>保存后使用以下命令重启mysql</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo /etc/init.d/mysql restart</span><br></pre></td></tr></table></figure><p>使用以下命令进入mysql修改访问权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ sudo mysql -uroot -p</span><br><span class="line">输入密码</span><br><span class="line">$ use mysql</span><br><span class="line">//授权用户能进行远程连接</span><br><span class="line">$ grant all privileges on *.* to root@<span class="string">&quot;%&quot;</span> identified by <span class="string">&quot;password&quot;</span> with grant option;</span><br><span class="line">//刷新权限信息</span><br><span class="line">$ flush privileges;</span><br></pre></td></tr></table></figure><p>命令中的两个星号，第一个星号表示数据库名称，第二个星号表示该数据库下的某个表名称。写成两个星号表示所有的数据库都进行授权。<br>root表示授权root账号。<br>“%”表示授权的用户IP可以指定，这里代表任意的IP地址都能访问MySQL数据库。<br>“password”表示分配账号对应的密码，这里密码自己替换成你的mysql root帐号密码</p><p>所以此处可以写成：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grant all PRIVILEGES on testdabatase.testtable to username@<span class="string">&#x27;192.168.1.2&#x27;</span> identified by <span class="string">&#x27;user-pass&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="Error-1366-Incorrect-string-value-‘-xE7-xA0-x94-xE5-x8F-x91…’-for-column-‘departname’-at-row-1"><a href="#Error-1366-Incorrect-string-value-‘-xE7-xA0-x94-xE5-x8F-x91…’-for-column-‘departname’-at-row-1" class="headerlink" title="Error 1366: Incorrect string value: ‘\xE7\xA0\x94\xE5\x8F\x91…’ for column ‘departname’ at row 1"></a>Error 1366: Incorrect string value: ‘\xE7\xA0\x94\xE5\x8F\x91…’ for column ‘departname’ at row 1</h2><p>插入数据时,报异常。MySQL的utf8编码最多3个字节，UTF-8编码有可能是两个、三个、四个字节，如Emoji表情或者某些特殊字符是4个字节,所以数据插不进去 。</p><p>一顿搜索后找到解决方案</p><ol><li>在mysql的安装目录下找到<code>/etc/mysql/my.cnf</code>,作如下修改</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"></span><br><span class="line">character-set-server=utf8mb4</span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line"></span><br><span class="line">default-character-set=utf8mb4</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/05/21/5ce3b6a8168b938652.png"></p><p>​        修改后重启Mysql   <code> sudo service mysql restart</code></p><ol start="2"><li>将已经建好的表也转换成utf8mb4</li></ol><p>在终端执行<code>sudo mysql -uroot -p</code>命令进入MySQL控制台<br>然后执行 命令：<code>alter table TABLE_NAME convert to character set utf8mb4 collate utf8mb4_bin;</code></p><p>将TABLE_NAME替换成你的表名即可。</p><p><img src="https://i.loli.net/2019/05/21/5ce3b49a3e2f723010.png"></p><p>可以看到插入数据成功！</p><p><img src="https://i.loli.net/2019/05/21/5ce3baaca602961339.png"></p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://www.howtoing.com/how-to-install-mysql-on-ubuntu-18-04/">如何在Ubuntu 18.04上安装MySQL</a></p><p><a href="https://blog.csdn.net/azhegps/article/details/71480633">解决mysql插入数据时出现Incorrect string value: ‘\xF0\x9F…’ for column ‘name’ at row 1的异常</a></p>]]></content>
    
    
    <summary type="html">Somewhere beyond right and wrong, there is a garden, I will meet you there.</summary>
    
    
    
    <category term="Linux" scheme="http://example.com/categories/Linux/"/>
    
    
    <category term="SQL" scheme="http://example.com/tags/SQL/"/>
    
    <category term="Ubuntu" scheme="http://example.com/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Golang交叉编译</title>
    <link href="http://example.com/2019/05/16/Golang%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91/"/>
    <id>http://example.com/2019/05/16/Golang%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91/</id>
    <published>2019-05-16T08:51:34.000Z</published>
    <updated>2019-05-16T11:05:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Golang交叉编译，一个平台环境下生成其他平台的可执行程序。</p><ul><li>GOOS：目标平台的操作系统（darwin、freebsd、linux、windows） </li><li>GOARCH：目标平台的体系架构（386、amd64、arm） </li><li>CGO_ENABLED:  开启/禁止C与Go混编(0,1)</li></ul><p>Mac 下编译 Linux 和 Windows 64位可执行程序</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build main.go</span> </span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build main.go</span></span><br></pre></td></tr></table></figure><p>Linux 下编译 Mac 和 Windows 64位可执行程序</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build main.go</span> </span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build main.go</span></span><br></pre></td></tr></table></figure><p>Windows 下编译 Mac 和 Linux 64位可执行程序</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">SET CGO_ENABLED=0 </span><br><span class="line">SET GOOS=darwin </span><br><span class="line">SET GOARCH=amd64 </span><br><span class="line">go build main.go </span><br><span class="line"></span><br><span class="line">SET CGO_ENABLED=0 </span><br><span class="line">SET GOOS=linux </span><br><span class="line">SET GOARCH=amd64 </span><br><span class="line">go build main.go</span><br></pre></td></tr></table></figure><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://blog.csdn.net/huyongtq/article/details/81805065">go交叉编译arm上的程序</a></p>]]></content>
    
    
    <summary type="html">In spite of you and me and the whole silly world going to pieces around us, I love you.</summary>
    
    
    
    <category term="Golang" scheme="http://example.com/categories/Golang/"/>
    
    
    <category term="Golang" scheme="http://example.com/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu18.04.2LTS安装微信web开发工具(wine)</title>
    <link href="http://example.com/2019/05/14/Ubuntu18-04-2LTS%E5%AE%89%E8%A3%85%E5%BE%AE%E4%BF%A1web%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7-wine/"/>
    <id>http://example.com/2019/05/14/Ubuntu18-04-2LTS%E5%AE%89%E8%A3%85%E5%BE%AE%E4%BF%A1web%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7-wine/</id>
    <published>2019-05-14T08:09:03.000Z</published>
    <updated>2019-05-15T04:53:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>当我打开微信小程序开发者工具<a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html?t=19051421">下载页</a><br><img src="https://i.loli.net/2019/05/15/5cdb74fe9716f93266.png"></p><p>额，没有Linux版本。好吧，自力更生。</p><h1 id="Linux微信web开发者工具"><a href="#Linux微信web开发者工具" class="headerlink" title="Linux微信web开发者工具"></a>Linux微信web开发者工具</h1><h1 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h1><ul><li><a href="https://wiki.winehq.org/Ubuntu">Wine</a></li><li><a href="https://github.com/cytle/wechat_web_devtools">Linux微信web开发者工具</a></li></ul><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><ul><li><code>#</code> -要求使用root权限直接以root用户使用命令或对执行的命令使用linux <code>sudo</code></li><li><code>$</code> -要求给定的linux命令作为常规非特权用户执行</li></ul><p>如果您之前安装过来自其他仓库的 Wine 安装包，请在尝试安装 WineHQ 安装包之前删除它及依赖它的所有安装包（如：wine-mono、wine-gecko、winetricks），否则可能导致依赖冲突。</p><h2 id="Step1-删除之前安装的Wine"><a href="#Step1-删除之前安装的Wine" class="headerlink" title="Step1 删除之前安装的Wine"></a>Step1 删除之前安装的Wine</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 1. 删除软件及配置文件</span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get --purge remove wine</span></span><br><span class="line">// 2. 删除没用的依赖包</span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get autoremove wine</span></span><br><span class="line">// 3. 此时dpkg的列表中有&quot;rc&quot;状态的软件包,可以执行以下命令进行最后清理</span><br><span class="line"><span class="meta">$</span><span class="bash"> dpkg -l |grep ^rc|awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> |sudo xargs dpkg -P</span></span><br><span class="line">// 4. 然后删除安装包,位于/root/.wine和/home/usrname/.wine</span><br><span class="line"><span class="meta">$</span><span class="bash"> rm -rf /root/.wine</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> rm -rf /home/usrname/.wine</span></span><br></pre></td></tr></table></figure><blockquote><p>删除之后可能残留wine快捷方式的残留目录，进入目录检查下是否包含wine相关的内容</p><p>/usr/share/applications/            <em>//wine快捷方式</em><br>/usr/share/app-install/                <em>//wine快捷方式</em><br>/home/username/.lacal/             <em>//wine应用程序快捷方式</em><br>/home/username/.cache/           <em>//wine应用程序快捷方式</em><br>/home/username/.config/menus/applications-merged/ </p></blockquote><h2 id="Step2-安装-WineHQ-安装包"><a href="#Step2-安装-WineHQ-安装包" class="headerlink" title="Step2 安装 WineHQ 安装包"></a>Step2 安装 <a href="https://wiki.winehq.org/Ubuntu_zhcn">WineHQ 安装包</a></h2><p>如果您使用的是 64 位系统，请开启 32 bit 架构支持（如果您之前没有开启的话）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo dpkg --add-architecture i386</span> </span><br><span class="line">// 下载添加仓库密钥</span><br><span class="line"><span class="meta">$</span><span class="bash"> wget -nc https://dl.winehq.org/wine-builds/Release.key</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-key add Release.key</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-add-repository https://dl.winehq.org/wine-builds/ubuntu/</span></span><br><span class="line">// 添加仓库</span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-add-repository<span class="string">&#x27;deb https://dl.winehq.org/wine-builds/ubuntu/ xenial main&#x27;</span></span></span><br><span class="line">// 更新软件包</span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get update</span></span><br><span class="line">// 安装以下任一一个安装包</span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo apt install --install-recommends winehq-stable   // 稳定的分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo apt install --install-recommends winehq-devel    // 开发分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo apt install --install-recommends winehq-staging  //Staging 分支</span></span><br><span class="line">// 查看wine版本命令</span><br><span class="line"><span class="meta">$</span><span class="bash"> wine --version</span></span><br></pre></td></tr></table></figure><blockquote><p>错误1：“E: 仓库 “<a href="http://ppa.launchpad.net/ubuntu-wine/ppa/ubuntu">http://ppa.launchpad.net/ubuntu-wine/ppa/ubuntu</a> bionic Release” 没有 Release 文件。”  Ubuntu18.04LTS的版本代号为<code>bionic</code>，<br>这里报错我把这里<code>bionic</code>修改为Ubuntu16.04LTS的版本代号<code>xenial</code></p><p>错误2：’’W: GPG 错误：<a href="http://dl.winehq.org/wine-builds/ubuntu">http://dl.winehq.org/wine-builds/ubuntu</a> xenial InRelease: 由于没有公钥，无法验证下列签名： NO_PUBKEY 76F1A20FF987672F<br>E: 仓库 “<a href="http://dl.winehq.org/wine-builds/ubuntu">http://dl.winehq.org/wine-builds/ubuntu</a> xenial InRelease” 没有数字签名”<br>执行命令<code>$ sudo apt-key adv --recv-keys --keyserver keyserver.Ubuntu.com F987672F</code></p></blockquote><h2 id="Step3-安装Linux微信web开发者工具"><a href="#Step3-安装Linux微信web开发者工具" class="headerlink" title="Step3  安装Linux微信web开发者工具"></a>Step3  安装<a href="https://github.com/cytle/wechat_web_devtools">Linux微信web开发者工具</a></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/cytle/wechat_web_devtools.git</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> wechat_web_devtools</span></span><br><span class="line">// 自动下载最新 `nw.js` , 同时部署目录 `~/.config/wechat_web_devtools/`</span><br><span class="line"><span class="meta">$</span><span class="bash"> ./bin/wxdt install</span></span><br><span class="line">// 启动</span><br><span class="line"><span class="meta">$</span><span class="bash"> ./bin/wxdt</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/05/15/5cdb8297a445c94962.png"></p><h2 id="Step4-创建一个启动图标"><a href="#Step4-创建一个启动图标" class="headerlink" title="Step4 创建一个启动图标"></a>Step4 创建一个启动图标</h2><p>在 /usr/shared/applications/ 目录下，添加 xxx.desktop 文件（xxx为应用程序名），填写相关信息，保存即可。</p><p>例如，Icon=xxx ,Exec=xxx 替换为你的相应目录即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/usr/bin/env xdg-open</span></span><br><span class="line"></span><br><span class="line">[Desktop Entry]</span><br><span class="line">Encoding=UTF-8</span><br><span class="line">Type=Application</span><br><span class="line">Categories=Development;</span><br><span class="line">Icon=/home/xmaihh/Application/wechat_web_devtools/images/we_dev.png</span><br><span class="line">Exec=/home/xmaihh/Application/wechat_web_devtools/bin/wxdt                      </span><br><span class="line">Name=WeChat Web develop tools</span><br><span class="line">Name[zh_CN]=微信Web开发工具</span><br><span class="line">MimeType=</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/05/15/5cdb892f6e8e153613.png"></p><p>附上<a href="https://i.loli.net/2019/05/15/5cdb836d0232a43197.png">微信Web开发工具icon128x128</a></p>]]></content>
    
    
    <summary type="html">Adopting the right attitude can convert a negative stress into a positive one.</summary>
    
    
    
    <category term="微信小程序" scheme="http://example.com/categories/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
    <category term="Ubuntu" scheme="http://example.com/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu18.04.2LTS解决KVM permision denied报错</title>
    <link href="http://example.com/2019/05/10/Ubuntu18-04-2LTS%E8%A7%A3%E5%86%B3KVM-permision-denied%E6%8A%A5%E9%94%99/"/>
    <id>http://example.com/2019/05/10/Ubuntu18-04-2LTS%E8%A7%A3%E5%86%B3KVM-permision-denied%E6%8A%A5%E9%94%99/</id>
    <published>2019-05-10T02:21:11.000Z</published>
    <updated>2019-05-15T04:40:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>我在尝试在Ubuntu18.04.2LTS的AndroidStudio上运行Android Virtual Device(AVD) 时，遇到这个报错：<code>/dev/kvm device: permission denied</code>。</p><p><img src="https://i.loli.net/2019/05/10/5cd4f15ca663e.png"></p><p>解决：</p><ol><li>Install <code>qemu-kvm</code></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt install qemu-kvm</span></span><br></pre></td></tr></table></figure><ol start="2"><li>添加当前用户到kvm组</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo adduser &lt;username&gt; kvm</span></span><br></pre></td></tr></table></figure><ol start="3"><li>添加当前用户权限</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo chown &lt;username&gt; /dev/kvm</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/05/10/5cd4f3a098847.png"></p><p>完成所有步骤后，可以成功启动AVD了。</p><p><img src="https://i.loli.net/2019/05/10/5cd4f4139318f.png"></p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://blog.chirathr.com/android/ubuntu/2018/08/13/fix-avd-error-ubuntu-18-04/">How to fix KVM permission denied error on Ubuntu 18.04</a></p>]]></content>
    
    
    <summary type="html">Forgiveness is the fragrance that the violet sheds on the heel that has crushed it.</summary>
    
    
    
    <category term="Linux" scheme="http://example.com/categories/Linux/"/>
    
    
    <category term="Ubuntu" scheme="http://example.com/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Android-SDK开发</title>
    <link href="http://example.com/2019/04/30/Android-SDK%E5%BC%80%E5%8F%91/"/>
    <id>http://example.com/2019/04/30/Android-SDK%E5%BC%80%E5%8F%91/</id>
    <published>2019-04-30T07:52:30.000Z</published>
    <updated>2019-04-30T10:24:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SDK简介"><a href="#SDK简介" class="headerlink" title="SDK简介"></a>SDK简介</h1><p>SDK(Software Development Kit)，广泛意义上的 <code>SDK</code> 一般都是为特定的软件包、软件框架、硬件平台、操作系统等建立应用程序时所使用的开发工具的集合（<code>系统 SDK</code>）。而狭义上的 <code>SDK</code>（<code>应用 SDK</code>） 则是基于<code>系统 SDK</code> 进行开发的新的、独立于具体业务且完成特定功能的一组工具的集合。通常情况下，SDK 在应用程序中是作为特定功能提供者的角色出现的。例如推送功能的 SDK、统计功能的 SDK、广告功能的 SDK、性能监测功能的 SDK 以及分享功能的 SDK 等等。</p><h1 id="SDK设计"><a href="#SDK设计" class="headerlink" title="SDK设计"></a>SDK设计</h1><ul><li>易用性</li><li>稳定性</li><li>灵活性</li><li>最小资源开销</li><li>主线程</li><li>最小权限原则</li><li>严格的生命周期把控</li></ul><h1 id="API设计"><a href="#API设计" class="headerlink" title="API设计"></a>API设计</h1><ul><li>单一职责原则</li><li>参数尽可能少</li><li>参数合法性校验</li><li>优美的降解(预期的异常抛出)</li><li>实现不要影响API</li></ul><h1 id="版本管理"><a href="#版本管理" class="headerlink" title="版本管理"></a>版本管理</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">     alpha版本</span><br><span class="line">        +</span><br><span class="line">        v</span><br><span class="line">     beta版本</span><br><span class="line">        +</span><br><span class="line">        v</span><br><span class="line">release candidate版本(rc版)</span><br><span class="line">        +</span><br><span class="line">        v</span><br><span class="line">  release版本(发布)</span><br></pre></td></tr></table></figure><ul><li><p>alpha 版：该版本表示该 SDK 产品在此阶段主要是以实现功能为主，通常只在开发团队内部交流使用。一般来说，该版本的 SDK 产品存在的 Bug 较多，需要经历多个 alpha 版本的迭代才能进入 beta 版。</p></li><li><p>beta 版：该版本相对于 alpha 版已经有了很大的改进，修复了严重的 Bug，但是还存在一些已知或是未知的 Bug，通常情况下只在开发团队以及测试团队之间交流使用，需要经历多个 beta 版本的迭代才能进入 rc 版。</p></li><li><p>release candidate 版（rc 版）：该版本的 SDK 趋于成熟，基本上不会出现导致错误的 Bug，原则上不再增加新的功能，与正式发布的正式版没有太大的差异。通常情况下该版本用于进行小规模灰度测试，原则上不会提供给应用程序开发者使用。</p></li><li><p>release 版：该版本意味着 最终发布，在经历了前面几个版本的迭代之后产生的最终版本，也就是最终交付到应用程序开发者使用的版本。</p></li></ul><h1 id="SDK版本号命名"><a href="#SDK版本号命名" class="headerlink" title="SDK版本号命名"></a>SDK版本号命名</h1><p>一个比较合理的版本号命名规范由如下四部分组成：</p><p>V1_0_2_201904301717_beta</p><ol><li>主版本号（1）</li><li>子版本号（0）</li><li>阶段版本号（2）</li><li>迭代版本号（201904301717_beta）</li></ol><p>SDK版本号修改原则:</p><ul><li><p>主版本号：当功能模块有较大的变动，比如增加多个模块或者 SDK 整体架构发生变化时，由需求决定是否修改。</p></li><li><p>子版本号：当功能有一定的增加或变化时，由项目决定是否修改。</p></li><li><p>阶段版本号：当修复 Bug 以及小规模调整时，需要经常发布修订版，此时可由项目经理决定是否修改。</p></li><li><p>迭代版本号：用于记录该版本的 SDK 发布时的时间以及当前的迭代状态。原则上，当项目处于 alpha、beta以及 rc 版时，该版本号需要体现每一次的修改时间以及状态。当项目处于 release 版时，该版本号用于记录该版本的发版时间。</p></li></ul><h1 id="API版本管理"><a href="#API版本管理" class="headerlink" title="API版本管理"></a>API版本管理</h1><p><code>API</code>的版本受到 SDK 版本迭代状态的约束，但是不受 SDK 版本号修改原则的限制。<br>只有处于 <code>release</code>（或<code>rc</code> ） 状态的  API 才能是对外提供服务的，否则该 API 应该是对应用程序开发人员不可见的。换句话说就是，坚决不发布处于 alpha 和 beta 状态的 API。</p><p>API 一旦对外发布，其内部实现以及方法签名原则上处于不可变更状态：</p><p>如果需要修改 API 的内部实现，在保证方法签名不变的情况下，API 必须通过测试用例的边界及功能测试，并尽可能的给出原 API 实现的备份——使用<code>oldMethodName</code>前缀标识原 API；<br>如果需要变更方法签名，比如增加、删除参数或是改变返回值类型，那么在保证原 API 不变的情况下，使用方法重载实现新的 API。<br>如果需要废弃某些 API，应在 SDK release 版本迭代的前 N 个版本使用<code>@deprecated</code>标识需要废弃的 API，并给出该 API 的替代方案以及具体的 API 移除时间（或是 SDK 版本）。</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://www.jianshu.com/p/28becca53726">Android SDK 开发（第一部分</a></p>]]></content>
    
    
    <summary type="html">The last thing you want is to look back on your life and wonder if only.</summary>
    
    
    
    <category term="SDK开发" scheme="http://example.com/categories/SDK%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="SDK" scheme="http://example.com/tags/SDK/"/>
    
  </entry>
  
  <entry>
    <title>AndroidStudio获取sha1码</title>
    <link href="http://example.com/2019/04/26/AndroidStudio%E8%8E%B7%E5%8F%96sha1%E7%A0%81/"/>
    <id>http://example.com/2019/04/26/AndroidStudio%E8%8E%B7%E5%8F%96sha1%E7%A0%81/</id>
    <published>2019-04-26T07:35:36.000Z</published>
    <updated>2019-04-25T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>在使用百度地图API时，需要获取项目的sha1码，在AndroidStudio3.3版本获取方法如下：</p><p><img src="https://i.loli.net/2019/04/26/5cc2c43ccf73f.png"></p><p>双击执行<code>SigningReport</code>任务后，在<code>Run</code>窗口即可看到生成的<code>SHA1</code>和<code>MD5</code>码，如图所示。</p><p><img src="https://i.loli.net/2019/04/26/5cc2c4cd22c1b.png"></p>]]></content>
    
    
    <summary type="html">Anything one man can imagine, other men can make real.</summary>
    
    
    
    <category term="Android" scheme="http://example.com/categories/Android/"/>
    
    
    <category term="AndroidStudio" scheme="http://example.com/tags/AndroidStudio/"/>
    
  </entry>
  
  <entry>
    <title>Android颜色透明度计算</title>
    <link href="http://example.com/2019/04/24/Android%E9%A2%9C%E8%89%B2%E9%80%8F%E6%98%8E%E5%BA%A6%E8%AE%A1%E7%AE%97/"/>
    <id>http://example.com/2019/04/24/Android%E9%A2%9C%E8%89%B2%E9%80%8F%E6%98%8E%E5%BA%A6%E8%AE%A1%E7%AE%97/</id>
    <published>2019-04-24T01:01:11.000Z</published>
    <updated>2019-04-23T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android颜色透明度计算"><a href="#Android颜色透明度计算" class="headerlink" title="Android颜色透明度计算"></a>Android颜色透明度计算</h1><h2 id="Android中颜色简介"><a href="#Android中颜色简介" class="headerlink" title="Android中颜色简介"></a>Android中颜色简介</h2><p>Android中的颜色值通常遵循RGB/ARGB标准，使用时通常以<code>#</code>字符开头，以16进制表示。<br>其中RGB依次代表红色（Red）、绿色（Green）、蓝色（Blue）.<br>ARGB依次代表透明度(Alpha)、红色（Red）、绿色（Green）、蓝色（Blue） </p><p>eg:#FF00CC99其中FF是透明度，00是红色值，CC是绿色值，99是蓝色值</p><h2 id="不透明度"><a href="#不透明度" class="headerlink" title="不透明度"></a>不透明度</h2><p>透明度的范围是0-255，在计算机中，我们就用16进制(00-FF)表示，全透明就是00，完全不透明就是FF</p><p>透明度和不透明度加起来等于1或者说100%</p><h2 id="计算方法"><a href="#计算方法" class="headerlink" title="计算方法"></a>计算方法</h2><p>255 * 不透明度 -&gt; 转换成16进制数</p><p>eg:30%不透明度也就是255*30%=76.5，四舍五入77，然后利用计算器转为16进制为4D</p><p>下面是代码计算</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">float</span> temp = <span class="number">255</span> * i * <span class="number">1.0f</span> / <span class="number">100f</span>;</span><br><span class="line">            <span class="keyword">int</span> alpha = Math.round(temp);</span><br><span class="line">            String hexStr = Integer.toHexString(alpha);</span><br><span class="line">            <span class="keyword">if</span> (hexStr.length() &lt; <span class="number">2</span>)</span><br><span class="line">                hexStr = <span class="string">&quot;0&quot;</span> + hexStr;</span><br><span class="line">            System.out.println(i + <span class="string">&quot;%, &quot;</span> + hexStr.toUpperCase());</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="速查表"><a href="#速查表" class="headerlink" title="速查表"></a>速查表</h2><table><thead><tr><th>不透明度</th><th>16进制表示</th></tr></thead><tbody><tr><td>0%</td><td>00</td></tr><tr><td>1%</td><td>03</td></tr><tr><td>2%</td><td>05</td></tr><tr><td>3%</td><td>08</td></tr><tr><td>4%</td><td>0A</td></tr><tr><td>5%</td><td>0D</td></tr><tr><td>6%</td><td>0F</td></tr><tr><td>7%</td><td>12</td></tr><tr><td>8%</td><td>14</td></tr><tr><td>9%</td><td>17</td></tr><tr><td>10%</td><td>1A</td></tr><tr><td>11%</td><td>1C</td></tr><tr><td>12%</td><td>1F</td></tr><tr><td>13%</td><td>21</td></tr><tr><td>14%</td><td>24</td></tr><tr><td>15%</td><td>26</td></tr><tr><td>16%</td><td>29</td></tr><tr><td>17%</td><td>2B</td></tr><tr><td>18%</td><td>2E</td></tr><tr><td>19%</td><td>30</td></tr><tr><td>20%</td><td>33</td></tr><tr><td>21%</td><td>36</td></tr><tr><td>22%</td><td>38</td></tr><tr><td>23%</td><td>3B</td></tr><tr><td>24%</td><td>3D</td></tr><tr><td>25%</td><td>40</td></tr><tr><td>26%</td><td>42</td></tr><tr><td>27%</td><td>45</td></tr><tr><td>28%</td><td>47</td></tr><tr><td>29%</td><td>4A</td></tr><tr><td>30%</td><td>4D</td></tr><tr><td>31%</td><td>4F</td></tr><tr><td>32%</td><td>52</td></tr><tr><td>33%</td><td>54</td></tr><tr><td>34%</td><td>57</td></tr><tr><td>35%</td><td>59</td></tr><tr><td>36%</td><td>5C</td></tr><tr><td>37%</td><td>5E</td></tr><tr><td>38%</td><td>61</td></tr><tr><td>39%</td><td>63</td></tr><tr><td>40%</td><td>66</td></tr><tr><td>41%</td><td>69</td></tr><tr><td>42%</td><td>6B</td></tr><tr><td>43%</td><td>6E</td></tr><tr><td>44%</td><td>70</td></tr><tr><td>45%</td><td>73</td></tr><tr><td>46%</td><td>75</td></tr><tr><td>47%</td><td>78</td></tr><tr><td>48%</td><td>7A</td></tr><tr><td>49%</td><td>7D</td></tr><tr><td>50%</td><td>80</td></tr><tr><td>51%</td><td>82</td></tr><tr><td>52%</td><td>85</td></tr><tr><td>53%</td><td>87</td></tr><tr><td>54%</td><td>8A</td></tr><tr><td>55%</td><td>8C</td></tr><tr><td>56%</td><td>8F</td></tr><tr><td>57%</td><td>91</td></tr><tr><td>58%</td><td>94</td></tr><tr><td>59%</td><td>96</td></tr><tr><td>60%</td><td>99</td></tr><tr><td>61%</td><td>9C</td></tr><tr><td>62%</td><td>9E</td></tr><tr><td>63%</td><td>A1</td></tr><tr><td>64%</td><td>A3</td></tr><tr><td>65%</td><td>A6</td></tr><tr><td>66%</td><td>A8</td></tr><tr><td>67%</td><td>AB</td></tr><tr><td>68%</td><td>AD</td></tr><tr><td>69%</td><td>B0</td></tr><tr><td>70%</td><td>B3</td></tr><tr><td>71%</td><td>B5</td></tr><tr><td>72%</td><td>B8</td></tr><tr><td>73%</td><td>BA</td></tr><tr><td>74%</td><td>BD</td></tr><tr><td>75%</td><td>BF</td></tr><tr><td>76%</td><td>C2</td></tr><tr><td>77%</td><td>C4</td></tr><tr><td>78%</td><td>C7</td></tr><tr><td>79%</td><td>C9</td></tr><tr><td>80%</td><td>CC</td></tr><tr><td>81%</td><td>CF</td></tr><tr><td>82%</td><td>D1</td></tr><tr><td>83%</td><td>D4</td></tr><tr><td>84%</td><td>D6</td></tr><tr><td>85%</td><td>D9</td></tr><tr><td>86%</td><td>DB</td></tr><tr><td>87%</td><td>DE</td></tr><tr><td>88%</td><td>E0</td></tr><tr><td>89%</td><td>E3</td></tr><tr><td>90%</td><td>E6</td></tr><tr><td>91%</td><td>E8</td></tr><tr><td>92%</td><td>EB</td></tr><tr><td>93%</td><td>ED</td></tr><tr><td>94%</td><td>F0</td></tr><tr><td>95%</td><td>F2</td></tr><tr><td>96%</td><td>F5</td></tr><tr><td>97%</td><td>F7</td></tr><tr><td>98%</td><td>FA</td></tr><tr><td>99%</td><td>FC</td></tr><tr><td>100%</td><td>FF</td></tr></tbody></table><p>eg:</p><p>UI给出的颜色值为#000000，不透明度为40%。<br>那么结合上表，40%不透明度对应的16进制的值为66，那么最终颜色值就是#66000000</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://blog.csdn.net/wangliblog/article/details/73248122">Android颜色透明度（不透明度）计算</a></p>]]></content>
    
    
    <summary type="html">A fool sees not the same tree that a wise man sees.</summary>
    
    
    
    <category term="Android" scheme="http://example.com/categories/Android/"/>
    
    
    <category term="AndroidStudio" scheme="http://example.com/tags/AndroidStudio/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu18.04.2LTS下解決Dia无法输入中文问题</title>
    <link href="http://example.com/2019/04/16/Ubuntu18-04-2LTS%E4%B8%8B%E8%A7%A3%E6%B1%BADia%E6%97%A0%E6%B3%95%E8%BE%93%E5%85%A5%E4%B8%AD%E6%96%87%E9%97%AE%E9%A2%98/"/>
    <id>http://example.com/2019/04/16/Ubuntu18-04-2LTS%E4%B8%8B%E8%A7%A3%E6%B1%BADia%E6%97%A0%E6%B3%95%E8%BE%93%E5%85%A5%E4%B8%AD%E6%96%87%E9%97%AE%E9%A2%98/</id>
    <published>2019-04-16T00:35:43.000Z</published>
    <updated>2019-04-15T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Dia是一款和MS <em>Visio</em>类似的绘制流程图、UML图、电路图、网络、数据库等结构化图形的工具，支持<a href="http://dia-installer.de/download/macosx.html">Mac OS X </a> 、<a href="http://dia-installer.de/download/linux.html">Linux</a> 、<a href="http://dia-installer.de/download/index.html">Windows </a>  。</p><ul><li><p>官网地址<a href="http://dia-installer.de/">Dia Diagram Editor</a></p></li><li><p>开源地址:<a href="https://github.com/GNOME/dia">github</a><br><img src="https://i.loli.net/2019/04/16/5cb536cd29418.png" alt="Dia界面"></p><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1></li><li><p><code>#</code> -要求使用root权限直接以root用户使用命令或对执行的命令使用linux <code>sudo</code></p></li><li><p><code>$</code> -要求给定的linux命令作为常规非特权用户执行</p><h1 id="安装Dia"><a href="#安装Dia" class="headerlink" title="安装Dia"></a>安装Dia</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt install dia -y</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h1><p>修改/usr/bin/dia文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dia-normal --integrated &quot;$@&quot;改为 dia-normal &quot;$@&quot;</span><br></pre></td></tr></table></figure><p>一番搜索下来比较多的方法是修改<code>/usr/bin/dia</code>文件,当我敲下 <code>sudo vim /usr/bin/dia</code>命令后,展示在我眼前的是以下画面<br><img src="https://i.loli.net/2019/04/16/5cb53879c9912.png"><br>是Doc转Unix转码问题，不成功，网上说这样能解决中文输入的问题，但是又会引起左边工具栏和主窗口分离的问题，每次画个图还得经常拖动工具条，调整其大小，反正就是用起来很麻烦，不完美，遂放弃。</p><h1 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h1><p>修改 <code>/usr/share/applications/dia.desktop</code>文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">把Exec=dia %F 改为Exec=env GTK_IM_MODULE=xim dia %F</span><br></pre></td></tr></table></figure><p>这个设置解决了从启动栏的快捷方式中启动Dia后，输入中文的问题。</p><h1 id="方法3"><a href="#方法3" class="headerlink" title="方法3"></a>方法3</h1><p>在终端启动时增加启动设置<br>启动命令dia 前边增加<code>env GTK_IM_MODULE=xim</code>，即用<code>env GTK_IM_MODULE=xim dia</code>来启动Dia，为了避免每次启动都要输入这么一长串，我们设置别名alias，执行命令<code>alias dia=&quot;env GTK_IM_MODULE=xim dia&quot;</code>，以后再启动Dia时还是使用dia就可以了<br>这个解决了从终端启动Dia后，输入中文的问题。</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://jlice.top/post/201805311.html">解决Dia在Linux上的输入法问题</a><br><a href="https://www.jianshu.com/p/9a7d736126d1">完美解决Dia无法输入中文的问题</a></p>]]></content>
    
    
    <summary type="html">How many cookies could a good cook cook if a good cook could cook cookies?</summary>
    
    
    
    <category term="Linux" scheme="http://example.com/categories/Linux/"/>
    
    
    <category term="Ubuntu" scheme="http://example.com/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Android Lottie动画的使用</title>
    <link href="http://example.com/2019/04/10/Android-Lottie%E5%8A%A8%E7%94%BB%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://example.com/2019/04/10/Android-Lottie%E5%8A%A8%E7%94%BB%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2019-04-10T04:46:25.000Z</published>
    <updated>2019-04-09T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Lottie是一个用于Android，iOS，Web和Windows的库，用于解析使用<a href="https://github.com/airbnb/lottie-web">Bodymovin</a>导出为json的<a href="http://www.adobe.com/products/aftereffects.html">Adobe After Effects</a>动画，并在移动设备和网络上呈现它们！</p><p><img src="https://i.loli.net/2019/04/10/5cad843949bf3.gif"></p><p>介绍下Android的使用</p><p>github地址 ： <a href="https://github.com/airbnb/lottie-android">lottie-android</a></p><p>官方文档：<a href="http://airbnb.io/lottie/">airbnb.io/lottie</a></p><p>动画json下载：<a href="https://lottiefiles.com/">https://lottiefiles.com</a></p><p>效果图：</p><p><img src="https://i.loli.net/2019/04/10/5cad8590aecf0.gif"></p><p><img src="https://i.loli.net/2019/04/10/5cad85cd323a1.gif"></p><p><img src="https://i.loli.net/2019/04/10/5cad85a10a6dd.gif"></p><h1 id="Android项目使用"><a href="#Android项目使用" class="headerlink" title="Android项目使用"></a>Android项目使用</h1><p>首先，在项目<code>build.grade</code>文件中引入依赖：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">  implementation &#x27;com.airbnb.android:lottie:$lottieVersion&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有2种使用方式：</p><p>直接在布局文件使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;com.airbnb.lottie.LottieAnimationView</span><br><span class="line">        android:id=&quot;@+id/animation_view&quot;</span><br><span class="line">        android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        // 放在 res/raw 目录下的动画文件</span><br><span class="line">        app:lottie_rawRes=&quot;@raw/hello_world&quot;</span><br><span class="line">        // 放在assets目录下的动画文件</span><br><span class="line">        app:lottie_fileName=&quot;hello_world.json&quot;</span><br><span class="line">        // 开启循环</span><br><span class="line">        app:lottie_loop=&quot;true&quot;</span><br><span class="line">        // 自动播放</span><br><span class="line">        app:lottie_autoPlay=&quot;true&quot; /&gt;</span><br></pre></td></tr></table></figure><p>在Java代码中使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">LottieAnimationView animationView = findViewById(R.id.animation_view);</span><br><span class="line">animationView.setAnimation(R.raw.hello_world);</span><br><span class="line">// or</span><br><span class="line">animationView.setAnimation(R.raw.hello_world.json);</span><br><span class="line">animationView.playAnimation();</span><br></pre></td></tr></table></figure><p>好的，让我们运行一下项目。</p><p>然后你就会发现奇迹出现了，没有一张图片，没有一个gif，但是动画效果出来了！就是这么简单，就是这么暴力！</p><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><ul><li>LottieAnimationView.loop(true);<br>设置动画循环演示。</li><li>mLottieAnimationView.isAnimating();<br>是否在演示中。</li><li>mLottieAnimationView.setProgress(0.5f);<br>设置演示的进度。</li><li>mLottieAnimationView.getProgress();<br>获取演示的进度。</li><li>mLottieAnimationView.getDuration();<br>获取演示的时间。</li><li>mLottieAnimationView.playAnimation();<br>运行动画。</li><li>mLottieAnimationView.pauseAnimation();<br>暂停动画。</li><li>mLottieAnimationView.cancelAnimation();<br>关闭动画。</li></ul><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://www.jianshu.com/p/cae606f45c0b">Lottie- 让Android动画实现更简单</a></p>]]></content>
    
    
    <summary type="html">Finders keepers, losers weepers.</summary>
    
    
    
    <category term="Android" scheme="http://example.com/categories/Android/"/>
    
    
    <category term="Lottie" scheme="http://example.com/tags/Lottie/"/>
    
    <category term="AndroidStudio" scheme="http://example.com/tags/AndroidStudio/"/>
    
  </entry>
  
</feed>
