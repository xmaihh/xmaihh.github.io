<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>远程连接局域网内的Android模拟器</title>
      <link href="/blog/2019/12/26/%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E5%B1%80%E5%9F%9F%E7%BD%91%E5%86%85%E7%9A%84Android%E6%A8%A1%E6%8B%9F%E5%99%A8/"/>
      <url>/blog/2019/12/26/%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E5%B1%80%E5%9F%9F%E7%BD%91%E5%86%85%E7%9A%84Android%E6%A8%A1%E6%8B%9F%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>本文主要介绍如何远程连接位于局域网内的 Android 模拟器进行调试。我们知道 Android 模拟器十分耗费资源，如果这时候有一台空余的机器，可以单独运行一个 Android 模拟器，然后再远程连接到该模拟器，从而能够减轻工作机的负担。</p><p>原理:使用 SSH 进行端口映射</p><h1 id="１-在空余机器打开Android模拟器，并打开Terminal终端，输入adb-devices查看模拟器ip-端口"><a href="#１-在空余机器打开Android模拟器，并打开Terminal终端，输入adb-devices查看模拟器ip-端口" class="headerlink" title="１.在空余机器打开Android模拟器，并打开Terminal终端，输入adb devices查看模拟器ip+端口"></a>１.在空余机器打开Android模拟器，并打开Terminal终端，输入adb devices查看模拟器ip+端口</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> adb devices</span></span><br><span class="line">List of devices attached/</span><br><span class="line">192.168.58.102:5555device</span><br></pre></td></tr></table></figure><h1 id="2-在运行AndroidStudio的机器上打开Terminal终端，ssh连接空余机器并将Android模拟器映射到本地localhost-15555，连接成功后注意不要关闭该窗口"><a href="#2-在运行AndroidStudio的机器上打开Terminal终端，ssh连接空余机器并将Android模拟器映射到本地localhost-15555，连接成功后注意不要关闭该窗口" class="headerlink" title="2.在运行AndroidStudio的机器上打开Terminal终端，ssh连接空余机器并将Android模拟器映射到本地localhost:15555，连接成功后注意不要关闭该窗口"></a>2.在运行AndroidStudio的机器上打开Terminal终端，ssh连接空余机器并将Android模拟器映射到本地localhost:15555，连接成功后注意不要关闭该窗口</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -p 22 -L localhost:15555:192.168.58.102:5555 xmaihh@192.168.200.189</span><br></pre></td></tr></table></figure><h1 id="3-在运行AndroidStudio的机器上打开新的Terminal终端，连接Android模拟器"><a href="#3-在运行AndroidStudio的机器上打开新的Terminal终端，连接Android模拟器" class="headerlink" title="3.在运行AndroidStudio的机器上打开新的Terminal终端，连接Android模拟器"></a>3.在运行AndroidStudio的机器上打开新的Terminal终端，连接Android模拟器</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb connect localhost:15555</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Kotlin编写Android自定义View</title>
      <link href="/blog/2019/12/24/%E4%BD%BF%E7%94%A8Kotlin%E7%BC%96%E5%86%99Android%E8%87%AA%E5%AE%9A%E4%B9%89View/"/>
      <url>/blog/2019/12/24/%E4%BD%BF%E7%94%A8Kotlin%E7%BC%96%E5%86%99Android%E8%87%AA%E5%AE%9A%E4%B9%89View/</url>
      
        <content type="html"><![CDATA[<h1 id="使用-Kotlin-编写-Android-自定义-View"><a href="#使用-Kotlin-编写-Android-自定义-View" class="headerlink" title="使用 Kotlin 编写 Android 自定义 View"></a>使用 Kotlin 编写 Android 自定义 View</h1><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>由于 Kotlin 的构造函数与 Java 的构造函数在样子上十分不同, 导致使用 Kotlin 编写 Android 自定义 View 时会遇到一些困难.</p><p>在本篇中将记录我对此的一些学习心得.</p><h1 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h1><p>Kotlin 自定义 View 的构造函数写法有两种, 我们分别来看.</p><p>Android 的自定义 View 包含有多个构造函数, 如何用 Kotlin 实现呢?</p><h1 id="写法一"><a href="#写法一" class="headerlink" title="写法一"></a>写法一</h1><p>第一种写法与 Java 构造函数类似, 代码如下:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KotlinView</span> : <span class="type">View &#123;</span></span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">constructor</span>(context: Context) : <span class="keyword">this</span>(context, <span class="literal">null</span>)</span><br><span class="line">    <span class="keyword">constructor</span>(context: Context, attrs: AttributeSet?) : <span class="keyword">this</span>(context, attrs, <span class="number">0</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">constructor</span>(context: Context, attrs: AttributeSet?, defStyleAttr: <span class="built_in">Int</span>) : <span class="keyword">super</span>(context, attrs, defStyleAttr) &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与使用 Java 的构造函数对比一下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaView</span> <span class="keyword">extends</span> <span class="title">View</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JavaView</span> <span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JavaView</span> <span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JavaView</span> <span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这样就很容易理解了.</p><h1 id="写法二"><a href="#写法二" class="headerlink" title="写法二"></a>写法二</h1><p>另一种写法如下:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomComponent</span> : <span class="type">LinearLayout &#123;</span></span></span><br><span class="line">    <span class="meta">@JvmOverloads</span></span><br><span class="line">    <span class="keyword">constructor</span>(</span><br><span class="line">        context: Context, </span><br><span class="line">        attrs: AttributeSet? = <span class="literal">null</span>, </span><br><span class="line">        defStyleAttr: <span class="built_in">Int</span> = <span class="number">0</span>)</span><br><span class="line">        : <span class="keyword">super</span>(context, attrs, defStyleAttr)</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TargetApi(Build.VERSION_CODES.LOLLIPOP)</span></span><br><span class="line">    <span class="keyword">constructor</span>(</span><br><span class="line">       context: Context, </span><br><span class="line">       attrs: AttributeSet?, </span><br><span class="line">       defStyleAttr: <span class="built_in">Int</span>, </span><br><span class="line">       defStyleRes: <span class="built_in">Int</span>)</span><br><span class="line">        : <span class="keyword">super</span>(context, attrs, defStyleAttr, defStyleRes)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中, 这里使用了 Kotlin 构造函数的参数可以指定默认值的特性. <code>@JvmOverloads</code> 是一个 Kotlin 注解, 作用是替换构造函数的默认值生成多个版本的重载构造方法.</p><h1 id="inflate-视图"><a href="#inflate-视图" class="headerlink" title="inflate 视图"></a>inflate 视图</h1><p>有一个常见的场景是, 我们在自定义视图中需要 inflate 一个 xml 布局, 在 Kotlin 中的做法是写在 init 中:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">init</span> &#123;</span><br><span class="line">    LayoutInflater</span><br><span class="line">        .from(context)</span><br><span class="line">        .inflate(R.layout.view_custom_component, <span class="keyword">this</span>, <span class="literal">true</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="解析自定义-View-属性"><a href="#解析自定义-View-属性" class="headerlink" title="解析自定义 View 属性"></a>解析自定义 View 属性</h1><p>自定义 View 往往会声明一些属性, 用于在 xml 中设置.</p><p>在这里, 关于如何 declare-styleable 如何写 xml 这些基础内容我们都省略, 只看与 Kotlin 相关的关键步骤, 如何解析 StyledAttributes, 代码如下:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">attrs?.let &#123;</span><br><span class="line">    <span class="keyword">val</span> typedArray = context.obtainStyledAttributes(it, </span><br><span class="line">        R.styleable.custom_component_attributes, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">val</span> title = resources.getText(typedArray</span><br><span class="line">            .getResourceId(R.styleable</span><br><span class="line">            .custom_component_attributes_custom_component_title,           </span><br><span class="line">            R.string.component_one))</span><br><span class="line"></span><br><span class="line">    my_title.text = title</span><br><span class="line">    my_edit.hint = </span><br><span class="line">        <span class="string">&quot;<span class="subst">$&#123;resources.getString(R.string.hint_text)&#125;</span> <span class="variable">$title</span>&quot;</span></span><br><span class="line"></span><br><span class="line">    typedArray.recycle()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是, 对于写法一, 在 init {} 是拿不到 attrs, 因此需要写一个私有的初始化方法, 在各个构造函数中显式调用. 对于写法二, 直接在 init {} 中编写即可.</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://steemit.com/kotlin/@maxiee/kotlin-android-view">使用 Kotlin 编写 Android 自定义 View</a></p><p><a href="https://antonioleiva.com/custom-views-android-kotlin/">Custom Views in Android with Kotlin (KAD 06)</a></p><p><a href="https://android.jlelse.eu/building-custom-component-with-kotlin-fc082678b080">Building Custom Component with Kotlin</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中double转int类型按四舍五入取整</title>
      <link href="/blog/2019/12/11/Java%E4%B8%ADdouble%E8%BD%ACint%E7%B1%BB%E5%9E%8B%E6%8C%89%E5%9B%9B%E8%88%8D%E4%BA%94%E5%85%A5%E5%8F%96%E6%95%B4/"/>
      <url>/blog/2019/12/11/Java%E4%B8%ADdouble%E8%BD%ACint%E7%B1%BB%E5%9E%8B%E6%8C%89%E5%9B%9B%E8%88%8D%E4%BA%94%E5%85%A5%E5%8F%96%E6%95%B4/</url>
      
        <content type="html"><![CDATA[<p>Java中的double转int类型，小数点后面抹零，只取小数点前的整数<br>所以被踩了丢失精度的坑，后续在将小数的double转换成为int的时候，一定要注意，小数点后面的部分是自动抹去的。<br>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">double</span> d =<span class="number">1.76</span>;</span><br><span class="line">System.out.println((<span class="keyword">int</span>)d);</span><br><span class="line"><span class="keyword">double</span> f =<span class="number">1.16</span>;</span><br><span class="line">System.out.println((<span class="keyword">int</span>)f);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出是:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>正确double转int按四舍五入取整</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;向上取整:&quot;</span> + (<span class="keyword">int</span>) Math.ceil(<span class="number">96.1</span>));<span class="comment">// 97 (去掉小数凑整:不管小数是多少，都进一)</span></span><br><span class="line">        System.out.println(<span class="string">&quot;向下取整&quot;</span> + (<span class="keyword">int</span>) Math.floor(<span class="number">96.8</span>));<span class="comment">// 96 (去掉小数凑整:不论小数是多少，都不进位)</span></span><br><span class="line">        System.out.println(<span class="string">&quot;四舍五入取整:&quot;</span> + Math.round(<span class="number">96.1</span>));<span class="comment">// 96 (这个好理解，不解释)</span></span><br><span class="line">        System.out.println(<span class="string">&quot;四舍五入取整:&quot;</span> + Math.round(<span class="number">96.8</span>));<span class="comment">// 97</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">向上取整: <span class="number">97</span></span><br><span class="line">向下取整: <span class="number">96</span></span><br><span class="line">四舍五入取整:<span class="number">96</span></span><br><span class="line">四舍五人取整:<span class="number">97</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android Framework </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java位运算(移位、与、或、异或、非)</title>
      <link href="/blog/2019/11/05/Java%E4%BD%8D%E8%BF%90%E7%AE%97(%E7%A7%BB%E4%BD%8D%E3%80%81%E4%B8%8E%E3%80%81%E6%88%96%E3%80%81%E5%BC%82%E6%88%96%E3%80%81%E9%9D%9E)/"/>
      <url>/blog/2019/11/05/Java%E4%BD%8D%E8%BF%90%E7%AE%97(%E7%A7%BB%E4%BD%8D%E3%80%81%E4%B8%8E%E3%80%81%E6%88%96%E3%80%81%E5%BC%82%E6%88%96%E3%80%81%E9%9D%9E)/</url>
      
        <content type="html"><![CDATA[<p>Java的位运算符：左移（&lt;&lt;）、右移（&gt;&gt;）、无符号右移（&gt;&gt;&gt;）、与（&amp;）、异或（|）、非（~）<br>除了 非(~) 是一元操作符外，其他都是二元操作符。</p><table><thead><tr><th>运算符</th><th>运算</th><th>说明</th></tr></thead><tbody><tr><td>&lt;&lt;</td><td>左移</td><td>空位补0,被移除的高位丢失</td></tr><tr><td>&gt;&gt;</td><td>右移</td><td>被移位的二进制最高位是0,右移后，空缺位补0,最高位是1,最高位补1</td></tr><tr><td>&gt;&gt;&gt;</td><td>无符号右移</td><td>被移位的二进制无论是０或者是１，空缺位都是用０补</td></tr><tr><td>&amp;</td><td>与运算</td><td>任何二进制位和0进行&amp;运算，结果都是0，和１进行&amp;运算，都是原值</td></tr><tr><td>l</td><td>或运算</td><td>任何二进制位和０进行或运算，结果都是原值，和1进行或运算，都是1</td></tr><tr><td>^</td><td>异或运算</td><td>任何相同二进制位进行异或运算，结果都是０，不同二进制位进行异或运算，结果都是１</td></tr><tr><td>~</td><td>非运算</td><td>反转操作数的二进制位，即0变成1，1变成0</td></tr></tbody></table><ol><li><p>左移(&lt;&lt;)</p><p>​    示例1: 将５左移２位</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.code;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="number">5</span> &lt;&lt; <span class="number">2</span>);<span class="comment">//运行结果是20</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>java</code>中，整数默认就是<code>int</code>类型32位，首先将５转为二进制表示:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0000 0000 0000 0000 0000 0000 0000 0101      然后左移2位后，低位补0</span><br><span class="line"></span><br><span class="line">0000 0000 0000 0000 0000 0000 0001 0100      换算成10进制为20</span><br></pre></td></tr></table></figure></li><li><p>右移(&gt;&gt;)</p><p>​    示例2: 将５右移２位</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="number">5</span>&gt;&gt;<span class="number">2</span>);<span class="comment">//运行结果是1</span></span><br></pre></td></tr></table></figure><p>还是先将５转为二进制表示:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0000 0000 0000 0000 0000 0000 0000 0101      然后右移2位，高位补0</span><br><span class="line"></span><br><span class="line">0000 0000 0000 0000 0000 0000 0000 0001      换算成10进制为１</span><br></pre></td></tr></table></figure></li><li><p>无符号右移(&gt;&gt;&gt;)</p><p>​    示例3: 分别将５右移3位、将-５右移３位、将-5无符号右移３位</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="number">5</span>&gt;&gt;<span class="number">3</span>);<span class="comment">//结果是0</span></span><br><span class="line">System.out.println(-<span class="number">5</span>&gt;&gt;<span class="number">3</span>);<span class="comment">//结果是-1</span></span><br><span class="line">System.out.println(-<span class="number">5</span>&gt;&gt;&gt;<span class="number">3</span>);<span class="comment">//结果是536870911</span></span><br></pre></td></tr></table></figure><p>还是来看看位移过程:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">5换算成二进制： 0000 0000 0000 0000 0000 0000 0000 0101</span><br><span class="line">5右移3位后结果为0，0的二进制为： 0000 0000 0000 0000 0000 0000 0000 0000</span><br><span class="line"></span><br><span class="line">-5换算成二进制： 1111 1111 1111 1111 1111 1111 1111 1011</span><br><span class="line">-5右移3位后结果为-1，-1的二进制为： 1111 1111 1111 1111 1111 1111 1111 1111</span><br><span class="line">-5无符号右移3位后的结果 536870911 换算成二进制： 0001 1111 1111 1111 1111 1111 1111 1111</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>正数右移，高位用0补，负数右移，高位用1补，当负数使用无符号右移时，用0进行部位(自然而然的，就由负数变成了正数了)</p></blockquote><ol start="4"><li><p>与(&amp;)</p><p>​    示例4: 5&amp;3 进行与运算</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="number">5</span> &amp; <span class="number">3</span>);<span class="comment">//结果为1</span></span><br></pre></td></tr></table></figure><p>转换为二进制比较:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">5转换为二进制：0000 0000 0000 0000 0000 0000 0000 0101</span><br><span class="line">3转换为二进制：0000 0000 0000 0000 0000 0000 0000 0011</span><br><span class="line"></span><br><span class="line">1转换为二进制：0000 0000 0000 0000 0000 0000 0000 0001</span><br></pre></td></tr></table></figure><blockquote><p>与(&amp;)第一个操作数的的第n位于第二个操作数的第n位如果都是1，那么结果的第n为也为1，否则为0</p></blockquote></li><li><p>或(|)</p><p>​    示例5: 5|3 进行或运算</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="number">5</span> | <span class="number">3</span>);<span class="comment">//结果为7</span></span><br></pre></td></tr></table></figure><p>转换为二进制比较:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">5转换为二进制：0000 0000 0000 0000 0000 0000 0000 0101</span><br><span class="line">3转换为二进制：0000 0000 0000 0000 0000 0000 0000 0011</span><br><span class="line"></span><br><span class="line">7转换为二进制：0000 0000 0000 0000 0000 0000 0000 0111</span><br></pre></td></tr></table></figure><blockquote><p>或(|)第一个操作数的的第n位于第二个操作数的第n位 只要有一个是1，那么结果的第n为也为1，否则为0</p></blockquote></li><li><p>异或(^)</p><p>​    示例6: 5^3 进行异或运算</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="number">5</span> ^ <span class="number">3</span>);<span class="comment">//结果为6</span></span><br></pre></td></tr></table></figure><p>转换为二进制比较:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">5转换为二进制：0000 0000 0000 0000 0000 0000 0000 0101</span><br><span class="line">3转换为二进制：0000 0000 0000 0000 0000 0000 0000 0011</span><br><span class="line"></span><br><span class="line">6转换为二进制：0000 0000 0000 0000 0000 0000 0000 0110</span><br></pre></td></tr></table></figure><blockquote><p>异或(^)第一个操作数的的第n位于第二个操作数的第n位 相反，那么结果的第n为也为1，否则为0</p></blockquote></li><li><p>非(~)</p><p>​    示例7: ~5 进行非运算</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(~<span class="number">5</span>);<span class="comment">//结果为-6</span></span><br></pre></td></tr></table></figure><p>转换为二进制比较:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5转换为二进制：0000 0000 0000 0000 0000 0000 0000 0101</span><br><span class="line">-6转换为二进制：1111 1111 1111 1111 1111 1111 1111 1010</span><br></pre></td></tr></table></figure><blockquote><p>非：操作数的第n位为1，那么结果的第n位为0，反之。</p></blockquote></li></ol><p>位运算操作符衍生而来的有：</p><ul><li><p>&amp;= 按位与赋值</p></li><li><p>|= 按位或赋值</p></li><li><p>^= 按位非赋值</p></li><li><p>&gt;&gt;= 右移赋值</p></li><li><p>= 无符号右移赋值</p></li><li><p>&lt;&lt;= 赋值左移</p></li></ul><p>和 += 一个概念。</p><p>示例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">5</span></span><br><span class="line">a &amp;= <span class="number">3</span>; <span class="comment">//此时等同于　a = a&amp;3　即　ａ = 5＆３; </span></span><br><span class="line">System.out.println(a);<span class="comment">//结果是1</span></span><br></pre></td></tr></table></figure><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://blog.csdn.net/xiaochunyong/article/details/7748713">Java 位运算</a></p>]]></content>
      
      
      <categories>
          
          <category> Android Framework </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小程序开发的内容安全审核</title>
      <link href="/blog/2019/10/20/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%9A%84%E5%86%85%E5%AE%B9%E5%AE%89%E5%85%A8%E5%AE%A1%E6%A0%B8/"/>
      <url>/blog/2019/10/20/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%9A%84%E5%86%85%E5%AE%B9%E5%AE%89%E5%85%A8%E5%AE%A1%E6%A0%B8/</url>
      
        <content type="html"><![CDATA[<p>最近做一个带图片和文字发布的微信小程序，当时心里犯嘀咕，没有自我审查估摸着上不了。果不其然微信小程序提交代码审核的时候，审核不通过，提示如下:为避免您的小程序被滥用，请你完善内容审核机制，如调用小程序内容安全API，或使用其他技术、人工审核手段，过滤色情、违法等有害信息，保障发布内容的安全。<br>得，去到后台一看，审核员测试了一个词<code>xxx</code>给显示出来了，直接导致小程序不通过。<br><img src="https://i.loli.net/2019/11/22/W9agLfOjtbvFyoM.png"></p><p>好在提示给了解决方案，因此这里做一下记录。</p><h1 id="调用小程序内容安全API"><a href="#调用小程序内容安全API" class="headerlink" title="调用小程序内容安全API"></a>调用小程序内容安全API</h1><ul><li><a href="https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/sec-check/security.imgSecCheck.html">校验一张图片是否含有违法违规内容</a></li><li><a href="https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/sec-check/security.mediaCheckAsync.html">异步校验图片/音频是否含有违法违规内容</a></li><li><a href="https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/sec-check/security.msgSecCheck.html">检查一段文本是否含有违法违规内容</a></li></ul><p>还挺全，我主要用到了图片和文字审查，所以对<code>security.imgSecCheck</code>和<code>security.msgSecCheck</code>的使用做记录。</p><img src="https://i.loli.net/2019/11/22/UvmjLFTXAphqdlD.png" style="zoom:50%;" /><h1 id="开通云开发"><a href="#开通云开发" class="headerlink" title="开通云开发"></a>开通云开发</h1><p>在微信开发者工具打开你的小程序工程，点击“云开发”菜单进去，之前没开的按照提示填写云开发环境名称就好。</p><p><img src="https://i.loli.net/2019/11/22/wLgMkAFEbOeIVPH.png"></p><h1 id="创建云函数"><a href="#创建云函数" class="headerlink" title="创建云函数"></a>创建云函数</h1><p>在你小程序工程的<code>app.js</code>同级目录下创建一个文件夹<code>functions</code>来存放云函数</p><p><img src="https://i.loli.net/2019/11/22/35T7Gke9bxDOacA.png"></p><p>并在<code>project.config.json</code>中配置<code>&quot;cloudfunctionRoot&quot;: &quot;functions/&quot;,</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;项目配置文件&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;cloudfunctionRoot&quot;</span>: <span class="string">&quot;functions/&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;packOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;ignore&quot;</span>: []</span><br><span class="line">  &#125;, ...</span><br><span class="line">.......</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/11/22/th5suyaJXiNWeK8.png"></p><p>编译一下，可以看到<code>functions</code>文件夹有变化后面加上了你之前创建的环境名。右键<code>functions</code>文件夹唤出菜单新建<code>Node.js</code>云函数</p><p><img src="https://i.loli.net/2019/11/22/aytDq2p1cdun4xj.png"></p><p>我这里创建了一个名称叫<code>ContentCheck</code>的云函数，调用<code>security.imgSecCheck</code>和<code>security.msgSecCheck</code>需要声明权限，需要配置一个<code>config.json</code>文件，如果目录文件中没有<code>config.json</code>，需要自己建一个。</p><p><img src="https://i.loli.net/2019/11/22/xmzKXBnf69LhR5V.png"></p><p><strong>config.json</strong>的配置如下:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;permissions&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;openapi&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;security.msgSecCheck&quot;</span>,</span><br><span class="line">            <span class="string">&quot;security.imgSecCheck&quot;</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ContentCheck</strong>云函数的目录结构如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">├─checkContent</span><br><span class="line">│      config.json    <span class="comment">//云调用的权限配置</span></span><br><span class="line">│      index.js       <span class="comment">//云服务器node 入口文件</span></span><br><span class="line">│      package.json   <span class="comment">// NPM包依赖</span></span><br><span class="line">│ ...</span><br></pre></td></tr></table></figure><p>编辑<code>ContentCheck</code>云函数目录下的<code>index.js</code>文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 云函数入口文件</span></span><br><span class="line"><span class="keyword">const</span> cloud = <span class="built_in">require</span>(<span class="string">&#x27;wx-server-sdk&#x27;</span>)</span><br><span class="line"></span><br><span class="line">cloud.init()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 云函数入口函数</span></span><br><span class="line"><span class="built_in">exports</span>.main = <span class="keyword">async</span>(event, context) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> msgR = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">let</span> imageR = <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">//  检查文本内容是否违规</span></span><br><span class="line">    <span class="keyword">if</span> (event.msg) &#123;</span><br><span class="line">      msgR = <span class="keyword">await</span> cloud.openapi.security.msgSecCheck(&#123;</span><br><span class="line">        content: event.msg</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//  检查图像内容是否违规</span></span><br><span class="line">    <span class="keyword">if</span> (event.img) &#123;</span><br><span class="line">      imageR = <span class="keyword">await</span> cloud.openapi.security.imgSecCheck(&#123;</span><br><span class="line">        media: &#123;</span><br><span class="line">          header: &#123;</span><br><span class="line">            <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/octet-stream&#x27;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          contentType: <span class="string">&#x27;image/png&#x27;</span>,</span><br><span class="line">          value: Buffer.from(event.img)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      msgR,</span><br><span class="line">      imageR</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="keyword">return</span> e</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编辑完云函数之后，右键<code>ContentCheck</code>唤起菜单选择 上传并部署：云端安装依赖<br><img src="https://i.loli.net/2019/11/22/Ho3zqjR9NIuPp5y.png"></p><p><strong>注意</strong><br>使用微信小程序云函数开发本地需要实现安装好Node.js环境，并配置好环境变量，之前新电脑没装Node.js环境导致上传的云函数老是调用失败，解决办法是安装好Node.js就好了。<br>验证Node.js是否安装<code>npm -v</code>和<code>node -version</code></p><p><img src="https://i.loli.net/2019/11/22/JN8oOtmIZSE3zMV.png"></p><h1 id="调用云函数"><a href="#调用云函数" class="headerlink" title="调用云函数"></a>调用云函数</h1><p>在<code>app.js</code>初始化云环境，参数<code>env</code>可以在云开发的设置中可以看到当前的环境ID</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//app.js</span></span><br><span class="line">App(&#123;</span><br><span class="line">  onLaunch: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    wx.cloud.init(&#123;</span><br><span class="line">      env: <span class="string">&quot;manjaro-7l50h&quot;</span>,</span><br><span class="line">      traceUser: <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">    ...</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/11/22/nxMyfWwH4eO6oD7.png"></p><ol><li><p>检查文字是否违规</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">//  调用ContentCheck云函数检查文字是否违规</span></span><br><span class="line">   wx.cloud.callFunction(&#123;</span><br><span class="line">     name: <span class="string">&#x27;ContentCheck&#x27;</span>,</span><br><span class="line">     data: &#123;</span><br><span class="line">       msg: _this.data.msg,</span><br><span class="line">     &#125;,</span><br><span class="line">     <span class="function"><span class="title">success</span>(<span class="params">res</span>)</span> &#123;</span><br><span class="line">       <span class="built_in">console</span>.log(res.result)</span><br><span class="line">       <span class="keyword">if</span> (res.result.msgR.errCode == <span class="number">87014</span>) &#123;</span><br><span class="line">         wx.showToast(&#123;</span><br><span class="line">           title: <span class="string">&#x27;文字违规&#x27;</span>,</span><br><span class="line">         &#125;)</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文字违规打印的console.log(res.result)</span></span><br><span class="line">&#123;</span><br><span class="line">msgR: &#123;</span><br><span class="line">errCode: <span class="number">87014</span>,</span><br><span class="line">errMsg: <span class="string">&quot;openapi.security.msgSecCheck:fail risky content hint: [cSp9ka06218622]&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line">imageR: <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 文字正常打印的console.log(res.result)</span></span><br><span class="line">&#123;</span><br><span class="line">msgR: &#123;</span><br><span class="line">errCode: <span class="number">0</span>,</span><br><span class="line">errMsg: <span class="string">&quot;openapi.security.msgSecCheck:ok&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line">imageR: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>检查图片是否违规</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  调用ContentCheck云函数检查图片是否违规</span></span><br><span class="line">   wx.cloud.callFunction(&#123;</span><br><span class="line">     name: <span class="string">&#x27;ContentCheck&#x27;</span>,</span><br><span class="line">     data: &#123;</span><br><span class="line">       img: _this.data.img</span><br><span class="line">     &#125;,</span><br><span class="line">     <span class="function"><span class="title">success</span>(<span class="params">res</span>)</span> &#123;</span><br><span class="line">       <span class="built_in">console</span>.log(res.result)</span><br><span class="line">       <span class="keyword">if</span>(res.result.imageR.errCode == <span class="number">87014</span>)&#123;</span><br><span class="line">         wx.showToast(&#123;</span><br><span class="line">           title: <span class="string">&#x27;图片违规&#x27;</span>,</span><br><span class="line">         &#125;)</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;)</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// 图片违规打印的console.log(res.result)</span></span><br><span class="line">   &#123;</span><br><span class="line">   msgR: <span class="literal">false</span>,</span><br><span class="line">   imageR: &#123;</span><br><span class="line">   errCode: <span class="number">87014</span>,</span><br><span class="line">   errMsg: <span class="string">&quot;openapi.security.imgSecCheck:fail risky content hint: [LGrV.a05623955]&quot;</span></span><br><span class="line">   &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 图片正常打印的console.log(res.result)</span></span><br><span class="line">   &#123;</span><br><span class="line">   msgR: <span class="literal">false</span>,</span><br><span class="line">   imageR: &#123;</span><br><span class="line">   errCode: <span class="number">0</span>,</span><br><span class="line">   errMsg: <span class="string">&quot;openapi.security.imgSecCheck:ok&quot;</span></span><br><span class="line">   &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ol><p><a href="https://github.com/xmaihh/Gamecode/tree/master/contentSecCheck">完整例子 contentSecCheck</a></p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/sec-check/security.imgSecCheck.html">微信小程序官方文档</a><br><a href="https://segmentfault.com/a/1190000019955207">小程序评论回复和发帖功能实战</a></p>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter开发中的页面跳转和传值</title>
      <link href="/blog/2019/10/13/Flutter%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E9%A1%B5%E9%9D%A2%E8%B7%B3%E8%BD%AC%E5%92%8C%E4%BC%A0%E5%80%BC/"/>
      <url>/blog/2019/10/13/Flutter%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E9%A1%B5%E9%9D%A2%E8%B7%B3%E8%BD%AC%E5%92%8C%E4%BC%A0%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<p>在Android原生开发中,页面跳转用Intent类实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Intent intent =<span class="keyword">new</span> Intent(MainActivity.<span class="keyword">this</span>,SecondActivity.class);</span><br><span class="line">startActivity(intent);</span><br></pre></td></tr></table></figure><p>而在安卓原生开发中，页面传值有多种方法，常见的可以用intent、Bundle、自定义类、静态变量等等来传值。<br>Flutter提供了两种方法路由，分别是 <a href="https://flutter.dev/docs/cookbook/navigation/navigation-basics">Navigator.push()</a>  以及 <a href="https://flutter.dev/docs/cookbook/navigation/named-routes">Navigator.pushNamed()</a> 。</p><blockquote><p>此文基于 Flutter版本 Channel stable，v1.9.1+hotfix.2</p></blockquote><h1 id="页面跳转"><a href="#页面跳转" class="headerlink" title="页面跳转"></a>页面跳转</h1><h2 id="构建路由Navigator-push"><a href="#构建路由Navigator-push" class="headerlink" title="构建路由Navigator.push()"></a>构建路由Navigator.push()</h2><ol><li>Navigator.push()<br>从第一个页面(FirstPage())跳转到第二个页面(SecondPage())<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Within the `FirstPage` widget</span></span><br><span class="line">onPressed: () &#123;</span><br><span class="line">  Navigator.push(</span><br><span class="line">    context,</span><br><span class="line">    MaterialPageRoute(builder: (context) =&gt; SecondPage()),</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>使用<code>Navigator.pop()</code>回到第一个页面(FirstPage())<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Within the SecondPage widget</span></span><br><span class="line">onPressed: () &#123;</span><br><span class="line">  Navigator.pop(context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="命名路由Navigator-pushNamed"><a href="#命名路由Navigator-pushNamed" class="headerlink" title="命名路由Navigator.pushNamed()"></a>命名路由Navigator.pushNamed()</h2></li><li>Navigator.pushNamed()<br>首先需要定义一个<code>routes</code><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">MaterialApp(</span><br><span class="line">  <span class="comment">// home: FirstPage(),</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Start the app with the &quot;/&quot; named route. In this case, the app starts</span></span><br><span class="line">  <span class="comment">// on the FirstPage widget.</span></span><br><span class="line">  initialRoute: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">  routes: &#123;</span><br><span class="line">    <span class="comment">// When navigating to the &quot;/&quot; route, build the FirstPage widget.</span></span><br><span class="line">    <span class="string">&#x27;/&#x27;</span>: (context) =&gt; FirstPage(),</span><br><span class="line">    <span class="comment">// When navigating to the &quot;/second&quot; route, build the SecondPage widget.</span></span><br><span class="line">    <span class="string">&#x27;/second&#x27;</span>: (context) =&gt; SecondPage(),</span><br><span class="line">  &#125;,</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>注意这里定义了<code>initialRoute</code>之后，就不能定义<code>home</code>属性。应该把之前定义的<code>home</code>属性注释掉。<br><code>initialRoute</code>属性不能与<code>home</code>共存，只能选一个。</p></blockquote><ol start="2"><li>从第一个页面(FirstPage())跳转到第二个页面(SecondPage())</li></ol><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Within the `FirstPage` widget</span></span><br><span class="line">onPressed: () &#123;</span><br><span class="line">  <span class="comment">// Navigate to the second page using a named route.</span></span><br><span class="line">  Navigator.pushNamed(context, <span class="string">&#x27;/second&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>Navigator.pop()</code>回到第一个页面(FirstPage())</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Within the SecondPage widget</span></span><br><span class="line">onPressed: () &#123;</span><br><span class="line">  Navigator.pop(context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="传值跳转"><a href="#传值跳转" class="headerlink" title="传值跳转"></a>传值跳转</h1><h2 id="构建路由Navigator-push-1"><a href="#构建路由Navigator-push-1" class="headerlink" title="构建路由Navigator.push()"></a>构建路由Navigator.push()</h2><ol><li>首先定义需要传的值</li></ol><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// You can pass any object to the arguments parameter.</span></span><br><span class="line"><span class="comment">// In this example, create a class that contains a customizable</span></span><br><span class="line"><span class="comment">// title and message.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ScreenArguments</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> title;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> message;</span><br><span class="line"></span><br><span class="line">  ScreenArguments(<span class="keyword">this</span>.title, <span class="keyword">this</span>.message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>第二个页面(SecondPage())接受传值</li></ol><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// A widget that extracts the necessary arguments from the ModalRoute.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SecondPage</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="comment">// Extract the arguments from the current ModalRoute settings and cast</span></span><br><span class="line">    <span class="comment">// them as ScreenArguments.</span></span><br><span class="line">    <span class="keyword">final</span> ScreenArguments args = ModalRoute.of(context).settings.arguments;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(args.title),</span><br><span class="line">      ),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: Text(args.message),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><p>从第一个页面(FirstPage())传值</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">onPressed: () &#123;</span><br><span class="line">    <span class="comment">// When the user taps the button, navigate to the specific route</span></span><br><span class="line">    <span class="comment">// and provide the arguments as part of the RouteSettings.</span></span><br><span class="line">    Navigator.push(</span><br><span class="line">      context,</span><br><span class="line">      MaterialPageRoute(</span><br><span class="line">        builder: (context) =&gt; SecondPage(),</span><br><span class="line">        <span class="comment">// Pass the arguments as part of the RouteSettings. The</span></span><br><span class="line">        <span class="comment">// ExtractArgumentScreen reads the arguments from these</span></span><br><span class="line">        <span class="comment">// settings.</span></span><br><span class="line">        settings: RouteSettings(</span><br><span class="line">          arguments: ScreenArguments(</span><br><span class="line">            <span class="string">&#x27;Extract Arguments Screen&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;This message is extracted in the build method.&#x27;</span>,</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="命名路由Navigator-pushNamed-1"><a href="#命名路由Navigator-pushNamed-1" class="headerlink" title="命名路由Navigator.pushNamed()"></a>命名路由Navigator.pushNamed()</h2></li><li><p>首先定义需要传的值</p></li></ol><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// You can pass any object to the arguments parameter.</span></span><br><span class="line"><span class="comment">// In this example, create a class that contains a customizable</span></span><br><span class="line"><span class="comment">// title and message.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ScreenArguments</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> title;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> message;</span><br><span class="line"></span><br><span class="line">  ScreenArguments(<span class="keyword">this</span>.title, <span class="keyword">this</span>.message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>其次定义一下<code>routes</code></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">  MaterialApp(</span><br><span class="line">  <span class="comment">// Provide a function to handle named routes. Use this function to</span></span><br><span class="line">  <span class="comment">// identify the named route being pushed, and create the correct</span></span><br><span class="line">  <span class="comment">// Screen.</span></span><br><span class="line">  onGenerateRoute: </span><br><span class="line">      (settings) &#123;</span><br><span class="line">    <span class="comment">// If you push the PassArguments route</span></span><br><span class="line">    <span class="keyword">if</span> (settings.name == <span class="string">&quot;/passArguments&quot;</span>) &#123;</span><br><span class="line">      <span class="comment">// Cast the arguments to the correct type: ScreenArguments.</span></span><br><span class="line">      <span class="keyword">final</span> ScreenArguments args = settings.arguments;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Then, extract the required data from the arguments and</span></span><br><span class="line">      <span class="comment">// pass the data to the correct screen.</span></span><br><span class="line">      <span class="keyword">return</span> MaterialPageRoute(</span><br><span class="line">        builder: (context) &#123;</span><br><span class="line">          <span class="keyword">return</span> SecondPage(</span><br><span class="line">            title: args.title,</span><br><span class="line">            message: args.message,</span><br><span class="line">          );</span><br><span class="line">        &#125;,</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>第二个页面(SecondPage())接受传值</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// A Widget that accepts the necessary arguments via the constructor.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SecondPage</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> title;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> message;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// This Widget accepts the arguments as constructor parameters. It does not</span></span><br><span class="line">  <span class="comment">// extract the arguments from the ModalRoute.</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// The arguments are extracted by the onGenerateRoute function provided to the</span></span><br><span class="line">  <span class="comment">// MaterialApp widget.</span></span><br><span class="line">  <span class="keyword">const</span> SecondPage(&#123;</span><br><span class="line">    Key key,</span><br><span class="line">    <span class="meta">@required</span> <span class="keyword">this</span>.title,</span><br><span class="line">    <span class="meta">@required</span> <span class="keyword">this</span>.message,</span><br><span class="line">  &#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(title),</span><br><span class="line">      ),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: Text(message),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>从第一个页面(FirstPage())传值</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">onPressed: () &#123;</span><br><span class="line">  <span class="comment">// When the user taps the button, navigate to a named route</span></span><br><span class="line">  <span class="comment">// and provide the arguments as an optional parameter.</span></span><br><span class="line">  Navigator.pushNamed(</span><br><span class="line">    context,</span><br><span class="line">    <span class="string">&quot;/passArguments&quot;</span>,</span><br><span class="line">    arguments: ScreenArguments(</span><br><span class="line">      <span class="string">&#x27;Accept Arguments Screen&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;This message is extracted in the onGenerateRoute function.&#x27;</span>,</span><br><span class="line">    ),</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="第三方插件"><a href="#第三方插件" class="headerlink" title="第三方插件"></a>第三方插件</h1><p>Fluro是Flutter路由库</p></li></ol><p>添加方式</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dependencies:</span></span><br><span class="line"> <span class="attr">fluro:</span> <span class="string">&quot;^1.5.1&quot;</span></span><br></pre></td></tr></table></figure><p>使用例子</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;app_route.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:fluro/fluro.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  router.define(<span class="string">&#x27;home/:data&#x27;</span>, handler: <span class="keyword">new</span> Handler(</span><br><span class="line">      handlerFunc: (BuildContext context, <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; params) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Home(params[<span class="string">&#x27;data&#x27;</span>][<span class="number">0</span>]);</span><br><span class="line">      &#125;));</span><br><span class="line">  runApp(<span class="keyword">new</span> Login());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Login</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span></span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  createState() =&gt; <span class="keyword">new</span> LoginState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">Login</span>&gt;</span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MaterialApp(</span><br><span class="line">        title: <span class="string">&#x27;Fluro 例子&#x27;</span>,</span><br><span class="line"></span><br><span class="line">        home: <span class="keyword">new</span> Scaffold(</span><br><span class="line">          appBar: <span class="keyword">new</span> AppBar(</span><br><span class="line">            title: <span class="keyword">new</span> Text(<span class="string">&quot;登录&quot;</span>),</span><br><span class="line">          ),</span><br><span class="line">          body: <span class="keyword">new</span> Builder(builder: (BuildContext context) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Center(child:</span><br><span class="line">            <span class="keyword">new</span> Container(</span><br><span class="line">                height: <span class="number">30.0</span>,</span><br><span class="line">                color: Colors.blue,</span><br><span class="line">                child:<span class="keyword">new</span> FlatButton(</span><br><span class="line">                  child: <span class="keyword">const</span> Text(<span class="string">&#x27;传递帐号密码&#x27;</span>),</span><br><span class="line">                  onPressed: () &#123;</span><br><span class="line">                    <span class="keyword">var</span> bodyJson = <span class="string">&#x27;&#123;&quot;user&quot;:Manjaro,&quot;pass&quot;:passwd123&#125;&#x27;</span>;</span><br><span class="line">                    router.navigateTo(context, <span class="string">&#x27;/home/<span class="subst">$bodyJson</span>&#x27;</span>);</span><br><span class="line">                  &#125;,</span><br><span class="line">                )),</span><br><span class="line">            );</span><br><span class="line">          &#125;),</span><br><span class="line">        ));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Home</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span></span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> _result;</span><br><span class="line">  Home(<span class="keyword">this</span>._result);</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  createState() =&gt; <span class="keyword">new</span> HomeState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">Home</span>&gt;</span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Center(</span><br><span class="line">        child: <span class="keyword">new</span> Scaffold(</span><br><span class="line">          appBar: <span class="keyword">new</span> AppBar(</span><br><span class="line">            title: <span class="keyword">new</span> Text(<span class="string">&quot;个人主页&quot;</span>),</span><br><span class="line">          ),</span><br><span class="line">          body:<span class="keyword">new</span> Center(child:  <span class="keyword">new</span> Text(widget._result)),</span><br><span class="line">        )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> ‘app_route.dart’的代码:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:fluro/fluro.dart&#x27;</span>;</span><br><span class="line">Router router = <span class="keyword">new</span> Router();</span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2019/11/21/xsScWX6qYb75fw9.gif" style="zoom:80%;" /><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://pub.dev/packages/fluro">fluro</a><br><a href="https://flutter.dev/docs/cookbook/navigation/navigate-with-arguments">官方文档</a><br><a href="https://my.oschina.net/u/248241/blog/1796503">flutter移动开发中的页面跳转和传值</a></p>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树莓派4-Ubuntu18.04.2LTS下配置WiFi与SSH连接</title>
      <link href="/blog/2019/09/17/%E6%A0%91%E8%8E%93%E6%B4%BE4-Ubuntu18.04.2LTS%E4%B8%8B%E9%85%8D%E7%BD%AEWiFi%E4%B8%8ESSH%E8%BF%9E%E6%8E%A5/"/>
      <url>/blog/2019/09/17/%E6%A0%91%E8%8E%93%E6%B4%BE4-Ubuntu18.04.2LTS%E4%B8%8B%E9%85%8D%E7%BD%AEWiFi%E4%B8%8ESSH%E8%BF%9E%E6%8E%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h1><ul><li><a href="https://www.raspberrypi.org/products/raspberry-pi-4-model-b/">Raspberry Pi 4</a></li><li>SD卡，读卡器</li><li>电源适配器</li></ul><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="下载安装到SD卡"><a href="#下载安装到SD卡" class="headerlink" title="下载安装到SD卡"></a>下载安装到SD卡</h2><p>树莓派系统官方镜像下载：·<a href="https://www.raspberrypi.org/downloads/raspbian/">Raspberry Pi Raspbian</a></p><p>下载<a href="https://www.balena.io/etcher/">Etcher</a>工具，把镜像烧写到SD卡里面去<br>工具的操作很简单的三个步骤:<br>选择镜像 –&gt; 选择SD卡 –&gt; 烧写!</p><p><img src="https://i.loli.net/2019/09/17/n6rucIg4UNXQTqj.png"></p><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>出于安全考虑，SSH在raspbian中默认disabled。启用SSH,在SD卡的boot目录下建立一个空白文件<code>ssh</code>即可启用,文件命名为 ssh。注意要小写且不要有任何扩展名。</p><p>配置WiFi,在SD卡的boot目录下建立一个 <code>wpa_supplicant.conf</code>文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev</span><br><span class="line">update_config=1</span><br><span class="line">country=US</span><br><span class="line"> </span><br><span class="line">network=&#123;</span><br><span class="line">ssid=&quot;WiFi-A&quot;</span><br><span class="line">psk=&quot;123456789&quot;</span><br><span class="line">key_mgmt=WPA-PSK</span><br><span class="line">priority=1</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">network=&#123;</span><br><span class="line">ssid=&quot;WiFi-B&quot;</span><br><span class="line">psk=&quot;123456789&quot;</span><br><span class="line">key_mgmt=WPA-PSK</span><br><span class="line">priority=2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/09/17/GbJksDFXnLjf5i8.png"></p><h2 id="连接数莓派"><a href="#连接数莓派" class="headerlink" title="连接数莓派"></a>连接数莓派</h2><p>将SD卡放入Raspberry Pi中，它应该在启用网络的情况下启动到Debian。如果出现问题，您可以通过将SD卡移回Linux计算机并查看var / log目录来查看日志。</p><p>要连接到Raspberry Pi，需要知道它已分配的IP地址。在无线路由器上找到Raspberry Pi的IP地址,需确保Ubuntu 连接的和Raspberry Pi是在同一个局域网内.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ssh pi@hostname</span></span><br></pre></td></tr></table></figure><blockquote><p>hostname为树莓派的ip地址.</p></blockquote><p>官方系统镜像默认用户名为<code>pi</code>,密码为<code>raspberry</code>.</p><p><img src="https://i.loli.net/2019/09/17/8qxRmcvLn7zAEGJ.png"></p><blockquote><p>执行<code>passwd</code>命令来修改默认密码</p></blockquote><p>Raspbian镜像基于Debian Buster,基本命令使用和Debian基本一致.</p><ul><li><p>更新</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pi@raspberrypi:~ $ sudo apt-get update</span><br></pre></td></tr></table></figure></li><li><p>升级</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pi@raspberrypi:~ $ sudo apt-get upgrade</span><br></pre></td></tr></table></figure></li><li><p>安装软件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pi@raspberrypi:~ $ sudo apt-get install &lt;name of software&gt;</span><br></pre></td></tr></table></figure></li><li><p>检查SD容量<br>当运行<code>upgrade</code>命令时，会显示数据下载量和空间需要量。可以运行df -h来确定卡剩余空间是否足够。注意下载的包(.deb文件)保存在<code>/var/cache/apt/archives</code>路径下。你可以通过<code>sudo apt-get clean</code>来争取空间。</p></li><li><p>配置更改<br>可对树莓派进行配置更改</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo raspi-config</span><br></pre></td></tr></table></figure></li></ul><h1 id="安装docker和docker-compose"><a href="#安装docker和docker-compose" class="headerlink" title="安装docker和docker-compose"></a>安装docker和docker-compose</h1><p>树莓派是ARM架构的,如果需要找树莓派专用的镜像，那就在Dockerhub上搜索ARM或Rpi相关就能找到了。<br>有一个叫<a href="https://hub.docker.com/u/hypriot/">Hypriot</a>的仓库制作了非常多树莓派专用docker，可以参考下。</p><h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pi@raspberrypi:~ $ sudo apt-get update</span><br><span class="line">pi@raspberrypi:~ $ sudo apt-get upgrade</span><br><span class="line">pi@raspberrypi:~ $ curl -sSL https://get.docker.com| sh</span><br></pre></td></tr></table></figure><p>然后运行<code>hello world</code>检测是否安装成功.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pi@raspberrypi:~ $ sudo docker run hello-world</span><br></pre></td></tr></table></figure><h2 id="无需sudo执行docker"><a href="#无需sudo执行docker" class="headerlink" title="无需sudo执行docker"></a>无需sudo执行docker</h2><p>为了每次执行docker不需要总是输入sudo，我们需要为docker创建一个用户组，并授予权限才行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建docker用户组</span></span><br><span class="line">pi@raspberrypi:~ $ sudo groupadd docker</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 把当前用户加入到docker用户组</span></span><br><span class="line">pi@raspberrypi:~ $ sudo gpasswd -a $USER docker</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 更新当前用户组变动（就不用退出并重新登录了）</span></span><br><span class="line">pi@raspberrypi:~ $ newgrp docker</span><br></pre></td></tr></table></figure><p>或者 直接执行下面这条命令,会重启,需要重新登入.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pi@raspberrypi:~ $ sudo usermod -aG docker pi &amp;&amp; sudo reboot</span><br></pre></td></tr></table></figure><h2 id="安装docker-compose"><a href="#安装docker-compose" class="headerlink" title="安装docker-compose"></a>安装docker-compose</h2><h3 id="第一种方法"><a href="#第一种方法" class="headerlink" title="第一种方法"></a>第一种方法</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pi@raspberrypi:~ $ sudo apt-get update</span><br><span class="line">pi@raspberrypi:~ $ sudo apt-get install -y python python-pip</span><br><span class="line">pi@raspberrypi:~ $ sudo pip install docker-compose</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/09/17/JZfydCovKcF9MTn.png"></p><p>先执行,再执行<code>docker-compose</code>安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pi@raspberrypi:~ $ sudo apt install -y python python-pip libffi-dev</span><br></pre></td></tr></table></figure><p><del>### 第二种方法</del><br><del><a href="https://github.com/docker/compose">https://github.com/docker/compose</a></del><br><del>通过把<code>docker compose</code>当作一个<code>docker</code>的<code>container</code>下载并运行</del></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line">    -v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">    -v &quot;$PWD:/rootfs/$PWD&quot; \</span><br><span class="line">    -w=&quot;/rootfs/$PWD&quot; \</span><br><span class="line">    docker/compose:1.24.1 up</span><br></pre></td></tr></table></figure><p><del>设置alias快捷键,编辑(<code>~/.bash_profile</code>)</del></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">alias docker-compose=&quot;&#x27;&quot;&#x27;docker run \</span><br><span class="line">    -v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">    -v &quot;$PWD:/rootfs/$PWD&quot; \</span><br><span class="line">    -w=&quot;/rootfs/$PWD&quot; \</span><br><span class="line">    docker/compose:1.24.1&#x27;&quot;&#x27;&quot;</span><br></pre></td></tr></table></figure><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p>[<a href="https://segmentfault.com/a/1190000018028887">树莓派安装Docker</a>]<br><a href="http://www.penguintutor.com/raspberrypi/">Raspberry Pi - Linux computer for learning programming</a></p>]]></content>
      
      
      <categories>
          
          <category> Raspberry Pi </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Raspberry Pi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AndroidStudio快速生成jni头文件</title>
      <link href="/blog/2019/07/31/AndroidStudio%E5%BF%AB%E9%80%9F%E7%94%9F%E6%88%90jni%E5%A4%B4%E6%96%87%E4%BB%B6/"/>
      <url>/blog/2019/07/31/AndroidStudio%E5%BF%AB%E9%80%9F%E7%94%9F%E6%88%90jni%E5%A4%B4%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>依次打开<code>Settings</code>–&gt;<code>Tools</code>–&gt;<code>External Tools</code>–&gt;<code>点击加号创建一个快速生成jni头文件的工具</code></p><p><img src="https://i.loli.net/2019/07/31/5d41618c4f9d413087.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. Program: javah  </span><br><span class="line">2. Parameters: -v -jni -d $ModuleFileDir$/src/main/cpp $FileClass$  </span><br><span class="line">3. Working directory: $SourcepathEntry$  </span><br></pre></td></tr></table></figure><p>选中包含native方法的 JAVA 文件，右键唤起菜单，依次找到<code>ExternalTools</code>=&gt;<code>Jni create .h</code>，执行前面添加的生成.h头文件的工具。<br><img src="https://i.loli.net/2019/07/31/5d41688405d3932421.jpg"><br><img src="https://i.loli.net/2019/07/31/5d416983e1d3667068.png"></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AndroidStudio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android录音</title>
      <link href="/blog/2019/07/30/Android%E5%BD%95%E9%9F%B3/"/>
      <url>/blog/2019/07/30/Android%E5%BD%95%E9%9F%B3/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍-Android-中录音功能的实现"><a href="#介绍-Android-中录音功能的实现" class="headerlink" title="介绍 Android 中录音功能的实现"></a>介绍 Android 中录音功能的实现</h1><h2 id="录音方法"><a href="#录音方法" class="headerlink" title="录音方法"></a>录音方法</h2><p>Android 中的录音主要有两种方式 MediaRecorder 和 AudioRecord</p><ul><li><p>MediaRecorder（基于文件）</p><p>  可以录制音、视频；</p><p>  封装了录制、编码、压缩、线程等功能，直接生成可播放的音频文件；</p><p>  优点：封装度高，操作简单</p><p>  缺点：编码格式有限，.aac  .amr  .3gp，但是没有 mp3、wav 格式</p></li><li><p>AudioRecord（基于字节流）</p><p>  ​    只能录制音频；</p><p>  ​    输出的是 PCM 的声音数据，如果保存成文件是不能直接播放的，需要编码；</p><p>  ​    可以捕获音频流，边录制边处理，比如编码、变声、添加背景音乐。</p><p>  ​    优点：更灵活</p><p>  ​    缺点：需自行处理编码、开线程等工作</p><p>  ​    应用场景：语音聊天、汤姆猫、K歌…</p></li></ul><blockquote><p>PCM：Pulse Code Modulation（脉冲编码调制），是对连续变化的模拟信号进行抽样、量化和编码产生的数字信号。<br>它不是一种音频格式，它是声音文件的元数据，也就是声音的内容，没有文件头。经过某种格式的压缩、编码算法处理以后，再加上这种格式的文件头，才是这种格式的音频文件。</p></blockquote><h2 id="音频参数"><a href="#音频参数" class="headerlink" title="音频参数"></a>音频参数</h2><ul><li>采样频率：</li></ul><p>​       自然界的声音转换成数字格式时，要对它进行采样，每秒钟采样的次数就是采样率。就好比电影的1秒24帧画面。最常用：44.1kHz。</p><ul><li>采样位数：</li></ul><p>​       一个采样样本用多少位二进制数编码，最常用：16位。</p><ul><li>声道数：</li></ul><p>​       分为单声道和双声道，双声道又叫立体声，双声道音频文件比单声道大一倍。</p><ul><li>比特率（码率）：</li></ul><p>​       每秒钟音频文件所占的 bit 数。单位 ：kbps（每秒千比特数）。比特率（原始音频 PCM） = 采样频率 x 采样位数  x  声道数，这是未经压缩的比特率，压缩后会远小于这个值。<br>​<br>​       采用44.1kHz采样频率、16位采样位数、双声道编码的原始音频 PCM 比特率为：1411.2 kbps 。而最常见的 mp3 格式的比特率为：128kbps，约 1MB/分钟。</p><ul><li>编码格式：</li></ul><p>​       将原始音频 PCM 采用特定压缩算法处理后，加上文件头，所保存成的文件的格式。例如 mp3、wav、aac…</p><h2 id="编码格式"><a href="#编码格式" class="headerlink" title="编码格式"></a>编码格式</h2><ul><li>mp3</li></ul><p>​       是当今最流行的一种数字音频编码和有损压缩格式，就是将 PCM 通过算法进行压缩，常规 mp3 文件约为 1MB/分钟。</p><ul><li>aac</li></ul><p>​        是 mp3 的下一代格式，也是有损压缩，相对于mp3，aac 格式的音频更佳，文件更小。ios 平台也支持，跨平台性好。</p><ul><li>wav</li></ul><p>​        最流行的非压缩数据格式，微软开发。</p><ul><li> amr</li></ul><p>​        压缩比比较大，但相对其他的压缩格式质量比较差，多用于人声，通话录音。</p><blockquote><p>riff：一种文件描述的格式，wav文件就采用了riff描述，前面44字节就是 riff 描述内容，就是文件头。</p></blockquote><h2 id="MediaRecorder"><a href="#MediaRecorder" class="headerlink" title="MediaRecorder"></a>MediaRecorder</h2><p> 首先在 AndroidManifest 配置文件中添加录音权限：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.RECORD_AUDIO&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>Android 6.0 以上还要动态获取权限。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 录音对象声明</span></span><br><span class="line">   <span class="keyword">private</span> MediaRecorder mRecorder;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startRecording</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="comment">// 创建录音对象</span></span><br><span class="line">       mRecorder = <span class="keyword">new</span> MediaRecorder();</span><br><span class="line">       <span class="comment">// 设置声音来源 MIC 即手机麦克风</span></span><br><span class="line">       mRecorder.setAudioSource(MediaRecorder.AudioSource.MIC);</span><br><span class="line">       <span class="comment">// 设置音频格式 aac</span></span><br><span class="line">       mRecorder.setOutputFormat(MediaRecorder.OutputFormat.AAC_ADTS);</span><br><span class="line">       <span class="comment">// 设置录音文件</span></span><br><span class="line">       mRecorder.setOutputFile(getExternalCacheDir() + <span class="string">&quot;/demo.aac&quot;</span>);</span><br><span class="line">       <span class="comment">// 设置编码器</span></span><br><span class="line">       mRecorder.setAudioEncoder(MediaRecorder.AudioEncoder.AAC);</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="comment">// 准备录音</span></span><br><span class="line">           mRecorder.prepare();</span><br><span class="line">       &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 开始录音</span></span><br><span class="line">       mRecorder.start();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>录音是耗时操作，但是，由于<code>MediaRecorder</code>已经封装了线程，故以上代码放在主线程即可。<br><code>MediaRecorder</code>是很占资源的，使用完毕需要释放掉：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">stopRecording</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="comment">// 停止录音</span></span><br><span class="line">       mRecorder.stop();</span><br><span class="line">       <span class="comment">// 释放资源</span></span><br><span class="line">       mRecorder.release();</span><br><span class="line">       <span class="comment">// 引用置空</span></span><br><span class="line">       mRecorder = <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="AudioRecord"><a href="#AudioRecord" class="headerlink" title="AudioRecord"></a>AudioRecord</h2><p>首先在 AndroidManifest 配置文件中添加录音权限：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.RECORD_AUDIO&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>当然 Android 6.0 以上还要动态获取权限，具体实现方式请百度之。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 录音状态</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> isRecording = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startRecording</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 耗时操作要开线程</span></span><br><span class="line">    <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 音源</span></span><br><span class="line">            <span class="keyword">int</span> audioSource = MediaRecorder.AudioSource.MIC;</span><br><span class="line">            <span class="comment">// 采样率</span></span><br><span class="line">            <span class="keyword">int</span> sampleRate = <span class="number">44100</span>;</span><br><span class="line">            <span class="comment">// 声道数</span></span><br><span class="line">            <span class="keyword">int</span> channelConfig = AudioFormat.CHANNEL_IN_STEREO;<span class="comment">//双声道</span></span><br><span class="line">            <span class="comment">// 采样位数</span></span><br><span class="line">            <span class="keyword">int</span> audioFormat = AudioFormat.ENCODING_PCM_16BIT;</span><br><span class="line">            <span class="comment">// 获取最小缓存区大小</span></span><br><span class="line">            <span class="keyword">int</span> minBufferSize = AudioRecord.getMinBufferSize(sampleRate, channelConfig, audioFormat);</span><br><span class="line">            <span class="comment">// 创建录音对象</span></span><br><span class="line">            AudioRecord audioRecord = <span class="keyword">new</span> AudioRecord(audioSource, sampleRate, channelConfig, audioFormat, minBufferSize);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 创建随机读写流</span></span><br><span class="line">                RandomAccessFile raf = <span class="keyword">new</span> RandomAccessFile(getExternalCacheDir() + <span class="string">&quot;/demo.wav&quot;</span>, <span class="string">&quot;rw&quot;</span>);</span><br><span class="line">                <span class="comment">// 留出文件头的位置</span></span><br><span class="line">                raf.seek(<span class="number">44</span>);</span><br><span class="line">                <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[minBufferSize];</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 录音中</span></span><br><span class="line">                audioRecord.startRecording();</span><br><span class="line">                isRecording = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">while</span> (isRecording) &#123;</span><br><span class="line">                    <span class="keyword">int</span> readSize = audioRecord.read(buffer, <span class="number">0</span>, minBufferSize);</span><br><span class="line">                    raf.write(buffer,<span class="number">0</span>,readSize);</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 录音停止</span></span><br><span class="line">                audioRecord.stop();</span><br><span class="line">                audioRecord.release();</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 写文件头</span></span><br><span class="line">                WriteWaveFileHeader(raf, raf.length(),sampleRate,<span class="number">2</span>,sampleRate*<span class="number">16</span>*<span class="number">2</span>/<span class="number">8</span>);</span><br><span class="line">                raf.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 为 wav 文件添加文件头，前提是在头部预留了 44字节空间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> raf</span></span><br><span class="line"><span class="comment">     *              随机读写流</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileLength</span></span><br><span class="line"><span class="comment">     *              文件总长</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sampleRate</span></span><br><span class="line"><span class="comment">     *              采样率</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> channels</span></span><br><span class="line"><span class="comment">     *              声道数量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> byteRate</span></span><br><span class="line"><span class="comment">     *              码率 = 采样率 * 采样位数 * 声道数 / 8</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">WriteWaveFileHeader</span><span class="params">(RandomAccessFile raf, <span class="keyword">long</span> fileLength, <span class="keyword">long</span> sampleRate, <span class="keyword">int</span> channels, <span class="keyword">long</span> byteRate)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> totalDataLen = fileLength + <span class="number">36</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] header = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">44</span>];</span><br><span class="line">        header[<span class="number">0</span>] = <span class="string">&#x27;R&#x27;</span>; <span class="comment">// RIFF/WAVE header</span></span><br><span class="line">        header[<span class="number">1</span>] = <span class="string">&#x27;I&#x27;</span>;</span><br><span class="line">        header[<span class="number">2</span>] = <span class="string">&#x27;F&#x27;</span>;</span><br><span class="line">        header[<span class="number">3</span>] = <span class="string">&#x27;F&#x27;</span>;</span><br><span class="line">        header[<span class="number">4</span>] = (<span class="keyword">byte</span>) (totalDataLen &amp; <span class="number">0xff</span>);</span><br><span class="line">        header[<span class="number">5</span>] = (<span class="keyword">byte</span>) ((totalDataLen &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xff</span>);</span><br><span class="line">        header[<span class="number">6</span>] = (<span class="keyword">byte</span>) ((totalDataLen &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>);</span><br><span class="line">        header[<span class="number">7</span>] = (<span class="keyword">byte</span>) ((totalDataLen &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xff</span>);</span><br><span class="line">        header[<span class="number">8</span>] = <span class="string">&#x27;W&#x27;</span>;</span><br><span class="line">        header[<span class="number">9</span>] = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">        header[<span class="number">10</span>] = <span class="string">&#x27;V&#x27;</span>;</span><br><span class="line">        header[<span class="number">11</span>] = <span class="string">&#x27;E&#x27;</span>;</span><br><span class="line">        header[<span class="number">12</span>] = <span class="string">&#x27;f&#x27;</span>; <span class="comment">// &#x27;fmt &#x27; chunk</span></span><br><span class="line">        header[<span class="number">13</span>] = <span class="string">&#x27;m&#x27;</span>;</span><br><span class="line">        header[<span class="number">14</span>] = <span class="string">&#x27;t&#x27;</span>;</span><br><span class="line">        header[<span class="number">15</span>] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        header[<span class="number">16</span>] = <span class="number">16</span>; <span class="comment">// 4 bytes: size of &#x27;fmt &#x27; chunk</span></span><br><span class="line">        header[<span class="number">17</span>] = <span class="number">0</span>;</span><br><span class="line">        header[<span class="number">18</span>] = <span class="number">0</span>;</span><br><span class="line">        header[<span class="number">19</span>] = <span class="number">0</span>;</span><br><span class="line">        header[<span class="number">20</span>] = <span class="number">1</span>; <span class="comment">// format = 1</span></span><br><span class="line">        header[<span class="number">21</span>] = <span class="number">0</span>;</span><br><span class="line">        header[<span class="number">22</span>] = (<span class="keyword">byte</span>) channels;</span><br><span class="line">        header[<span class="number">23</span>] = <span class="number">0</span>;</span><br><span class="line">        header[<span class="number">24</span>] = (<span class="keyword">byte</span>) (sampleRate &amp; <span class="number">0xff</span>);</span><br><span class="line">        header[<span class="number">25</span>] = (<span class="keyword">byte</span>) ((sampleRate &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xff</span>);</span><br><span class="line">        header[<span class="number">26</span>] = (<span class="keyword">byte</span>) ((sampleRate &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>);</span><br><span class="line">        header[<span class="number">27</span>] = (<span class="keyword">byte</span>) ((sampleRate &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xff</span>);</span><br><span class="line">        header[<span class="number">28</span>] = (<span class="keyword">byte</span>) (byteRate &amp; <span class="number">0xff</span>);</span><br><span class="line">        header[<span class="number">29</span>] = (<span class="keyword">byte</span>) ((byteRate &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xff</span>);</span><br><span class="line">        header[<span class="number">30</span>] = (<span class="keyword">byte</span>) ((byteRate &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>);</span><br><span class="line">        header[<span class="number">31</span>] = (<span class="keyword">byte</span>) ((byteRate &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xff</span>);</span><br><span class="line">        header[<span class="number">32</span>] = (<span class="keyword">byte</span>) (<span class="number">2</span> * <span class="number">16</span> / <span class="number">8</span>); <span class="comment">// block align</span></span><br><span class="line">        header[<span class="number">33</span>] = <span class="number">0</span>;</span><br><span class="line">        header[<span class="number">34</span>] = <span class="number">16</span>; <span class="comment">// bits per sample</span></span><br><span class="line">        header[<span class="number">35</span>] = <span class="number">0</span>;</span><br><span class="line">        header[<span class="number">36</span>] = <span class="string">&#x27;d&#x27;</span>;</span><br><span class="line">        header[<span class="number">37</span>] = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        header[<span class="number">38</span>] = <span class="string">&#x27;t&#x27;</span>;</span><br><span class="line">        header[<span class="number">39</span>] = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        header[<span class="number">40</span>] = (<span class="keyword">byte</span>) (fileLength &amp; <span class="number">0xff</span>);</span><br><span class="line">        header[<span class="number">41</span>] = (<span class="keyword">byte</span>) ((fileLength &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xff</span>);</span><br><span class="line">        header[<span class="number">42</span>] = (<span class="keyword">byte</span>) ((fileLength &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>);</span><br><span class="line">        header[<span class="number">43</span>] = (<span class="keyword">byte</span>) ((fileLength &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xff</span>);</span><br><span class="line">        raf.seek(<span class="number">0</span>);</span><br><span class="line">        raf.write(header, <span class="number">0</span>, <span class="number">44</span>);</span><br><span class="line">    &#125; </span><br></pre></td></tr></table></figure><p> 以下是停止录音的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">stopRecording</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="comment">// 停止录音</span></span><br><span class="line">     isRecording = <span class="keyword">false</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="边录边播（AudioRecord-AudioTrack）"><a href="#边录边播（AudioRecord-AudioTrack）" class="headerlink" title="边录边播（AudioRecord + AudioTrack）"></a>边录边播（AudioRecord + AudioTrack）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 录音状态</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">boolean</span> isRecording = <span class="keyword">true</span>;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="comment">// 耗时操作要开线程</span></span><br><span class="line">       <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">               </span><br><span class="line">               <span class="comment">// 音源</span></span><br><span class="line">               <span class="keyword">int</span> audioSource = MediaRecorder.AudioSource.MIC;</span><br><span class="line">               <span class="comment">// 采样率</span></span><br><span class="line">               <span class="keyword">int</span> sampleRate = <span class="number">8000</span>;</span><br><span class="line">               <span class="comment">// 声道数</span></span><br><span class="line">               <span class="keyword">int</span> channelConfig = AudioFormat.CHANNEL_IN_STEREO;<span class="comment">//双声道</span></span><br><span class="line">               <span class="comment">// 采样位数</span></span><br><span class="line">               <span class="keyword">int</span> audioFormat = AudioFormat.ENCODING_PCM_8BIT;</span><br><span class="line">               <span class="comment">// 获取录音最小缓存区大小</span></span><br><span class="line">               <span class="keyword">int</span> recorderBufferSize = AudioRecord.getMinBufferSize(sampleRate, channelConfig, audioFormat);</span><br><span class="line">               <span class="comment">// 创建录音对象</span></span><br><span class="line">               AudioRecord audioRecord = <span class="keyword">new</span> AudioRecord(audioSource, sampleRate, channelConfig, audioFormat, recorderBufferSize);</span><br><span class="line">               </span><br><span class="line">               <span class="comment">// 音频类型</span></span><br><span class="line">               <span class="keyword">int</span> streamType = AudioManager.STREAM_MUSIC;</span><br><span class="line">               <span class="comment">// 静态音频还是音频流</span></span><br><span class="line">               <span class="keyword">int</span> mode = AudioTrack.MODE_STREAM;</span><br><span class="line">               <span class="comment">//  获取播放最小缓存区大小</span></span><br><span class="line">               <span class="keyword">int</span> playerBufferSize = AudioTrack.getMinBufferSize(sampleRate, channelConfig, audioFormat);</span><br><span class="line">               <span class="comment">// 创建播放对象</span></span><br><span class="line">               AudioTrack audioTrack = <span class="keyword">new</span> AudioTrack(streamType, sampleRate, channelConfig, audioFormat, playerBufferSize, mode);</span><br><span class="line">               </span><br><span class="line">               <span class="comment">// 缓存区</span></span><br><span class="line">               <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[recorderBufferSize];</span><br><span class="line">               </span><br><span class="line">               <span class="comment">// 录音中</span></span><br><span class="line">               audioTrack.play();</span><br><span class="line">               audioRecord.startRecording();</span><br><span class="line">               isRecording = <span class="keyword">true</span>;</span><br><span class="line">               <span class="keyword">while</span> (isRecording) &#123;</span><br><span class="line">                   audioRecord.read(buffer, <span class="number">0</span>, recorderBufferSize);</span><br><span class="line">                   audioTrack.write(buffer, <span class="number">0</span>, buffer.length);</span><br><span class="line">               &#125;</span><br><span class="line">               </span><br><span class="line">               <span class="comment">// 录音停止</span></span><br><span class="line">               audioRecord.stop();</span><br><span class="line">               audioTrack.stop();</span><br><span class="line">               audioRecord.release();</span><br><span class="line">               audioTrack.release();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;.start();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p> 停止录音和播放：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="comment">// 停止录音</span></span><br><span class="line">       isRecording = <span class="keyword">false</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="录制mp3格式音频"><a href="#录制mp3格式音频" class="headerlink" title="录制mp3格式音频"></a>录制mp3格式音频</h2><p> 众多周知，mp3 是跨平台性最好的音频格式，由于采用了压缩率更高的有损压缩算法，文件大小是大约每分钟1M，使其在网络中传输更快，占用存储空间也更少；与此同时，它的声音质量也不错，尤其是人声（相声、评书、脱口秀），当然追求无损音乐的除外。<br> Android 中没有提供录制 mp3 的 API，需要使用开源库 lame，lame 是专门用于编码 mp3 的轻量高效的 c 代码库。由于采用 c 语言编写，故需要用到 jni。</p><h3 id="下载lame库"><a href="#下载lame库" class="headerlink" title="下载lame库"></a>下载lame库</h3><ul><li>lame库下载(以下使用的是<code>lame</code> v3.100)<br>  <a href="https://sourceforge.net/projects/lame/files/lame/">https://sourceforge.net/projects/lame/files/lame/</a></li></ul><h3 id="源码导入"><a href="#源码导入" class="headerlink" title="源码导入"></a>源码导入</h3><p>解压下载的lame库，把<code>libmp3lame</code>文件夹下后缀为<code>.c .h</code>的文件（不包括子文件夹i386和vector下的）复制到cpp/lame文件夹内，同时把<code>include</code>目录下的lame.h也复制到cpp/lame文件夹内，此时 lame文件夹内包含42个文件。<br><img src="https://i.loli.net/2019/07/31/5d4157b88dbd619403.png"><br>（可参考<a href="https://github.com/xmaihh/MFSocket/tree/master/liblame/src/main/cpp/lame%EF%BC%89">https://github.com/xmaihh/MFSocket/tree/master/liblame/src/main/cpp/lame）</a></p><h3 id="修改库文件"><a href="#修改库文件" class="headerlink" title="修改库文件"></a>修改库文件</h3><p>打开刚刚拷贝的lame库文件，修改：</p><ol><li>util.h 文件，把 570 行的两处 ieee754_float32_t 改为 float  因为Android下并不支持该类型</li><li>set_get.h 文件，把头部的 #include &lt;lame.h&gt; 改为 #include “lame.h”</li><li>fft.c 文件，删除第47行  #include “vector/lame_intrin.h”</li><li>id3tag.c和machine.h两个文件里，將HAVE_STRCHR和HAVE_MEMCPY的ifdef结构体删除或者注释</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> STDC_HEADERS</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="comment">/*# ifndef HAVE_STRCHR</span></span><br><span class="line"><span class="comment">#  define strchr index</span></span><br><span class="line"><span class="comment">#  define strrchr rindex</span></span><br><span class="line"><span class="comment"># endif*/</span></span><br><span class="line">char   *strchr(), *strrchr();</span><br><span class="line"><span class="comment">/*# ifndef HAVE_MEMCPY</span></span><br><span class="line"><span class="comment">#  define memcpy(d, s, n) bcopy ((s), (d), (n))</span></span><br><span class="line"><span class="comment">#  define memmove(d, s, n) bcopy ((s), (d), (n))</span></span><br><span class="line"><span class="comment"># endif*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>可参考以下完整修改文件</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">diff --git a/VbrTag.c b/VbrTag.c</span></span><br><span class="line"><span class="comment">index 5800a44..36ee7b6 100644</span></span><br><span class="line"><span class="comment">--- a/VbrTag.c</span></span><br><span class="line"><span class="comment">+++ b/VbrTag.c</span></span><br><span class="line"><span class="meta">@@ -26,6 +26,8 @@</span></span><br><span class="line"> # include &lt;config.h&gt;</span><br><span class="line"> #endif</span><br><span class="line"> </span><br><span class="line"><span class="addition">+#include &lt;stdlib.h&gt;</span></span><br><span class="line"><span class="addition">+#include &lt;string.h&gt;</span></span><br><span class="line"> #include &quot;lame.h&quot;</span><br><span class="line"> #include &quot;machine.h&quot;</span><br><span class="line"> #include &quot;encoder.h&quot;</span><br><span class="line"><span class="comment">diff --git a/bitstream.c b/bitstream.c</span></span><br><span class="line"><span class="comment">index aa35915..a2fe294 100644</span></span><br><span class="line"><span class="comment">--- a/bitstream.c</span></span><br><span class="line"><span class="comment">+++ b/bitstream.c</span></span><br><span class="line"><span class="meta">@@ -29,6 +29,7 @@</span></span><br><span class="line"> </span><br><span class="line"> #include &lt;stdlib.h&gt;</span><br><span class="line"> #include &lt;stdio.h&gt;</span><br><span class="line"><span class="addition">+#include &lt;string.h&gt;</span></span><br><span class="line"> </span><br><span class="line"> #include &quot;lame.h&quot;</span><br><span class="line"> #include &quot;machine.h&quot;</span><br><span class="line"><span class="comment">diff --git a/encoder.c b/encoder.c</span></span><br><span class="line"><span class="comment">index 48f46c7..437067f 100644</span></span><br><span class="line"><span class="comment">--- a/encoder.c</span></span><br><span class="line"><span class="comment">+++ b/encoder.c</span></span><br><span class="line"><span class="meta">@@ -30,6 +30,7 @@</span></span><br><span class="line"> #endif</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="addition">+#include &lt;string.h&gt;</span></span><br><span class="line"> #include &quot;lame.h&quot;</span><br><span class="line"> #include &quot;machine.h&quot;</span><br><span class="line"> #include &quot;encoder.h&quot;</span><br><span class="line"><span class="comment">diff --git a/fft.c b/fft.c</span></span><br><span class="line"><span class="comment">index 4eea1ad..27febdb 100644</span></span><br><span class="line"><span class="comment">--- a/fft.c</span></span><br><span class="line"><span class="comment">+++ b/fft.c</span></span><br><span class="line"><span class="meta">@@ -44,7 +44,7 @@</span></span><br><span class="line"> #include &quot;util.h&quot;</span><br><span class="line"><span class="comment">--- a/fft.c</span></span><br><span class="line"><span class="comment">+++ b/fft.c</span></span><br><span class="line"><span class="meta">@@ -44,7 +44,7 @@</span></span><br><span class="line"> #include &quot;util.h&quot;</span><br><span class="line"> #include &quot;fft.h&quot;</span><br><span class="line"> </span><br><span class="line"><span class="deletion">-#include &quot;vector/lame_intrin.h&quot;</span></span><br><span class="line"><span class="addition">+//#include &quot;vector/lame_intrin.h&quot;</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">diff --git a/id3tag.c b/id3tag.c</span></span><br><span class="line"><span class="comment">index ac48510..8f148b8 100644</span></span><br><span class="line"><span class="comment">--- a/id3tag.c</span></span><br><span class="line"><span class="comment">+++ b/id3tag.c</span></span><br><span class="line"><span class="meta">@@ -41,17 +41,20 @@</span></span><br><span class="line"> # include &lt;string.h&gt;</span><br><span class="line"> # include &lt;ctype.h&gt;</span><br><span class="line"> #else</span><br><span class="line"><span class="deletion">-# ifndef HAVE_STRCHR</span></span><br><span class="line"><span class="deletion">-#  define strchr index</span></span><br><span class="line"><span class="deletion">-#  define strrchr rindex</span></span><br><span class="line"><span class="deletion">-# endif</span></span><br><span class="line"><span class="addition">+//# ifndef HAVE_STRCHR</span></span><br><span class="line"><span class="addition">+//#  define strchr index</span></span><br><span class="line"><span class="addition">+//#  define strrchr rindex</span></span><br><span class="line"><span class="addition">+//# endif</span></span><br><span class="line"> char   *strchr(), *strrchr();</span><br><span class="line"><span class="deletion">-# ifndef HAVE_MEMCPY</span></span><br><span class="line"><span class="deletion">-#  define memcpy(d, s, n) bcopy ((s), (d), (n))</span></span><br><span class="line"><span class="deletion">-# endif</span></span><br><span class="line"><span class="addition">+//# ifndef HAVE_MEMCPY</span></span><br><span class="line"><span class="addition">+//#  define memcpy(d, s, n) bcopy ((s), (d), (n))</span></span><br><span class="line"><span class="addition">+//# endif</span></span><br><span class="line"> #endif</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="addition">+#include &lt;malloc.h&gt;</span></span><br><span class="line"><span class="addition">+#include &lt;string.h&gt;</span></span><br><span class="line"><span class="addition">+#include &lt;stdlib.h&gt;</span></span><br><span class="line"> #include &quot;lame.h&quot;</span><br><span class="line"> #include &quot;machine.h&quot;</span><br><span class="line"> #include &quot;encoder.h&quot;</span><br><span class="line"><span class="comment">diff --git a/lame.c b/lame.c</span></span><br><span class="line"><span class="comment">index cb82225..299fd56 100644</span></span><br><span class="line"><span class="comment">--- a/lame.c</span></span><br><span class="line"><span class="comment">+++ b/lame.c</span></span><br><span class="line"><span class="meta">@@ -31,6 +31,8 @@</span></span><br><span class="line"> #endif</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="addition">+#include &lt;malloc.h&gt;</span></span><br><span class="line"><span class="addition">+#include &lt;string.h&gt;</span></span><br><span class="line"> #include &quot;lame.h&quot;</span><br><span class="line"> #include &quot;machine.h&quot;</span><br><span class="line"> </span><br><span class="line"><span class="comment">diff --git a/machine.h b/machine.h</span></span><br><span class="line"><span class="comment">index bf6fff2..c675c20 100644</span></span><br><span class="line"><span class="comment">--- a/machine.h</span></span><br><span class="line"><span class="comment">+++ b/machine.h</span></span><br><span class="line"><span class="meta">@@ -31,15 +31,15 @@</span></span><br><span class="line"> # include &lt;stdlib.h&gt;</span><br><span class="line"> # include &lt;string.h&gt;</span><br><span class="line"> #else</span><br><span class="line"><span class="deletion">-# ifndef HAVE_STRCHR</span></span><br><span class="line"><span class="deletion">-#  define strchr index</span></span><br><span class="line"><span class="deletion">-#  define strrchr rindex</span></span><br><span class="line"><span class="deletion">-# endif</span></span><br><span class="line"><span class="addition">+//# ifndef HAVE_STRCHR</span></span><br><span class="line"><span class="addition">+//#  define strchr index</span></span><br><span class="line"><span class="addition">+//#  define strrchr rindex</span></span><br><span class="line"><span class="addition">+//# endif</span></span><br><span class="line"> char   *strchr(), *strrchr();</span><br><span class="line"><span class="deletion">-# ifndef HAVE_MEMCPY</span></span><br><span class="line"><span class="deletion">-#  define memcpy(d, s, n) bcopy ((s), (d), (n))</span></span><br><span class="line"><span class="deletion">-#  define memmove(d, s, n) bcopy ((s), (d), (n))</span></span><br><span class="line"><span class="deletion">-# endif</span></span><br><span class="line"><span class="addition">+//# ifndef HAVE_MEMCPY</span></span><br><span class="line"><span class="addition">+//#  define memcpy(d, s, n) bcopy ((s), (d), (n))</span></span><br><span class="line"><span class="addition">+//#  define memmove(d, s, n) bcopy ((s), (d), (n))</span></span><br><span class="line"><span class="addition">+//# endif</span></span><br><span class="line"> #endif</span><br><span class="line"> </span><br><span class="line"> #if  defined(__riscos__)  &amp;&amp;  defined(FPA10)</span><br><span class="line"><span class="comment">diff --git a/newmdct.c b/newmdct.c</span></span><br><span class="line"><span class="comment">index 596cac9..ac98abd 100644</span></span><br><span class="line"><span class="comment">--- a/newmdct.c</span></span><br><span class="line"><span class="comment">+++ b/newmdct.c</span></span><br><span class="line"><span class="meta">@@ -30,6 +30,7 @@</span></span><br><span class="line"> # include &lt;config.h&gt;</span><br><span class="line"> #endif</span><br><span class="line"> </span><br><span class="line"><span class="addition">+#include &lt;string.h&gt;</span></span><br><span class="line"> #include &quot;lame.h&quot;</span><br><span class="line"> #include &quot;machine.h&quot;</span><br><span class="line"> #include &quot;encoder.h&quot;</span><br><span class="line"><span class="comment">diff --git a/psymodel.c b/psymodel.c</span></span><br><span class="line"><span class="comment">index 60076ee..1393c2a 100644</span></span><br><span class="line"><span class="comment">--- a/psymodel.c</span></span><br><span class="line"><span class="comment">+++ b/psymodel.c</span></span><br><span class="line"><span class="meta">@@ -145,7 +145,8 @@</span> blocktype_d[2]        block type to use for previous granule</span><br><span class="line"> #endif</span><br><span class="line"> </span><br><span class="line"> #include &lt;float.h&gt;</span><br><span class="line"><span class="deletion">-</span></span><br><span class="line"><span class="addition">+#include &lt;stdlib.h&gt;</span></span><br><span class="line"><span class="addition">+#include &lt;string.h&gt;</span></span><br><span class="line"> #include &quot;lame.h&quot;</span><br><span class="line"> #include &quot;machine.h&quot;</span><br><span class="line"> #include &quot;encoder.h&quot;</span><br><span class="line"><span class="comment">diff --git a/quantize.c b/quantize.c</span></span><br><span class="line"><span class="comment">index 9ba9c16..2906c00 100644</span></span><br><span class="line"><span class="comment">--- a/quantize.c</span></span><br><span class="line"><span class="comment">+++ b/quantize.c</span></span><br><span class="line"><span class="meta">@@ -28,6 +28,8 @@</span></span><br><span class="line"> # include &lt;config.h&gt;</span><br><span class="line"> #endif</span><br><span class="line"> </span><br><span class="line"><span class="addition">+#include &lt;stdlib.h&gt;</span></span><br><span class="line"><span class="addition">+#include &lt;string.h&gt;</span></span><br><span class="line"> #include &quot;lame.h&quot;</span><br><span class="line"> #include &quot;machine.h&quot;</span><br><span class="line"> #include &quot;encoder.h&quot;</span><br><span class="line"><span class="comment">diff --git a/quantize_pvt.c b/quantize_pvt.c</span></span><br><span class="line">:</span><br><span class="line"> #endif</span><br><span class="line"> </span><br><span class="line"> #include &lt;float.h&gt;</span><br><span class="line"><span class="deletion">-</span></span><br><span class="line"><span class="addition">+#include &lt;stdlib.h&gt;</span></span><br><span class="line"><span class="addition">+#include &lt;string.h&gt;</span></span><br><span class="line"> #include &quot;lame.h&quot;</span><br><span class="line"> #include &quot;machine.h&quot;</span><br><span class="line"> #include &quot;encoder.h&quot;</span><br><span class="line"><span class="comment">diff --git a/quantize.c b/quantize.c</span></span><br><span class="line"><span class="comment">index 9ba9c16..2906c00 100644</span></span><br><span class="line"><span class="comment">--- a/quantize.c</span></span><br><span class="line"><span class="comment">+++ b/quantize.c</span></span><br><span class="line"><span class="meta">@@ -28,6 +28,8 @@</span></span><br><span class="line"> # include &lt;config.h&gt;</span><br><span class="line"> #endif</span><br><span class="line"> </span><br><span class="line"><span class="addition">+#include &lt;stdlib.h&gt;</span></span><br><span class="line"><span class="addition">+#include &lt;string.h&gt;</span></span><br><span class="line"> #include &quot;lame.h&quot;</span><br><span class="line"> #include &quot;machine.h&quot;</span><br><span class="line"> #include &quot;encoder.h&quot;</span><br><span class="line"><span class="comment">diff --git a/quantize_pvt.c b/quantize_pvt.c</span></span><br><span class="line"><span class="comment">index d8d6447..3cd9966 100644</span></span><br><span class="line"><span class="comment">--- a/quantize_pvt.c</span></span><br><span class="line"><span class="comment">+++ b/quantize_pvt.c</span></span><br><span class="line"><span class="meta">@@ -36,6 +36,7 @@</span></span><br><span class="line"> #include &quot;reservoir.h&quot;</span><br><span class="line"> #include &quot;lame-analysis.h&quot;</span><br><span class="line"> #include &lt;float.h&gt;</span><br><span class="line"><span class="addition">+#include &lt;string.h&gt;</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> #define NSATHSCALE 100  /* Assuming dynamic range=96dB, this value should be 92 */</span><br><span class="line"><span class="comment">diff --git a/set_get.h b/set_get.h</span></span><br><span class="line"><span class="comment">index 37e4bcd..99ab73c 100644</span></span><br><span class="line"><span class="comment">--- a/set_get.h</span></span><br><span class="line"><span class="comment">+++ b/set_get.h</span></span><br><span class="line"><span class="meta">@@ -21,7 +21,7 @@</span></span><br><span class="line"> #ifndef __SET_GET_H__</span><br><span class="line"> #define __SET_GET_H__</span><br><span class="line"> </span><br><span class="line"><span class="deletion">-#include &lt;lame.h&gt;</span></span><br><span class="line"><span class="addition">+#include &quot;lame.h&quot;</span></span><br><span class="line"> </span><br><span class="line"> #if defined(__cplusplus)</span><br><span class="line"> extern  &quot;C&quot; &#123;</span><br><span class="line"><span class="comment">diff --git a/takehiro.c b/takehiro.c</span></span><br><span class="line"><span class="comment">index 67aba1b..ca02f98 100644</span></span><br><span class="line"><span class="comment">--- a/takehiro.c</span></span><br><span class="line"><span class="comment">+++ b/takehiro.c</span></span><br><span class="line"><span class="meta">@@ -27,6 +27,7 @@</span></span><br><span class="line"> #endif</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="addition">+#include &lt;string.h&gt;</span></span><br><span class="line"> #include &quot;lame.h&quot;</span><br><span class="line"> #include &quot;machine.h&quot;</span><br><span class="line"> #include &quot;encoder.h&quot;</span><br><span class="line"><span class="comment">diff --git a/util.c b/util.c</span></span><br><span class="line"><span class="comment">index 43b457c..e9255fe 100644</span></span><br><span class="line"><span class="comment">--- a/util.c</span></span><br><span class="line"><span class="comment">+++ b/util.c</span></span><br><span class="line"><span class="meta">@@ -27,6 +27,7 @@</span></span><br><span class="line"> #endif</span><br><span class="line"> </span><br><span class="line"> #include &lt;float.h&gt;</span><br><span class="line"><span class="addition">+#include &lt;malloc.h&gt;</span></span><br><span class="line"> #include &quot;lame.h&quot;</span><br><span class="line"> #include &quot;machine.h&quot;</span><br><span class="line"> #include &quot;encoder.h&quot;</span><br><span class="line"><span class="comment">diff --git a/util.h b/util.h</span></span><br><span class="line"><span class="comment">index 13f0cd4..b6bf306 100644</span></span><br><span class="line"><span class="comment">--- a/util.h</span></span><br><span class="line"><span class="comment">+++ b/util.h</span></span><br><span class="line"><span class="meta">@@ -567,7 +567,7 @@</span> extern  &quot;C&quot; &#123;</span><br><span class="line"> </span><br><span class="line"> /* log/log10 approximations */</span><br><span class="line">     extern void init_log_table(void);</span><br><span class="line"><span class="deletion">-    extern ieee754_float32_t fast_log2(ieee754_float32_t x);</span></span><br><span class="line"><span class="addition">+    extern float fast_log2(float x);</span></span><br><span class="line"> </span><br><span class="line">     int     isResamplingNecessary(SessionConfig_t const* cfg);</span><br><span class="line"> </span><br><span class="line"><span class="comment">diff --git a/vbrquantize.c b/vbrquantize.c</span></span><br><span class="line"><span class="comment">index 0f703b7..60834d3 100644</span></span><br><span class="line"><span class="comment">--- a/vbrquantize.c</span></span><br><span class="line"><span class="comment">+++ b/vbrquantize.c</span></span><br><span class="line"><span class="meta">@@ -27,6 +27,8 @@</span></span><br><span class="line"> #endif</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="addition">+#include &lt;stdlib.h&gt;</span></span><br><span class="line"><span class="addition">+#include &lt;string.h&gt;</span></span><br><span class="line"> #include &quot;lame.h&quot;</span><br><span class="line"> #include &quot;machine.h&quot;</span><br><span class="line"> #include &quot;encoder.h&quot;</span><br></pre></td></tr></table></figure><h3 id="编写CmakeList-txt"><a href="#编写CmakeList-txt" class="headerlink" title="编写CmakeList.txt"></a>编写CmakeList.txt</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.6</span>.<span class="number">0</span>)</span><br><span class="line"><span class="keyword">set</span>(CURRENT_DIR <span class="variable">$&#123;CMAKE_SOURCE_DIR&#125;</span>)</span><br><span class="line"><span class="keyword">message</span>(<span class="string">&quot;CURRENT_DIR:&quot;</span> <span class="variable">$&#123;CMAKE_SOURCE_DIR&#125;</span>)</span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;CMAKE_SOURCE_DIR&#125;</span>src/main/cpp/lame)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(LAME_DIR src/main/cpp/lame)</span><br><span class="line"><span class="keyword">message</span>(<span class="string">&quot;LAME_DIR:&quot;</span> <span class="variable">$&#123;LAME_DIR&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">aux_source_directory</span>(src/main/cpp/lame SRC_LIST)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_library</span>(mp3lame</span><br><span class="line">        SHARED</span><br><span class="line">        src/main/cpp/MP3Recorder.c</span><br><span class="line">        <span class="variable">$&#123;SRC_LIST&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#add_library(mp3lame</span></span><br><span class="line"><span class="comment">#        SHARED</span></span><br><span class="line"><span class="comment">#        src/main/cpp/MP3Recorder.c</span></span><br><span class="line"><span class="comment">#        src/main/cpp/lame/bitstream.c</span></span><br><span class="line"><span class="comment">#        src/main/cpp/lame/fft.c</span></span><br><span class="line"><span class="comment">#        src/main/cpp/lame/id3tag.c</span></span><br><span class="line"><span class="comment">#        src/main/cpp/lame/mpglib_interface.c</span></span><br><span class="line"><span class="comment">#        src/main/cpp/lame/presets.c</span></span><br><span class="line"><span class="comment">#        src/main/cpp/lame/quantize.c</span></span><br><span class="line"><span class="comment">#        src/main/cpp/lame/reservoir.c</span></span><br><span class="line"><span class="comment">#        src/main/cpp/lame/tables.c</span></span><br><span class="line"><span class="comment">#        src/main/cpp/lame/util.c</span></span><br><span class="line"><span class="comment">#        src/main/cpp/lame/VbrTag.c</span></span><br><span class="line"><span class="comment">#        src/main/cpp/lame/encoder.c</span></span><br><span class="line"><span class="comment">#        src/main/cpp/lame/gain_analysis.c</span></span><br><span class="line"><span class="comment">#        src/main/cpp/lame/lame.c</span></span><br><span class="line"><span class="comment">#        src/main/cpp/lame/newmdct.c</span></span><br><span class="line"><span class="comment">#        src/main/cpp/lame/psymodel.c</span></span><br><span class="line"><span class="comment">#        src/main/cpp/lame/quantize_pvt.c</span></span><br><span class="line"><span class="comment">#        src/main/cpp/lame/set_get.c</span></span><br><span class="line"><span class="comment">#        src/main/cpp/lame/takehiro.c</span></span><br><span class="line"><span class="comment">#        src/main/cpp/lame/vbrquantize.c</span></span><br><span class="line"><span class="comment">#        src/main/cpp/lame/version.c)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">find_library</span>( <span class="comment"># Sets the name of the path variable.</span></span><br><span class="line">        log-lib</span><br><span class="line">        log)</span><br><span class="line"></span><br><span class="line"><span class="keyword">target_link_libraries</span>(mp3lame</span><br><span class="line">        <span class="variable">$&#123;log-lib&#125;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>（可参考<a href="https://github.com/xmaihh/MFSocket/blob/master/liblame/CMakeLists.txt%EF%BC%89">https://github.com/xmaihh/MFSocket/blob/master/liblame/CMakeLists.txt）</a></p><h3 id="编写-java-类和-c-文件"><a href="#编写-java-类和-c-文件" class="headerlink" title="编写 java 类和 c 文件"></a>编写 java 类和 c 文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MP3Recorder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">     System.loadLibrary(<span class="string">&quot;mp3lame&quot;</span>);   </span><br><span class="line">  &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化 lame编码器</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inSampleRate</span></span><br><span class="line"><span class="comment">     *              输入采样率</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> outChannel</span></span><br><span class="line"><span class="comment">     *              声道数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> outSampleRate</span></span><br><span class="line"><span class="comment">     *              输出采样率</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> outBitrate</span></span><br><span class="line"><span class="comment">     *              比特率(kbps)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> quality</span></span><br><span class="line"><span class="comment">     *              0~9，0最好</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> inSampleRate, <span class="keyword">int</span> outChannel, <span class="keyword">int</span> outSampleRate, <span class="keyword">int</span> outBitrate, <span class="keyword">int</span> quality)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  编码，把 AudioRecord 录制的 PCM 数据转换成 mp3 格式</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> buffer_l</span></span><br><span class="line"><span class="comment">     *          左声道输入数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> buffer_r</span></span><br><span class="line"><span class="comment">     *          右声道输入数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> samples</span></span><br><span class="line"><span class="comment">     *          输入数据的size</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mp3buf</span></span><br><span class="line"><span class="comment">     *          输出数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     *          输出到mp3buf的byte数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">encode</span><span class="params">(<span class="keyword">short</span>[] buffer_l, <span class="keyword">short</span>[] buffer_r, <span class="keyword">int</span> samples, <span class="keyword">byte</span>[] mp3buf)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  刷写</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mp3buf</span></span><br><span class="line"><span class="comment">     *          mp3数据缓存区</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     *          返回刷写的数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">flush</span><span class="params">(<span class="keyword">byte</span>[] mp3buf)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭 lame 编码器，释放资源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生成.h文件</p><p><a href="https://xmaihh.github.io/2019/07/31/AndroidStudio%E5%BF%AB%E9%80%9F%E7%94%9F%E6%88%90jni%E5%A4%B4%E6%96%87%E4%BB%B6/">AndroidStudio快速生成jni头文件</a></p><p>编写MP3Recorder.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;lame/lame.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;MP3Recorder.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> lame_global_flags *glf = <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Class:     com_android_liblame_MP3Recorder</span></span><br><span class="line"><span class="comment"> * Method:    init</span></span><br><span class="line"><span class="comment"> * Signature: (IIIII)V</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">JNIEXPORT <span class="keyword">void</span> JNICALL Java_com_android_liblame_MP3Recorder_init</span><br><span class="line">        (JNIEnv *env, jclass instance, jint inSamplerate, jint outChannel, jint outSamplerate,</span><br><span class="line">         jint outBitrate, jint quality) &#123;</span><br><span class="line">    <span class="keyword">if</span> (glf != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        lame_close(glf);</span><br><span class="line">        glf = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    glf = lame_init();</span><br><span class="line">    lame_set_in_samplerate(glf, inSamplerate);</span><br><span class="line">    lame_set_num_channels(glf, outChannel);</span><br><span class="line">    lame_set_out_samplerate(glf, outSamplerate);</span><br><span class="line">    lame_set_brate(glf, outBitrate);</span><br><span class="line">    lame_set_quality(glf, quality);</span><br><span class="line">    lame_init_params(glf);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Class:     com_android_liblame_MP3Recorder</span></span><br><span class="line"><span class="comment"> * Method:    encode</span></span><br><span class="line"><span class="comment"> * Signature: ([S[SI[B)I</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">JNIEXPORT jint JNICALL Java_com_android_liblame_MP3Recorder_encode</span><br><span class="line">        (JNIEnv *env, jclass instance, jshortArray buffer_l, jshortArray buffer_r, jint samples,</span><br><span class="line">         jbyteArray mp3buf) &#123;</span><br><span class="line">    jshort *j_buffer_l = (*env)-&gt;GetShortArrayElements(env, buffer_l, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    jshort *j_buffer_r = (*env)-&gt;GetShortArrayElements(env, buffer_r, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> jsize mp3buf_size = (*env)-&gt;GetArrayLength(env, mp3buf);</span><br><span class="line">    jbyte *j_mp3buf = (*env)-&gt;GetByteArrayElements(env, mp3buf, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> result = lame_encode_buffer(glf, j_buffer_l, j_buffer_r,</span><br><span class="line">                                    samples, j_mp3buf, mp3buf_size);</span><br><span class="line"></span><br><span class="line">    (*env)-&gt;ReleaseShortArrayElements(env, buffer_l, j_buffer_l, <span class="number">0</span>);</span><br><span class="line">    (*env)-&gt;ReleaseShortArrayElements(env, buffer_r, j_buffer_r, <span class="number">0</span>);</span><br><span class="line">    (*env)-&gt;ReleaseByteArrayElements(env, mp3buf, j_mp3buf, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Class:     com_android_liblame_MP3Recorder</span></span><br><span class="line"><span class="comment"> * Method:    flush</span></span><br><span class="line"><span class="comment"> * Signature: ([B)I</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">JNIEXPORT jint JNICALL Java_com_android_liblame_MP3Recorder_flush</span><br><span class="line">        (JNIEnv *env, jclass instance, jbyteArray mp3buf) &#123;</span><br><span class="line">    <span class="keyword">const</span> jsize mp3buf_size = (*env)-&gt;GetArrayLength(env, mp3buf);</span><br><span class="line">    jbyte *j_mp3buf = (*env)-&gt;GetByteArrayElements(env, mp3buf, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> result = lame_encode_flush(glf, j_mp3buf, mp3buf_size);</span><br><span class="line"></span><br><span class="line">    (*env)-&gt;ReleaseByteArrayElements(env, mp3buf, j_mp3buf, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Class:     com_android_liblame_MP3Recorder</span></span><br><span class="line"><span class="comment"> * Method:    close</span></span><br><span class="line"><span class="comment"> * Signature: ()V</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">JNIEXPORT <span class="keyword">void</span> JNICALL Java_com_android_liblame_MP3Recorder_close</span><br><span class="line">        (JNIEnv *env, jclass instance) &#123;</span><br><span class="line">    lame_close(glf);</span><br><span class="line">    glf = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置build-gradle"><a href="#配置build-gradle" class="headerlink" title="配置build.gradle"></a>配置<code>build.gradle</code></h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">....</span><br><span class="line">...</span><br><span class="line">..</span><br><span class="line">.</span><br><span class="line">   <span class="comment">//*</span></span><br><span class="line">    externalNativeBuild &#123;</span><br><span class="line">        cmake &#123;</span><br><span class="line">            path <span class="string">&quot;CMakeLists.txt&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>点一下小锤子 :hammer: MakeProject。</p><p>编译生成 so库。</p><h3 id="录制MP3格式音频"><a href="#录制MP3格式音频" class="headerlink" title="录制MP3格式音频"></a>录制MP3格式音频</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 录音状态</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isRecording;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//开始录音</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">record</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 音源</span></span><br><span class="line">                <span class="keyword">int</span> audioSource = MediaRecorder.AudioSource.MIC;</span><br><span class="line">                <span class="comment">// 采样率</span></span><br><span class="line">                <span class="keyword">int</span> sampleRate = <span class="number">44100</span>;</span><br><span class="line">                <span class="comment">// 声道</span></span><br><span class="line">                <span class="keyword">int</span> channelConfig = AudioFormat.CHANNEL_IN_MONO;<span class="comment">//单声道</span></span><br><span class="line">                <span class="comment">// 采样位数</span></span><br><span class="line">                <span class="keyword">int</span> audioFormat = AudioFormat.ENCODING_PCM_16BIT;</span><br><span class="line">                <span class="comment">// 录音缓存区大小</span></span><br><span class="line">                <span class="keyword">int</span> bufferSizeInBytes;</span><br><span class="line">                <span class="comment">// 文件输出流</span></span><br><span class="line">                FileOutputStream fos;</span><br><span class="line">                <span class="comment">// 录音最小缓存大小</span></span><br><span class="line">                bufferSizeInBytes = AudioRecord.getMinBufferSize(sampleRate, channelConfig, audioFormat);</span><br><span class="line">                AudioRecord audioRecord = <span class="keyword">new</span> AudioRecord(audioSource, sampleRate, channelConfig, audioFormat, bufferSizeInBytes);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fos = <span class="keyword">new</span> FileOutputStream(getExternalCacheDir() + <span class="string">&quot;/demo.mp3&quot;</span>);</span><br><span class="line">                    MP3Recorder.init(sampleRate, <span class="number">2</span>, sampleRate, <span class="number">128</span>, <span class="number">5</span>);</span><br><span class="line">                    <span class="keyword">short</span>[] buffer = <span class="keyword">new</span> <span class="keyword">short</span>[bufferSizeInBytes];</span><br><span class="line">                    <span class="keyword">byte</span>[] mp3buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[(<span class="keyword">int</span>) (<span class="number">7200</span> + buffer.length * <span class="number">1.25</span>)];</span><br><span class="line">                    audioRecord.startRecording();</span><br><span class="line">                    isRecording = <span class="keyword">true</span>;</span><br><span class="line">                    <span class="keyword">while</span> (isRecording &amp;&amp; audioRecord.getRecordingState() == AudioRecord.RECORDSTATE_RECORDING) &#123;</span><br><span class="line">                        <span class="keyword">int</span> readSize = audioRecord.read(buffer, <span class="number">0</span>, bufferSizeInBytes);</span><br><span class="line">                        <span class="keyword">if</span> (readSize &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="keyword">int</span> encodeSize = MP3Recorder.encode(buffer, buffer, readSize, mp3buffer);</span><br><span class="line">                            <span class="keyword">if</span> (encodeSize &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                                <span class="keyword">try</span> &#123;</span><br><span class="line">                                    fos.write(mp3buffer, <span class="number">0</span>, encodeSize);</span><br><span class="line">                                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                                    e.printStackTrace();</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">int</span> flushSize = MP3Recorder.flush(mp3buffer);</span><br><span class="line">                    <span class="keyword">if</span> (flushSize &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            fos.write(mp3buffer, <span class="number">0</span>, flushSize);</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        fos.close();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    audioRecord.stop();</span><br><span class="line">                    audioRecord.release();</span><br><span class="line">                    MP3Recorder.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"> <span class="comment">// 停止录音</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        isRecording = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="音频解码"><a href="#音频解码" class="headerlink" title="音频解码"></a>音频解码</h1><p> 想要转换音频格式（如 mp3格式转 wav格式）或者添加背景音乐，都需要解码声音文件。<br> Android SDK 中提供了解码的 API，它就是 MediaCodec，也就是音频解码器，我们用它实现 mp3格式音频的解码：<br>把mp3格式转wav格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startDecoding</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="comment">// 待解码声音文件路径</span></span><br><span class="line">       String filePath = getExternalCacheDir() + <span class="string">&quot;/bg.mp3&quot;</span>;</span><br><span class="line">       <span class="comment">// 音/视频 提取器</span></span><br><span class="line">       MediaExtractor mediaExtractor = <span class="keyword">new</span> MediaExtractor(); <span class="keyword">try</span> &#123;</span><br><span class="line">           mediaExtractor.setDataSource(filePath);</span><br><span class="line">           <span class="comment">// 分离音频用的，获取音频数据</span></span><br><span class="line">           MediaFormat mediaFormat = mediaExtractor.getTrackFormat(<span class="number">0</span>);</span><br><span class="line">         <span class="comment">/*// 获取采样率</span></span><br><span class="line"><span class="comment">           int sampleRate = mediaFormat.getInteger(MediaFormat.KEY_SAMPLE_RATE);</span></span><br><span class="line"><span class="comment">           // 获取声道数</span></span><br><span class="line"><span class="comment">           int channelCount = mediaFormat.getInteger(MediaFormat.KEY_CHANNEL_COUNT);</span></span><br><span class="line"><span class="comment">           // 获取时长</span></span><br><span class="line"><span class="comment">           long duration = mediaFormat.getLong(MediaFormat.KEY_DURATION);*/</span></span><br><span class="line">           <span class="comment">// 获取类型</span></span><br><span class="line">           String mime = mediaFormat.getString(MediaFormat.KEY_MIME);</span><br><span class="line">         <span class="comment">/*System.out.println(&quot;sampleRate:&quot; + sampleRate + &quot;,channelCount:&quot; +</span></span><br><span class="line"><span class="comment">           channelCount + &quot;,duration:&quot; + duration + &quot;,mime:&quot; + mime );*/</span></span><br><span class="line">           </span><br><span class="line">           <span class="comment">// 选择音轨</span></span><br><span class="line">           mediaExtractor.selectTrack(<span class="number">0</span>);</span><br><span class="line">           <span class="comment">// 解码器</span></span><br><span class="line">           MediaCodec mediaCodec = MediaCodec.createDecoderByType(mime);</span><br><span class="line">           <span class="comment">// 配置解码器</span></span><br><span class="line">           mediaCodec.configure(mediaFormat, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="number">0</span>);</span><br><span class="line">           <span class="comment">// 开始解码</span></span><br><span class="line">           mediaCodec.start();</span><br><span class="line">           </span><br><span class="line">           <span class="comment">// 解码器在此缓存中获取输入数据</span></span><br><span class="line">           ByteBuffer[] inputBuffers = mediaCodec.getInputBuffers();</span><br><span class="line">           <span class="comment">// 编码器将解码后的数据放入此缓存中，保存的是pcm数据</span></span><br><span class="line">           ByteBuffer[] outputBuffers = mediaCodec.getOutputBuffers();</span><br><span class="line">           <span class="comment">// 用于描述解码得到的byte[]数据的相关信息</span></span><br><span class="line">           MediaCodec.BufferInfo bufferInfo = <span class="keyword">new</span> MediaCodec.BufferInfo();</span><br><span class="line">           </span><br><span class="line">           <span class="comment">// 创建随机读写流</span></span><br><span class="line">           RandomAccessFile raf = <span class="keyword">new</span> RandomAccessFile(getExternalCacheDir() + <span class="string">&quot;/demo.wav&quot;</span>, <span class="string">&quot;rw&quot;</span>);</span><br><span class="line">           <span class="comment">// 留出文件头的位置</span></span><br><span class="line">           raf.seek(<span class="number">44</span>);</span><br><span class="line">           <span class="comment">// 解码状态</span></span><br><span class="line">           <span class="keyword">boolean</span> isDecoding = <span class="keyword">true</span>;</span><br><span class="line">           main:</span><br><span class="line">           <span class="keyword">while</span> (isDecoding) &#123;</span><br><span class="line">               <span class="keyword">for</span> (ByteBuffer ib : inputBuffers) &#123;</span><br><span class="line">                   <span class="comment">// 获取输入缓存器</span></span><br><span class="line">                   <span class="keyword">int</span> inputIndex = mediaCodec.dequeueInputBuffer(-<span class="number">1</span>);</span><br><span class="line">                   <span class="keyword">if</span> (inputIndex &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                       <span class="keyword">break</span> main;</span><br><span class="line">                   &#125;</span><br><span class="line">                   ByteBuffer inputBuffer = inputBuffers[inputIndex];</span><br><span class="line">                   <span class="comment">// 读取数据到输入缓存器</span></span><br><span class="line">                   <span class="keyword">int</span> sampleSize = mediaExtractor.readSampleData(inputBuffer, <span class="number">0</span>);</span><br><span class="line">                   <span class="keyword">if</span> (sampleSize &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                       isDecoding = <span class="keyword">false</span>;</span><br><span class="line">                   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                       <span class="comment">// 通知解码器输入了数据</span></span><br><span class="line">                       mediaCodec.queueInputBuffer(inputIndex, <span class="number">0</span>, sampleSize, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">                       <span class="comment">// 移动到下一取样处</span></span><br><span class="line">                       mediaExtractor.advance();</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">               </span><br><span class="line">               <span class="comment">// 获取输出缓存器</span></span><br><span class="line">               <span class="keyword">int</span> outputIndex = mediaCodec.dequeueOutputBuffer(bufferInfo, <span class="number">10000</span>);</span><br><span class="line">               <span class="keyword">if</span> (outputIndex == -<span class="number">2</span>) &#123;</span><br><span class="line">                   <span class="comment">// 格式变了，重新获取一次</span></span><br><span class="line">                   outputIndex = mediaCodec.dequeueOutputBuffer(bufferInfo, <span class="number">10000</span>);</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="comment">// 拿到用于存放PCM数据的buffer</span></span><br><span class="line">               ByteBuffer outputBuffer;</span><br><span class="line">               <span class="comment">// PCM数据</span></span><br><span class="line">               <span class="keyword">byte</span>[] chunckPCM;</span><br><span class="line">               </span><br><span class="line">               <span class="keyword">while</span> (outputIndex &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                   <span class="comment">// 拿到用于存放PCM数据的buffer</span></span><br><span class="line">                   outputBuffer = outputBuffers[outputIndex];</span><br><span class="line">                   <span class="comment">// bufferInfo 定义了次数据块的大小</span></span><br><span class="line">                   chunckPCM = <span class="keyword">new</span> <span class="keyword">byte</span>[bufferInfo.size];</span><br><span class="line">                   <span class="comment">// 将buffer内的数据取出到字节数组中</span></span><br><span class="line">                   outputBuffer.get(chunckPCM);</span><br><span class="line">                   <span class="comment">// 数据取出后，一定记得清空，mediaCodec是反复使用这些buffer的</span></span><br><span class="line">                   outputBuffer.clear();</span><br><span class="line">                   <span class="comment">// 输出PCM数据到文件夹</span></span><br><span class="line">                   raf.write(chunckPCM, <span class="number">0</span>, bufferInfo.size);</span><br><span class="line">                   <span class="comment">// 释放输出buffer，不然mediaCodec用完所有buffer后，就不再向外输出数据</span></span><br><span class="line">                   mediaCodec.releaseOutputBuffer(outputIndex, <span class="keyword">false</span>);</span><br><span class="line">                   <span class="comment">// 再次获取数据,如果没有数据则outputIndex=-1,结束循环</span></span><br><span class="line">                   outputIndex = mediaCodec.dequeueOutputBuffer(bufferInfo, <span class="number">10000</span>);</span><br><span class="line">               &#125;</span><br><span class="line">               </span><br><span class="line">           &#125;</span><br><span class="line">           WriteWaveFileHeader(raf, raf.length(), <span class="number">44100</span>, <span class="number">1</span>, <span class="number">44100</span> * <span class="number">16</span> / <span class="number">8</span>);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 为 wav 文件添加文件头，前提是在头部预留了 44字节空间</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> raf        随机读写流</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> fileLength 文件总长</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> sampleRate 采样率</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> channels   声道数量</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> byteRate   码率 = 采样率 * 采样位数 * 声道数 / 8</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">WriteWaveFileHeader</span><span class="params">(RandomAccessFile raf, <span class="keyword">long</span> fileLength, <span class="keyword">long</span> sampleRate, <span class="keyword">int</span> channels, <span class="keyword">long</span> byteRate)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">       <span class="keyword">long</span> totalDataLen = fileLength + <span class="number">36</span>;</span><br><span class="line">       <span class="keyword">byte</span>[] header = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">44</span>];</span><br><span class="line">       header[<span class="number">0</span>] = <span class="string">&#x27;R&#x27;</span>; <span class="comment">// RIFF/WAVE header</span></span><br><span class="line">       header[<span class="number">1</span>] = <span class="string">&#x27;I&#x27;</span>;</span><br><span class="line">       header[<span class="number">2</span>] = <span class="string">&#x27;F&#x27;</span>;</span><br><span class="line">       header[<span class="number">3</span>] = <span class="string">&#x27;F&#x27;</span>;</span><br><span class="line">       header[<span class="number">4</span>] = (<span class="keyword">byte</span>) (totalDataLen &amp; <span class="number">0xff</span>);</span><br><span class="line">       header[<span class="number">5</span>] = (<span class="keyword">byte</span>) ((totalDataLen &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xff</span>);</span><br><span class="line">       header[<span class="number">6</span>] = (<span class="keyword">byte</span>) ((totalDataLen &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>);</span><br><span class="line">       header[<span class="number">7</span>] = (<span class="keyword">byte</span>) ((totalDataLen &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xff</span>);</span><br><span class="line">       header[<span class="number">8</span>] = <span class="string">&#x27;W&#x27;</span>;</span><br><span class="line">       header[<span class="number">9</span>] = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">       header[<span class="number">10</span>] = <span class="string">&#x27;V&#x27;</span>;</span><br><span class="line">       header[<span class="number">11</span>] = <span class="string">&#x27;E&#x27;</span>;</span><br><span class="line">       header[<span class="number">12</span>] = <span class="string">&#x27;f&#x27;</span>; <span class="comment">// &#x27;fmt &#x27; chunk</span></span><br><span class="line">       header[<span class="number">13</span>] = <span class="string">&#x27;m&#x27;</span>;</span><br><span class="line">       header[<span class="number">14</span>] = <span class="string">&#x27;t&#x27;</span>;</span><br><span class="line">       header[<span class="number">15</span>] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">       header[<span class="number">16</span>] = <span class="number">16</span>; <span class="comment">// 4 bytes: size of &#x27;fmt &#x27; chunk</span></span><br><span class="line">       header[<span class="number">17</span>] = <span class="number">0</span>;</span><br><span class="line">       header[<span class="number">18</span>] = <span class="number">0</span>;</span><br><span class="line">       header[<span class="number">19</span>] = <span class="number">0</span>;</span><br><span class="line">       header[<span class="number">20</span>] = <span class="number">1</span>; <span class="comment">// format = 1</span></span><br><span class="line">       header[<span class="number">21</span>] = <span class="number">0</span>;</span><br><span class="line">       header[<span class="number">22</span>] = (<span class="keyword">byte</span>) channels;</span><br><span class="line">       header[<span class="number">23</span>] = <span class="number">0</span>;</span><br><span class="line">       header[<span class="number">24</span>] = (<span class="keyword">byte</span>) (sampleRate &amp; <span class="number">0xff</span>);</span><br><span class="line">       header[<span class="number">25</span>] = (<span class="keyword">byte</span>) ((sampleRate &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xff</span>);</span><br><span class="line">       header[<span class="number">26</span>] = (<span class="keyword">byte</span>) ((sampleRate &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>);</span><br><span class="line">       header[<span class="number">27</span>] = (<span class="keyword">byte</span>) ((sampleRate &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xff</span>);</span><br><span class="line">       header[<span class="number">28</span>] = (<span class="keyword">byte</span>) (byteRate &amp; <span class="number">0xff</span>);</span><br><span class="line">       header[<span class="number">29</span>] = (<span class="keyword">byte</span>) ((byteRate &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xff</span>);</span><br><span class="line">       header[<span class="number">30</span>] = (<span class="keyword">byte</span>) ((byteRate &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>);</span><br><span class="line">       header[<span class="number">31</span>] = (<span class="keyword">byte</span>) ((byteRate &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xff</span>);</span><br><span class="line">       header[<span class="number">32</span>] = (<span class="keyword">byte</span>) (<span class="number">2</span> * <span class="number">16</span> / <span class="number">8</span>); <span class="comment">// block align</span></span><br><span class="line">       header[<span class="number">33</span>] = <span class="number">0</span>;</span><br><span class="line">       header[<span class="number">34</span>] = <span class="number">16</span>; <span class="comment">// bits per sample</span></span><br><span class="line">       header[<span class="number">35</span>] = <span class="number">0</span>;</span><br><span class="line">       header[<span class="number">36</span>] = <span class="string">&#x27;d&#x27;</span>;</span><br><span class="line">       header[<span class="number">37</span>] = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">       header[<span class="number">38</span>] = <span class="string">&#x27;t&#x27;</span>;</span><br><span class="line">       header[<span class="number">39</span>] = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">       header[<span class="number">40</span>] = (<span class="keyword">byte</span>) (fileLength &amp; <span class="number">0xff</span>);</span><br><span class="line">       header[<span class="number">41</span>] = (<span class="keyword">byte</span>) ((fileLength &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xff</span>);</span><br><span class="line">       header[<span class="number">42</span>] = (<span class="keyword">byte</span>) ((fileLength &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>);</span><br><span class="line">       header[<span class="number">43</span>] = (<span class="keyword">byte</span>) ((fileLength &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xff</span>);</span><br><span class="line">       raf.seek(<span class="number">0</span>);</span><br><span class="line">       raf.write(header, <span class="number">0</span>, <span class="number">44</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h1 id="录音添加背景音乐并实时播放，类似K歌效果"><a href="#录音添加背景音乐并实时播放，类似K歌效果" class="headerlink" title="录音添加背景音乐并实时播放，类似K歌效果"></a>录音添加背景音乐并实时播放，类似K歌效果</h1><p>K歌类 APP 都是录音加伴奏，这里实现 mp3 格式的背景音乐解码，与录音合并，并最终输出 mp3 格式的文件。即边录音边解码边合成，录音结束即合并结束。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 录音状态</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> isRecording;</span><br><span class="line"></span><br><span class="line"><span class="comment">//开始录音</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">record</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 音源</span></span><br><span class="line">            <span class="keyword">int</span> audioSource = MediaRecorder.AudioSource.MIC;</span><br><span class="line">            <span class="comment">// 采样率</span></span><br><span class="line">            <span class="keyword">int</span> sampleRate = <span class="number">44100</span>;</span><br><span class="line">            <span class="comment">// 声道</span></span><br><span class="line">            <span class="keyword">int</span> channelConfig = AudioFormat.CHANNEL_IN_MONO;<span class="comment">//单声道</span></span><br><span class="line">            <span class="comment">// 采样位数</span></span><br><span class="line">            <span class="keyword">int</span> audioFormat = AudioFormat.ENCODING_PCM_16BIT;</span><br><span class="line">            <span class="comment">// 录音最小缓存区大小</span></span><br><span class="line">            <span class="keyword">int</span> bufferSizeInBytes = AudioRecord.getMinBufferSize(sampleRate, channelConfig, audioFormat);</span><br><span class="line">            <span class="comment">// 录音对象</span></span><br><span class="line">            AudioRecord audioRecord = <span class="keyword">new</span> AudioRecord(audioSource, sampleRate, channelConfig, audioFormat, bufferSizeInBytes);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 音轨提取器</span></span><br><span class="line">                MediaExtractor mediaExtractor = <span class="keyword">new</span> MediaExtractor();</span><br><span class="line">                <span class="comment">// 给音轨提取器设置文件路径</span></span><br><span class="line">                mediaExtractor.setDataSource(getExternalCacheDir() + <span class="string">&quot;/bg.mp3&quot;</span>);</span><br><span class="line">                <span class="comment">// 获取音频格式信息</span></span><br><span class="line">                MediaFormat mediaFormat = mediaExtractor.getTrackFormat(<span class="number">0</span>);</span><br><span class="line">                <span class="comment">// 获取音频类型</span></span><br><span class="line">                String mime = mediaFormat.getString(MediaFormat.KEY_MIME);</span><br><span class="line">                <span class="comment">// 选中音轨</span></span><br><span class="line">                mediaExtractor.selectTrack(<span class="number">0</span>);</span><br><span class="line">                <span class="comment">// 构造解码器</span></span><br><span class="line">                MediaCodec mediaCodec = MediaCodec.createDecoderByType(mime);</span><br><span class="line">                <span class="comment">// 配置解码器</span></span><br><span class="line">                mediaCodec.configure(mediaFormat, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="number">0</span>);</span><br><span class="line">                <span class="comment">// 开始解码</span></span><br><span class="line">                mediaCodec.start();</span><br><span class="line">                <span class="comment">// 解码器在此缓存中获取输入数据</span></span><br><span class="line">                ByteBuffer[] inputBuffers = mediaCodec.getInputBuffers();</span><br><span class="line">                <span class="comment">// 编码器将解码后的数据放入此缓存中，存放的是pcm数据</span></span><br><span class="line">                ByteBuffer[] outputBuffers = mediaCodec.getOutputBuffers();</span><br><span class="line">                <span class="comment">// 用于描述解码得到的byte[]数据的相关信息</span></span><br><span class="line">                MediaCodec.BufferInfo bufferInfo = <span class="keyword">new</span> MediaCodec.BufferInfo();</span><br><span class="line">                <span class="comment">// 背景音乐解码后的数据输出流，先存储，然后读取再和录音合并</span></span><br><span class="line">                FileOutputStream fos_wav = <span class="keyword">new</span> FileOutputStream(getExternalCacheDir() + <span class="string">&quot;/demo.wav&quot;</span>);</span><br><span class="line">                <span class="comment">// 读取处理好的背景音乐，和录音合并</span></span><br><span class="line">                RandomAccessFile raf = <span class="keyword">new</span> RandomAccessFile(getExternalCacheDir() + <span class="string">&quot;/demo.wav&quot;</span>, <span class="string">&quot;rw&quot;</span>);</span><br><span class="line">                <span class="comment">// 背景音字节数</span></span><br><span class="line">                <span class="keyword">long</span> length = <span class="number">0</span>;</span><br><span class="line">                <span class="comment">// 存储大小端</span></span><br><span class="line">                <span class="keyword">boolean</span> isBigEnding = ByteOrder.nativeOrder() == ByteOrder.BIG_ENDIAN;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 录音缓存</span></span><br><span class="line">                <span class="keyword">short</span>[] buffer = <span class="keyword">new</span> <span class="keyword">short</span>[bufferSizeInBytes];</span><br><span class="line">                <span class="comment">// 最终生成的mp3数据的缓存器</span></span><br><span class="line">                <span class="keyword">byte</span>[] mp3buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[(<span class="keyword">int</span>) (<span class="number">7200</span> + buffer.length * <span class="number">1.25</span>)];</span><br><span class="line">                <span class="comment">// 开始录音</span></span><br><span class="line">                audioRecord.startRecording();</span><br><span class="line">                <span class="comment">// 录音状态</span></span><br><span class="line">                isRecording = <span class="keyword">true</span>;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 最终文件输出流</span></span><br><span class="line">                FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(getExternalCacheDir() + <span class="string">&quot;/demo.mp3&quot;</span>);</span><br><span class="line">                <span class="comment">// mp3编码器初始化</span></span><br><span class="line">                MP3Recorder.init(sampleRate, <span class="number">1</span>, sampleRate, <span class="number">128</span>, <span class="number">5</span>);</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">while</span> (isRecording) &#123;</span><br><span class="line">                    <span class="comment">// 读取录音</span></span><br><span class="line">                    <span class="keyword">int</span> readSize = audioRecord.read(buffer, <span class="number">0</span>, bufferSizeInBytes);</span><br><span class="line">                    </span><br><span class="line">                    <span class="comment">// 解码背景音乐</span></span><br><span class="line">                    <span class="keyword">for</span> (ByteBuffer ib : inputBuffers) &#123;</span><br><span class="line">                        <span class="comment">// 获取输入缓存器</span></span><br><span class="line">                        <span class="keyword">int</span> inputIndex = mediaCodec.dequeueInputBuffer(<span class="number">0</span>);</span><br><span class="line">                        <span class="keyword">if</span> (inputIndex &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        ByteBuffer inputBuffer = inputBuffers[inputIndex];</span><br><span class="line">                        <span class="comment">// 读取数据到输入缓存器</span></span><br><span class="line">                        <span class="keyword">int</span> sampleSize = mediaExtractor.readSampleData(inputBuffer, <span class="number">0</span>);</span><br><span class="line">                        <span class="keyword">if</span> (sampleSize &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="comment">// 通知解码器输入了数据</span></span><br><span class="line">                            mediaCodec.queueInputBuffer(inputIndex, <span class="number">0</span>, sampleSize, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">                            <span class="comment">// 移动到下一取样处</span></span><br><span class="line">                            mediaExtractor.advance();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 输出缓存器</span></span><br><span class="line">                    <span class="keyword">int</span> outputIndex = mediaCodec.dequeueOutputBuffer(bufferInfo, <span class="number">0</span>);</span><br><span class="line">                    <span class="keyword">if</span> (outputIndex == -<span class="number">2</span>) &#123;</span><br><span class="line">                        <span class="comment">// 格式变了，重新获取一次</span></span><br><span class="line">                        outputIndex = mediaCodec.dequeueOutputBuffer(bufferInfo, <span class="number">0</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 拿到用于存放PCM数据的buffer</span></span><br><span class="line">                    ByteBuffer outputBuffer;</span><br><span class="line">                    <span class="comment">// PCM数据</span></span><br><span class="line">                    <span class="keyword">byte</span>[] chunckPCM;</span><br><span class="line">                    <span class="comment">// 循环读取解码数据</span></span><br><span class="line">                    <span class="keyword">while</span> (outputIndex &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="comment">// 拿到用于存放PCM数据的buffer</span></span><br><span class="line">                        outputBuffer = outputBuffers[outputIndex];</span><br><span class="line">                        <span class="comment">// bufferInfo 定义了数据块的大小</span></span><br><span class="line">                        chunckPCM = <span class="keyword">new</span> <span class="keyword">byte</span>[bufferInfo.size];</span><br><span class="line">                        <span class="comment">// 将buffer内的数据取出到字节数组中</span></span><br><span class="line">                        outputBuffer.get(chunckPCM);</span><br><span class="line">                        <span class="comment">// 数据取出后，一定记得清空，mediaCodec是反复使用这些buffer的</span></span><br><span class="line">                        outputBuffer.clear();</span><br><span class="line">                        <span class="comment">// 输出PCM数据到文件夹</span></span><br><span class="line">                        fos_wav.write(chunckPCM, <span class="number">0</span>, bufferInfo.size);</span><br><span class="line">                        <span class="comment">// 背景音字节数（解码后的）</span></span><br><span class="line">                        length += bufferInfo.size;</span><br><span class="line">                        <span class="comment">// 释放输出buffer，不然mediaCodec用完所有buffer后，就不再向外输出数据</span></span><br><span class="line">                        mediaCodec.releaseOutputBuffer(outputIndex, <span class="keyword">false</span>);</span><br><span class="line">                        <span class="comment">// 再次获取数据,如果没有数据则outputIndex=-1,结束循环</span></span><br><span class="line">                        outputIndex = mediaCodec.dequeueOutputBuffer(bufferInfo, <span class="number">0</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    </span><br><span class="line">                    <span class="comment">// 混音</span></span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; buffer.length; i++) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (raf.getFilePointer() &gt;= length - <span class="number">1</span>) &#123;</span><br><span class="line">                            raf.seek(<span class="number">0</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (isBigEnding) &#123;</span><br><span class="line">                            buffer[i] += (<span class="keyword">short</span>) ((raf.read() &lt;&lt; <span class="number">8</span>) + raf.read());</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            buffer[i] += (<span class="keyword">short</span>) (raf.read() + (raf.read() &lt;&lt; <span class="number">8</span>));</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">if</span> (readSize &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">int</span> encodeSize = MP3Recorder.encode(buffer, buffer, readSize, mp3buffer);</span><br><span class="line">                        <span class="keyword">if</span> (encodeSize &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                fos.write(mp3buffer, <span class="number">0</span>, encodeSize);</span><br><span class="line">                            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                                e.printStackTrace();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">int</span> flushSize = MP3Recorder.flush(mp3buffer);</span><br><span class="line">                <span class="keyword">if</span> (flushSize &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        fos.write(mp3buffer, <span class="number">0</span>, flushSize);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fos.close();</span><br><span class="line">                    raf.close();</span><br><span class="line">                    fos_wav.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                audioRecord.stop();</span><br><span class="line">                audioRecord.release();</span><br><span class="line">                MP3Recorder.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    isRecording = <span class="keyword">false</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="http://blog.elight.cn/?post=200">Android 录音详解（一）—— MediaRecorder、AudioRecord、生成wav格式、边录边播</a><br><a href="http://blog.elight.cn/?post=201">Android 录音详解（二）—— 录制 mp3 格式音频（ lame 库的编译及使用）</a><br><a href="http://blog.elight.cn/?post=213">Android 录音详解（三）—— 音频解码</a><br><a href="http://blog.elight.cn/?post=220">Android 录音详解（四）—— 录音添加背景音乐</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu18.04.2LTS下Wireshark报错Permission denied</title>
      <link href="/blog/2019/07/19/Ubuntu18-04-2LTS%E4%B8%8BWireshark%E6%8A%A5%E9%94%99Permission-denied/"/>
      <url>/blog/2019/07/19/Ubuntu18-04-2LTS%E4%B8%8BWireshark%E6%8A%A5%E9%94%99Permission-denied/</url>
      
        <content type="html"><![CDATA[<h1 id="安装Wireshark"><a href="#安装Wireshark" class="headerlink" title="安装Wireshark"></a>安装Wireshark</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install wireshark</span></span><br></pre></td></tr></table></figure><p>打开Wireshark，报错提示权限不足。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Couldn’t run &#x2F;usr&#x2F;bin&#x2F;dumpcap in child process: Permission denied</span><br></pre></td></tr></table></figure><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install libcap2-bin</span></span><br><span class="line">// 添加一个组，名字为 wireshark</span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo groupadd wireshark</span>  </span><br><span class="line">// 把当前的用户名添加到 wireshark组</span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo usermod -a -G wireshark YOUR-USER-NAME</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> newgrp wireshark</span></span><br><span class="line">// 修改组别</span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo chgrp wireshark /usr/bin/dumpcap</span></span><br><span class="line">// 添加执行权限</span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo chmod 754 /usr/bin/dumpcap</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo <span class="built_in">setcap</span> <span class="string">&#x27;CAP_NET_RAW+eip CAP_NET_ADMIN+eip&#x27;</span> /usr/bin/dumpcap</span></span><br></pre></td></tr></table></figure><h1 id="重启或者登出当前用户重新登入"><a href="#重启或者登出当前用户重新登入" class="headerlink" title="重启或者登出当前用户重新登入"></a>重启或者登出当前用户重新登入</h1>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu18.04.2LTS配置vnc+frp内网穿透实现桌面远程访问</title>
      <link href="/blog/2019/07/10/Ubuntu18-04-2LTS%E9%85%8D%E7%BD%AEvnc-frp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%AE%9E%E7%8E%B0%E6%A1%8C%E9%9D%A2%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE/"/>
      <url>/blog/2019/07/10/Ubuntu18-04-2LTS%E9%85%8D%E7%BD%AEvnc-frp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%AE%9E%E7%8E%B0%E6%A1%8C%E9%9D%A2%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE/</url>
      
        <content type="html"><![CDATA[<p>之前使用<strong>Teamviewer</strong>来远程电脑，更新之后老是提示被商用，无奈，寻求其他方案如anyDesk、向日葵远程控制、splashtop、VNC。</p><p>frp项目地址：<a href="https://github.com/fatedier/frp">https://github.com/fatedier/frp</a><br>frp 是一个可用于内网穿透的高性能的反向代理应用，支持 tcp, udp,http 和 https协议。<br>VNC，全称为Virtual Network Computing，它是一个桌面共享系统。功能，类似于windows中的远程桌面功能。VNC与Windows远程桌面一样是使用RFB(Remote FrameBuffer，远程帧缓冲）协议来实现远程控制另外一台计算机。</p><h1 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h1><p>本文介绍的是在Ubuntu 18.04.2LTS Bionic Beaver上开启VNC服务端并frp穿透内网实现远程桌面共享。</p><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ul><li> 操作系统 Ubuntu 18.04.2LTS Bionic Beaver(x86_64)</li><li>云服务器（公网ip地址）</li></ul><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><ul><li><code>#</code> -要求使用root权限直接以root用户使用命令或对执行的命令使用linux <code>sudo</code></li><li><code>$</code> -要求给定的linux命令作为常规非特权用户执行</li></ul><h1 id="Step-1-启用远程桌面共享"><a href="#Step-1-启用远程桌面共享" class="headerlink" title="Step 1 启用远程桌面共享"></a>Step 1 启用远程桌面共享</h1><p>首先查看下Ubuntu系统上是否安装远程桌面共享，没有的话就执行安装:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt update &amp;&amp; sudo apt install -y vino</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/07/11/5d269f14e8d6180155.png" alt="desktop sharing"></p><p>使用<code>Activities</code>菜单搜索<code>Sharing</code>可以在<code>Settings</code>部分看到选项，直接打开它，或者以命令行的方式打开</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gnome-control-center sharing</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/07/11/5d26a667acfd332834.png" alt="Sharing"></p><p>单击Screen Sharing以开始远程桌面配置</p><p><img src="https://i.loli.net/2019/07/11/5d26a7c92f53141971.png"></p><p>将开关打开为<code>ON</code>，可以选择设置密码并记住你设置的密码，后面连接的时候要用密码。</p><p><code>Allow connections to control the screen</code>选项使远程用户能够主动与远程桌面交互。如果未选中此选项，则远程桌面会话将设置为只读。</p><p>启用Ubuntu的远程桌面功能后，可以看到系统正在侦听端口<code>5900</code></p><p><img src="https://i.loli.net/2019/07/11/5d26a98f1745624536.png"></p><p>如果您启用了<strong>UFW</strong>防火墙，请打开<code>5900</code>端口</p><p>类似于:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo ufw allow from any to any port 5900 proto tcp</span></span><br><span class="line">Rule added</span><br><span class="line">Rule added (v6)</span><br></pre></td></tr></table></figure><h1 id="Step-2-建立远程桌面连接"><a href="#Step-2-建立远程桌面连接" class="headerlink" title="Step 2 建立远程桌面连接"></a>Step 2 建立远程桌面连接</h1><p>我们将在Ubuntu 18.04系统上使用<a href="https://remmina.org/">Remmina</a>远程桌面客户端，如果没有先安装一个，打开<code>Ubuntu Software</code>搜索<code>remmina</code>安装或者命令行方式安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt install remmina</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/07/11/5d26ab913e00539267.png"></p><p>使用<code>Activities</code>菜单搜索并启动Remmina远程桌面客户端或运行命令行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> remmina</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/07/11/5d26adac35c9b24367.png"></p><p>从下拉菜单中选择协议<code>VNC</code>,然后输入Ubuntu远程桌面系统的主机名或IP地址，按下<code>Enter</code>键即可连接.</p><p><img src="https://i.loli.net/2019/07/11/5d26af736fdc768784.png"></p><p>输入前面设置的密码确认连接。</p><p><img src="https://i.loli.net/2019/07/11/5d26aff21109717706.png"></p><p>连接成功，是这个样子。</p><p><img src="https://i.loli.net/2019/07/11/5d26b11972e9c82984.png"></p><p>远程桌面共享连接成功。你也可以使用Remmina面板进一步调整远程桌面连接设置。</p><p>好了，到了这一步已经确认我们Ubuntu18.04系统的桌面共享服务已经安装好了。这意味着你将可以与你局域网内的机器实现桌面共享，接下来，使用frp实现内网穿透，对外网提供服务，随时随地可以使用网络远程桌面到Ubuntu 18.04。</p><h1 id="Step-3-配置frp实现内网穿透"><a href="#Step-3-配置frp实现内网穿透" class="headerlink" title="Step 3 配置frp实现内网穿透"></a>Step 3 配置frp实现内网穿透</h1><p>首先下载frp二进制文件 <a href="https://github.com/fatedier/frp/releases">https://github.com/fatedier/frp/releases</a><br>根据处理器架构选择对应压缩包</p><ul><li>Windows 64位 ：frp_版本号_windows_amd64.zip</li><li>Windows 32位：frp_版本号_windows_386.zip</li><li>Linux 64位：frp_版本号_linux_amd64.tar.gz</li><li>Linux 32位：frp_版本号_linux_386.tar.gz</li></ul><blockquote><p>注意：从0.18.0版本开始，新版与旧版不兼容，并且部分配置字段不同。请确保服务端和客户端使用同一版本。</p></blockquote><h2 id="下载程序"><a href="#下载程序" class="headerlink" title="下载程序"></a>下载程序</h2><p>我这里云服务器和Ubuntu18.04都是<code>x86_64</code>架构的，所以我下载<code>linux_amd64</code>的压缩包</p><p>下面以<code>x84_64</code>处理器架构举例， 此时frp 最新版是<code>v0.27.0</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看cpu架构</span></span><br><span class="line">arch</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建frp文件夹并进入</span></span><br><span class="line">mkdir frp &amp;&amp; cd frp</span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载</span></span><br><span class="line">wget -q -c --no-check-certificate https://github.com/fatedier/frp/releases/download/v0.27.0/frp_0.27.0_linux_amd64.tar.gz</span><br><span class="line"><span class="meta">#</span><span class="bash"> 解压</span></span><br><span class="line">tar -xzvf frp_0.27.0_linux_amd64.tar.gz</span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入文件夹</span></span><br><span class="line">cd frp_0.27.0_linux_amd64</span><br><span class="line"><span class="meta">#</span><span class="bash"> 确保 frps 程序具有可执行权限</span></span><br><span class="line">chmod +x frps</span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行</span></span><br><span class="line">./frps --help</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/07/11/5d26db3f4493072975.png"></p><blockquote><p>如果有报错  <code>-bash: ./frps: cannot execute binary file: Exec format error</code>就说明你下错版本</p></blockquote><h2 id="配置程序"><a href="#配置程序" class="headerlink" title="配置程序"></a>配置程序</h2><p>服务端配置参考<a href="https://github.com/fatedier/frp/blob/master/conf/frps_full.ini">frps_full.ini</a><br>客户端配置参考<a href="https://github.com/fatedier/frp/blob/master/conf/frpc_full.ini">frpc_full.ini</a></p><h3 id="服务端-frps-ini"><a href="#服务端-frps-ini" class="headerlink" title="服务端 -frps.ini"></a>服务端 -frps.ini</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下面这句开头必须要有，表示配置的开始</span></span><br><span class="line">[common]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> frp 服务端端口（必须）</span></span><br><span class="line">bind_port = 7000</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> frp 服务端密码（必须）</span></span><br><span class="line">token = 12345678</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 认证超时时间，由于时间戳会被用于加密认证，防止报文劫持后被他人利用</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 因此服务端与客户端所在机器的时间差不能超过这个时间（秒）</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 默认为900秒，即15分钟，如果设置成0就不会对报文时间戳进行超时验证</span></span><br><span class="line">authentication_timeout = 900</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 仪表盘端口，只有设置了才能使用仪表盘（即后台）</span></span><br><span class="line">dashboard_port = 7500</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 仪表盘访问的用户名密码，如果不设置，则默认都是 admin</span></span><br><span class="line">dashboard_user = admin</span><br><span class="line">dashboard_pwd = admin</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果你想要用 frp 穿透访问内网中的网站（例如路由器设置页面）</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 则必须要设置以下两个监听端口，不设置则不会开启这项功能</span></span><br><span class="line">vhost_http_port = 10080</span><br><span class="line">vhost_https_port = 10443</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 此设置需要配合客户端设置，仅在穿透到内网中的 http 或 https 时有用（可选）</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 假设此项设置为 example.com，客户端配置 http 时将 subdomain 设置为 <span class="built_in">test</span>，</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 则你将 test.example.com 解析到服务端后，可以使用此域名来访问客户端对应的 http</span></span><br><span class="line">subdomain_host = example.com</span><br></pre></td></tr></table></figure><p>这是我的服务端-frps.ini的配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line">bind_port = 7000</span><br><span class="line">token = 12345678</span><br><span class="line">authentication_timeout = 900</span><br><span class="line">dashboard_port = 7500</span><br><span class="line">dashboard_user = admin</span><br><span class="line">dashboard_pwd = admin</span><br><span class="line">vhost_http_port = 8080</span><br><span class="line">subdomain_host = example.com</span><br><span class="line">max_pool_count = 10</span><br><span class="line">log_file = ./frps.log</span><br><span class="line">log_level = info</span><br><span class="line">log_max_days = 3</span><br></pre></td></tr></table></figure><h3 id="客户端-frpc-ini"><a href="#客户端-frpc-ini" class="headerlink" title="客户端 -frpc.ini"></a>客户端 -frpc.ini</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">###########################################</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 基本配置(必须)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 下面这句开头必须要有，表示配置的开始</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">###########################################</span></span></span><br><span class="line">[common]</span><br><span class="line"><span class="meta">#</span><span class="bash"> frp 服务端地址，可以填ip或者域名</span></span><br><span class="line">server_addr = 0.0.0.0</span><br><span class="line"><span class="meta">#</span><span class="bash"> frp 服务端端口，即填写服务端配置中的 bind_port</span></span><br><span class="line">server_port = 7000</span><br><span class="line"><span class="meta">#</span><span class="bash"> 填写 frp 服务端密码</span></span><br><span class="line">token = 12345678</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##########################################</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 转发 ssh</span> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 自定义一个配置名称，格式为“[名称]”，放在开头</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##########################################</span></span></span><br><span class="line">[ssh]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 连接类型，填 tcp 或 udp</span></span><br><span class="line">type = tcp</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 本地ip，填你需要转发到的目的ip</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果是转发到frp客户端所在本机（比如路由器）则填 127.0.0.1</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 否则填对应机器的内网ip</span></span><br><span class="line">local_ip = 127.0.0.1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 需要转发到的端口，比如 ssh 端口是 22</span></span><br><span class="line">local_port = 22</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 是否加密客户端与服务端之间的通信，默认是 <span class="literal">false</span></span></span><br><span class="line">use_encryption = false</span><br><span class="line"><span class="meta">#</span><span class="bash"> 是否压缩客户端与服务端之间的通信，默认是 <span class="literal">false</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 压缩可以节省流量，但需要消耗 CPU 资源</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 加密自然也会消耗 CPU 资源，但是不大</span></span><br><span class="line">use_compression = false</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> frp 服务端的远程监听端口，即你访问服务端的 remote_port 就相当于访问</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 客户端的 local_port，如果填0则会随机分配一个端口</span></span><br><span class="line">remote_port = 6001</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##########################################</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 转发HTTP(s)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 自定义一个配置名称，格式为“[名称]”，放在开头</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##########################################</span></span></span><br><span class="line">[router-web]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 连接类型，填 http 或 https</span></span><br><span class="line">type = http</span><br><span class="line"></span><br><span class="line">local_ip = 127.0.0.1</span><br><span class="line">local_port = 80</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> http 可以考虑加密和压缩一下</span></span><br><span class="line">use_encryption = true</span><br><span class="line">use_compression = true</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 自定义访问网站的用户名和密码，如果不定义的话谁都可以访问，会不安全</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 有些路由器如果从内部访问web是不需要用户名密码的，因此需要在这里加一层密码保护</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果你发现不加这个密码保护，路由器配置页面原本的用户认证能正常生效的话，可以不加</span></span><br><span class="line">http_user = admin</span><br><span class="line">http_pwd = admin</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 还记得我们在服务端配置的 subdomain_host = example.com 吗</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 假设这里我们填 web01，那么你将 web01.example.com 解析到服务端ip后</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 你就可以使用 域名:端口 来访问你的 http 了</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 这个域名的作用是用来区分不同的 http，因为你可以配置多个这样的配置</span></span><br><span class="line">subdomain = web01</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 自定义域名，这个不同于 subdomain，你可以设置与 subdomain_host 无关的其他域名</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> subdomain 与 custom_domains 中至少有一个必须要设置</span></span><br><span class="line">custom_domains = web02.yourdomain.com</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 匹配路径，可以设置多个，用逗号分隔，比如你设置 locations 为以下这个，</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 那么所有 http://xxx/abc 和 http://xxx/def 都会被转发到 http://xxx/</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果不需要这个功能可以不写这项，就直接该怎么访问就怎么访问</span></span><br><span class="line">locations = /abc,/def</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重写 host header，相当于反向代理中的“发送域名”</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果设置了，转发 http 时，请求中的 host 会被替换成这个</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 一般情况下不需要用到这个，可以不写这项</span></span><br><span class="line">host_header_rewrite = dev.yourdomain.com</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#############################################</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> TCP/UDP 范围转发</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 自定义一个配置名称，格式为“[range:名称]”，放在开头</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#############################################</span></span></span><br><span class="line">[range:multi-port]</span><br><span class="line"></span><br><span class="line">type = tcp</span><br><span class="line">local_ip = 127.0.0.1</span><br><span class="line">use_encryption = false</span><br><span class="line">use_compression = false</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 本地端口和远程端口可以指定多个范围，如下格式，且范围之间必须一一对应</span></span><br><span class="line">local_port = 6010-6020,6022,6024-6028</span><br><span class="line">remote_port = 16010-16020,16022,16024-16028</span><br></pre></td></tr></table></figure><p>这是我的客户端-frpc.ini的配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line">server_addr = example.com</span><br><span class="line">server_port = 7000</span><br><span class="line">token = 12345678</span><br><span class="line"></span><br><span class="line">[web]</span><br><span class="line">type = http</span><br><span class="line">local_ip = 192.168.103.145</span><br><span class="line">local_port = 80</span><br><span class="line">custom_domains = example.com</span><br><span class="line"></span><br><span class="line">[RDP]</span><br><span class="line">type = tcp</span><br><span class="line">local_ip = 192.168.103.145</span><br><span class="line">local_port = 5900</span><br><span class="line">remote_port = 5900</span><br></pre></td></tr></table></figure><h4 id="服务器端运行启动"><a href="#服务器端运行启动" class="headerlink" title="服务器端运行启动"></a>服务器端运行启动</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> nohup /root/frp/frps -c /root/frp/frps.ini &amp;</span></span><br></pre></td></tr></table></figure><h4 id="客户端-Ubuntu18-04-启动"><a href="#客户端-Ubuntu18-04-启动" class="headerlink" title="客户端(Ubuntu18.04)启动"></a>客户端(Ubuntu18.04)启动</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> nohup /home/xmaihh/frp/frpc -c /home/xmaihh/frp/frpc.ini &amp;</span></span><br></pre></td></tr></table></figure><h4 id="停止"><a href="#停止" class="headerlink" title="停止"></a>停止</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pkill frps   或者 pkill frpc</span></span><br></pre></td></tr></table></figure><blockquote><p>云服务器注意放行相关端口.</p></blockquote><h4 id="开机启动"><a href="#开机启动" class="headerlink" title="开机启动"></a>开机启动</h4><p>自启动可以修改<code>/etc/rc.local</code>文件,加入启动命令<br>或者其他系统自行设置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh -e</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="bash"><span class="comment"># rc.local</span></span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="bash"><span class="comment"># This script is executed at the end of each multiuser runlevel.</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Make sure that the script will <span class="string">&quot;exit 0&quot;</span> on success or any other</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> value on error.</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="bash"><span class="comment"># In order to enable or disable this script just change the execution</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> bits.</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="bash"><span class="comment"># By default this script does nothing.</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">nohup socat TCP4-LISTEN:4443,reuseaddr,fork TCP4:192.168.103.145:8123 &gt;&gt; /root/socat.log 2&gt;&amp;1 &amp;</span></span><br><span class="line"><span class="meta">#</span><span class="bash">nohup socat UDP4-LISTEN:4443,reuseaddr,fork UDP4:192.168.103.145:8123 &gt;&gt; /root/socat.log 2&gt;&amp;1 &amp;</span></span><br><span class="line">nohup /root/frp/frps -c /root/frp/frps.ini &amp;</span><br><span class="line">exit 0</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="建立远程连"><a href="#建立远程连" class="headerlink" title="建立远程连"></a>建立远程连</h1><p>请注意<code>remote_port = 5900</code>我把Ubuntu18.04的VNC Sharing端口<code>5900</code>映射到云服务器的<code>5900</code>端口，建立连接时，连接你的<code>服务器+服务器端口号</code>。</p><p>这里我使用手机开数据网络，关闭WIFi，下载<code>VNC Viewer</code>客户端来一下远程连接。</p><p><img src="https://i.loli.net/2019/07/12/5d27d97f26fb410469.png"></p><p>打开手机<code>VNC Viewer</code>,点击<code>+</code>,在<code>Address</code>处填入 ip+端口形式 <code>xxx.xxx.xxx.xxx::5900</code>或者 域名+端口形式 <code>example.com::5900</code>。</p><p><img src="https://i.loli.net/2019/07/12/5d27dba5ee57884621.png"></p><p>点击进行下一步输入密码以看到画面了。</p><p><img src="https://i.loli.net/2019/07/12/5d27dbbc9663997267.png"></p><h1 id="Issues"><a href="#Issues" class="headerlink" title="Issues"></a>Issues</h1><h2 id="No-matching-security-types"><a href="#No-matching-security-types" class="headerlink" title="No matching security types"></a>No matching security types</h2><p>VNC客户端不支持加密。任何连接到远程桌面共享服务器的尝试都将导致<code>No matching security types</code>错误</p><p>如果遇到这个错误，请按照以下步骤解决:</p><ol><li>安装<code>dconf</code>工具</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install dconf-tools</span></span><br></pre></td></tr></table></figure><ol start="2"><li>打开<code>dconf-editor</code></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> dconf-editor</span></span><br></pre></td></tr></table></figure><p>依次切换到<code>org-&gt;gnome-&gt;desktop-&gt;remote-access</code>并将<code>require-encryption</code>项目关闭。</p><p><img src="https://i.loli.net/2019/07/12/5d27e1f110d9a37918.png"></p><ol start="3"><li>执行</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gsettings <span class="built_in">set</span> org.gnome.Vino require-encryption <span class="literal">false</span></span></span><br></pre></td></tr></table></figure><blockquote><p>如果输出警告：<code>GLib-GIO-Message: 10:19:43.137: Using the &#39;memory&#39; GSettings backend.  Your settings will not be saved or shared with other applications.</code><br>可以先执行<code>export GIO_EXTRA_MODULES=/usr/lib/x86_64-linux-gnu/gio/modules/</code>然后再执行3。</p></blockquote><ol start="4"><li>确认已禁用远程服务器上的加密</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gsettings list-recursively org.gnome.Vino | grep encrypt</span> </span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/07/12/5d27e488a925935610.png"></p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://www.tecmint.com/enable-desktop-sharing-in-ubuntu-linux-mint/">How To Enable Desktop Sharing In Ubuntu and Linux Mint</a><br><a href="https://moe.best/tutorial/frp.html">内网穿透神器搭建 萌新也看得懂的教程系列</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL字符转义处理方法</title>
      <link href="/blog/2019/06/18/MySQL%E5%AD%97%E7%AC%A6%E8%BD%AC%E4%B9%89%E5%A4%84%E7%90%86%E6%96%B9%E6%B3%95/"/>
      <url>/blog/2019/06/18/MySQL%E5%AD%97%E7%AC%A6%E8%BD%AC%E4%B9%89%E5%A4%84%E7%90%86%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL转义字符"><a href="#MySQL转义字符" class="headerlink" title="MySQL转义字符"></a>MySQL转义字符</h1><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td>\0</td><td>ASCII 0(NUL)字符</td><td></td></tr><tr><td>&#39;</td><td>ASCII 39 单引号(‘’’)</td><td></td></tr><tr><td>&quot;</td><td>ASCII 34 双引号(‘“’)</td><td></td></tr><tr><td>\b</td><td>ASCII 8 退格符</td><td></td></tr><tr><td>\n</td><td>ASCII 10 换行符</td><td></td></tr><tr><td>\r</td><td>ASCII 13 回车符</td><td></td></tr><tr><td>\t</td><td>ASCII 9 制表符(TAB)</td><td></td></tr><tr><td>\Z</td><td>ASCII 26(控制（Ctrl）-Z)。该字符可以编码为‘\Z’，以允许你解决在Windows中ASCII 26代表文件结尾这一问题</td><td></td></tr><tr><td>\</td><td>反斜线(‘\’)字符</td><td></td></tr><tr><td>%</td><td>‘%’字符</td><td></td></tr><tr><td>_</td><td>‘_’字符</td><td></td></tr></tbody></table><p>比如,对单引号、双引号和反斜杠的转义处理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">origin = origin.replace(<span class="string">&quot;\\&quot;</span>, <span class="string">&quot;\\\\&quot;</span>)</span><br><span class="line">origin = origin.replace(<span class="string">&quot;&#x27;&quot;</span>, <span class="string">&quot;\\&#x27;&quot;</span>)</span><br><span class="line">origin = origin.replace(<span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;\\&quot;&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="判断是否需要转义方法"><a href="#判断是否需要转义方法" class="headerlink" title="判断是否需要转义方法"></a>判断是否需要转义方法</h1><p>判断字符串是否含有特殊符号,Java方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断内容是否需要进行转义</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> x</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isNeedEscape</span><span class="params">(String x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> needsHexEscape = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(StringUtils.isBlank(x)) &#123;</span><br><span class="line">        <span class="keyword">return</span> needsHexEscape;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> stringLength = x.length();</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i &gt;= stringLength)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">char</span> c = x.charAt(i);</span><br><span class="line">        <span class="keyword">switch</span>(c)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>: <span class="comment">// &#x27;\0&#x27;</span></span><br><span class="line">            needsHexEscape = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="number">10</span>: <span class="comment">// &#x27;\n&#x27;</span></span><br><span class="line">            needsHexEscape = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="number">13</span>: <span class="comment">// &#x27;\r&#x27;</span></span><br><span class="line">            needsHexEscape = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="number">92</span>: <span class="comment">// &#x27;\\&#x27;</span></span><br><span class="line">            needsHexEscape = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="number">39</span>: <span class="comment">// &#x27;\&#x27;&#x27;</span></span><br><span class="line">            needsHexEscape = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="number">34</span>: <span class="comment">// &#x27;&quot;&#x27;</span></span><br><span class="line">            needsHexEscape = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="number">26</span>: <span class="comment">// &#x27;\032&#x27;</span></span><br><span class="line">            needsHexEscape = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(needsHexEscape)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        i++;</span><br><span class="line">    &#125; <span class="keyword">while</span>(<span class="keyword">true</span>);</span><br><span class="line">    <span class="keyword">return</span> needsHexEscape;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对字符转义处理:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对mysql字符进行转义</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> x</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">escapeString</span><span class="params">(String x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Strings.isBlank(x)) &#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!isNeedEscape(x)) &#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> stringLength = x.length();</span><br><span class="line">    String parameterAsString = x;</span><br><span class="line">    StringBuffer buf = <span class="keyword">new</span> StringBuffer((<span class="keyword">int</span>)((<span class="keyword">double</span>)x.length() * <span class="number">1.1000000000000001D</span>));</span><br><span class="line">    <span class="comment">// 可以指定结果前后追加单引号：&#x27;</span></span><br><span class="line">    <span class="comment">//buf.append(&#x27;\&#x27;&#x27;);</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; stringLength; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">char</span> c = x.charAt(i);</span><br><span class="line">        <span class="keyword">switch</span>(c)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>: <span class="comment">// &#x27;\0&#x27;</span></span><br><span class="line">            buf.append(<span class="string">&#x27;\\&#x27;</span>);</span><br><span class="line">            buf.append(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="number">10</span>: <span class="comment">// &#x27;\n&#x27;</span></span><br><span class="line">            buf.append(<span class="string">&#x27;\\&#x27;</span>);</span><br><span class="line">            buf.append(<span class="string">&#x27;n&#x27;</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="number">13</span>: <span class="comment">// &#x27;\r&#x27;</span></span><br><span class="line">            buf.append(<span class="string">&#x27;\\&#x27;</span>);</span><br><span class="line">            buf.append(<span class="string">&#x27;r&#x27;</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="number">92</span>: <span class="comment">// &#x27;\\&#x27;</span></span><br><span class="line">            buf.append(<span class="string">&#x27;\\&#x27;</span>);</span><br><span class="line">            buf.append(<span class="string">&#x27;\\&#x27;</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="number">39</span>: <span class="comment">// &#x27;\&#x27;&#x27;</span></span><br><span class="line">            buf.append(<span class="string">&#x27;\\&#x27;</span>);</span><br><span class="line">            buf.append(<span class="string">&#x27;\&#x27;&#x27;</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="number">34</span>: <span class="comment">// &#x27;&quot;&#x27;</span></span><br><span class="line">            buf.append(<span class="string">&#x27;\\&#x27;</span>);</span><br><span class="line">            buf.append(<span class="string">&#x27;&quot;&#x27;</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="number">26</span>: <span class="comment">// &#x27;\032&#x27;</span></span><br><span class="line">            buf.append(<span class="string">&#x27;\\&#x27;</span>);</span><br><span class="line">            buf.append(<span class="string">&#x27;Z&#x27;</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        buf.append(c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 可以指定结果前后追加单引号：&#x27;</span></span><br><span class="line">    <span class="comment">//buf.append(&#x27;\&#x27;&#x27;);</span></span><br><span class="line">    parameterAsString = buf.toString();</span><br><span class="line">    <span class="keyword">return</span> parameterAsString;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>MySQL</code>语句没有处理好转义字符，通常会报错:<code>Error code 1064: Syntax error</code></p></blockquote><h1 id="Python中re-escape-函数"><a href="#Python中re-escape-函数" class="headerlink" title="Python中re.escape()函数"></a>Python中<code>re.escape()</code>函数</h1><p>re.escape()是用来处理需要进行正则表达式匹配的字符串中，本身包含正则表达式元字符的情况，这个函数的处理方法也很简单，就是对字符串中所有的非字母（ASCII letters）、数字（numbers）及下划线（’_’）的字符前都加反斜线（’\‘），这样进行转义处理。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">a = <span class="string">&quot;he&#x27;s pen.&quot;</span></span><br><span class="line">print(a)  <span class="comment"># he&#x27;s pen.</span></span><br><span class="line">a = re.escape(a)</span><br><span class="line">print(a)  <span class="comment"># he\&#x27;s\ pen\.</span></span><br><span class="line">a = a.replace(<span class="string">&#x27;\\&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">print(a)  <span class="comment"># he&#x27;s pen.</span></span><br></pre></td></tr></table></figure><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://www.jyoryo.com/index.php/archives/21.html">MySQL字符转义涉及的问题及解决</a><br><a href="https://www.polarxiong.com/archives/Python-%E5%AF%B9%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E9%9D%9E%E5%AD%97%E6%AF%8D-%E6%95%B0%E5%AD%97%E6%88%96%E4%B8%8B%E5%88%92%E7%BA%BF%E5%AD%97%E7%AC%A6%E8%BF%9B%E8%A1%8C%E8%BD%AC%E4%B9%89.html">Python:对字符串中非字母、数字或下划线字符进行转义</a></p>]]></content>
      
      
      <categories>
          
          <category> SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux与Windows文件显示乱码</title>
      <link href="/blog/2019/06/05/Linux%E4%B8%8EWindows%E6%96%87%E4%BB%B6%E6%98%BE%E7%A4%BA%E4%B9%B1%E7%A0%81/"/>
      <url>/blog/2019/06/05/Linux%E4%B8%8EWindows%E6%96%87%E4%BB%B6%E6%98%BE%E7%A4%BA%E4%B9%B1%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>从Windows内拷贝一个txt文件到Linux下打开显示乱码</p><ul><li><p>Windows下默认使用GB2312编码</p></li><li><p>Linux下默认使用UTF-8编码</p></li></ul><p>＃　解决办法</p><p>使用Linux下的<code>iconv</code>命令改变文件的编码</p><p>  <code>test.txt</code>由<code>GB2312</code>转换成<code>UTF-8</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iconv　 -f 　GB2312　 -t　 UTF-8　 test.txt　 -o 　test.txt</span><br></pre></td></tr></table></figure><p>  <code>test.txt</code>由<code>UTF-8</code>转换成<code>GB2312</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iconv　-f　 UTF-8　 -t　 GB2312 　test.txt　 -o 　test.txt</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu18.04.2LTS安装MySQL</title>
      <link href="/blog/2019/05/17/Ubuntu18-04-2LTS%E5%AE%89%E8%A3%85MySQL/"/>
      <url>/blog/2019/05/17/Ubuntu18-04-2LTS%E5%AE%89%E8%A3%85MySQL/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.mysql.com/">MySQL</a>是一个开源数据库管理系统，通常作为流行的<a href="https://en.wikipedia.org/wiki/LAMP_(software_bundle)">LAMP</a> （Linux，Apache，MySQL，PHP / Python / Perl）的一部分进行安装。 它使用关系数据库和SQL（结构化查询语言）来管理其数据。</p><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ul><li>Ubuntu 18.04.2 LTS</li><li>MySQL 5.7.26</li><li>MySQL Workbench (可视化＊可选)</li></ul><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>在 Ubuntu 18.04 中，默认情况下最新版本的 MySQL 包含在 APT 软件包存储库中,直接执行安装即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt update</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo apt install mysql-server</span></span><br></pre></td></tr></table></figure><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>接下来配置MySQL，执行命令，运行MySQL附带的安全脚本，根据提示操作修改一些默认规则。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo mysql_secure_installation</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/05/17/5cde7753987ea12819.png"></p><p><img src="https://i.loli.net/2019/05/17/5cde78771595f84396.png"></p><h1 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h1><p>安装完MySQL已经开始自动运行。 运行命令检查一下状态。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> systemctl status mysql.service</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/05/17/5cde790f819fe19186.png"></p><p>显示如上信息说明mysql服务是正常的。</p><p>如果MySQL没有运行，你可以用<code>sudo systemctl start mysql</code>启动它。</p><p>尝试使用mysqladmin工具连接到数据库，该工具是允许您运行管理命令的客户端。 例如，该命令表示以root身份连接到MySQL（ -u root ），提示输入密码（ -p ）并返回该版本。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo mysqladmin -p -u root version</span></span><br></pre></td></tr></table></figure><p>得到类似以下输出:<br><img src="https://i.loli.net/2019/05/17/5cde7fec58af778411.png"></p><h1 id="可视化"><a href="#可视化" class="headerlink" title="可视化"></a>可视化</h1><p>MySQL可视化工具软件安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install mysql-workbench</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/05/17/5cde82554de7656758.png"></p><p>在Ubuntu中打开MySQL Workbench软件可以看到有一个本地连接，点进去打开开报错了。</p><p><img src="https://i.loli.net/2019/05/17/5cde84a6c61a011438.png"></p><blockquote><p>这跟前面配置有一些关系，前面删除了匿名用户和测试数据库，禁止了远程root用户登录。</p></blockquote><p>这里来通过配置添加一个可以访问的数据库。</p><h2 id="进入MySQL控制台"><a href="#进入MySQL控制台" class="headerlink" title="进入MySQL控制台"></a>进入MySQL控制台</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo mysql -uroot -p</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/05/20/5ce25bd4e87f614892.png"></p><h2 id="新建数据库和用户"><a href="#新建数据库和用户" class="headerlink" title="新建数据库和用户"></a>新建数据库和用户</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 创建数据库ticket</span><br><span class="line"><span class="meta">$</span><span class="bash"> CREATE DATABASE ticket;</span></span><br><span class="line">// 创建用户xmai(密码Uf4bGZ53Ds*#) 并赋予其ticketDB数据库的所有权限</span><br><span class="line"><span class="meta">$</span><span class="bash"> GRANT ALL PRIVILEGES ON ticket.* TO xmai@localhost IDENTIFIED BY <span class="string">&quot;Uf4bGZ53Ds*#&quot;</span>;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/05/21/5ce3a2ddd80a069294.png"></p><blockquote><p>我们在前面MySQL配置时，增加了密码强度验证插件validate_password，相关参数设置的较为严格。使用了该插件会检查设置的密码是否符合当前设置的强度规则，若不满足则拒绝设置并报错类似<code>ERROR 1819 (HY000):Your password does not satisfy the current policy requirements</code>。前面我选择的是<code>[1] MEDIUM Length &gt;=8 , numeric,mixed case, and special characters</code></p></blockquote><h2 id="进行访问控制配置"><a href="#进行访问控制配置" class="headerlink" title="进行访问控制配置"></a>进行访问控制配置</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 允许xmai用户可以从任意机器上登入mysql</span><br><span class="line"><span class="meta">$</span><span class="bash"> GRANT ALL PRIVILEGES ON ticket.* TO xmai@<span class="string">&quot;%&quot;</span> IDENTIFIED BY <span class="string">&quot;Uf4bGZ53Ds*#&quot;</span>;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/05/21/5ce3a337c4c2c27607.png"></p><p>配置完成。</p><p>打开MySQL workbench连接数据库</p><p><img src="https://i.loli.net/2019/05/21/5ce3a3ca4f6b732789.png"></p><p>配置访问的数据库用户名和密码，确定。</p><p><img src="https://i.loli.net/2019/05/21/5ce3a4dc6156450553.png"></p><h2 id="允许局域网连接"><a href="#允许局域网连接" class="headerlink" title="允许局域网连接"></a>允许局域网连接</h2><p>修改连接 <code>bind-address</code> 配置项</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf</span><br></pre></td></tr></table></figure><p>修改<code>bind-address = 127.0.0.1</code>配置或者修改为<code>bind-address = 0.0.0.0</code>，来允许所有IP访问，或者输入一个你指定的IP地址</p><p>保存后使用以下命令重启mysql</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo /etc/init.d/mysql restart</span><br></pre></td></tr></table></figure><p>使用以下命令进入mysql修改访问权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ sudo mysql -uroot -p</span><br><span class="line">输入密码</span><br><span class="line">$ use mysql</span><br><span class="line">//授权用户能进行远程连接</span><br><span class="line">$ grant all privileges on *.* to root@<span class="string">&quot;%&quot;</span> identified by <span class="string">&quot;password&quot;</span> with grant option;</span><br><span class="line">//刷新权限信息</span><br><span class="line">$ flush privileges;</span><br></pre></td></tr></table></figure><p>命令中的两个星号，第一个星号表示数据库名称，第二个星号表示该数据库下的某个表名称。写成两个星号表示所有的数据库都进行授权。<br>root表示授权root账号。<br>“%”表示授权的用户IP可以指定，这里代表任意的IP地址都能访问MySQL数据库。<br>“password”表示分配账号对应的密码，这里密码自己替换成你的mysql root帐号密码</p><p>所以此处可以写成：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grant all PRIVILEGES on testdabatase.testtable to username@<span class="string">&#x27;192.168.1.2&#x27;</span> identified by <span class="string">&#x27;user-pass&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="Error-1366-Incorrect-string-value-‘-xE7-xA0-x94-xE5-x8F-x91…’-for-column-‘departname’-at-row-1"><a href="#Error-1366-Incorrect-string-value-‘-xE7-xA0-x94-xE5-x8F-x91…’-for-column-‘departname’-at-row-1" class="headerlink" title="Error 1366: Incorrect string value: ‘\xE7\xA0\x94\xE5\x8F\x91…’ for column ‘departname’ at row 1"></a>Error 1366: Incorrect string value: ‘\xE7\xA0\x94\xE5\x8F\x91…’ for column ‘departname’ at row 1</h2><p>插入数据时,报异常。MySQL的utf8编码最多3个字节，UTF-8编码有可能是两个、三个、四个字节，如Emoji表情或者某些特殊字符是4个字节,所以数据插不进去 。</p><p>一顿搜索后找到解决方案</p><ol><li>在mysql的安装目录下找到<code>/etc/mysql/my.cnf</code>,作如下修改</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"></span><br><span class="line">character-set-server=utf8mb4</span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line"></span><br><span class="line">default-character-set=utf8mb4</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/05/21/5ce3b6a8168b938652.png"></p><p>​        修改后重启Mysql   <code> sudo service mysql restart</code></p><ol start="2"><li>将已经建好的表也转换成utf8mb4</li></ol><p>在终端执行<code>sudo mysql -uroot -p</code>命令进入MySQL控制台<br>然后执行 命令：<code>alter table TABLE_NAME convert to character set utf8mb4 collate utf8mb4_bin;</code></p><p>将TABLE_NAME替换成你的表名即可。</p><p><img src="https://i.loli.net/2019/05/21/5ce3b49a3e2f723010.png"></p><p>可以看到插入数据成功！</p><p><img src="https://i.loli.net/2019/05/21/5ce3baaca602961339.png"></p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://www.howtoing.com/how-to-install-mysql-on-ubuntu-18-04/">如何在Ubuntu 18.04上安装MySQL</a></p><p><a href="https://blog.csdn.net/azhegps/article/details/71480633">解决mysql插入数据时出现Incorrect string value: ‘\xF0\x9F…’ for column ‘name’ at row 1的异常</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang交叉编译</title>
      <link href="/blog/2019/05/16/Golang%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91/"/>
      <url>/blog/2019/05/16/Golang%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91/</url>
      
        <content type="html"><![CDATA[<p>Golang交叉编译，一个平台环境下生成其他平台的可执行程序。</p><ul><li>GOOS：目标平台的操作系统（darwin、freebsd、linux、windows） </li><li>GOARCH：目标平台的体系架构（386、amd64、arm） </li><li>CGO_ENABLED:  开启/禁止C与Go混编(0,1)</li></ul><p>Mac 下编译 Linux 和 Windows 64位可执行程序</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build main.go</span> </span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build main.go</span></span><br></pre></td></tr></table></figure><p>Linux 下编译 Mac 和 Windows 64位可执行程序</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build main.go</span> </span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build main.go</span></span><br></pre></td></tr></table></figure><p>Windows 下编译 Mac 和 Linux 64位可执行程序</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">SET CGO_ENABLED=0 </span><br><span class="line">SET GOOS=darwin </span><br><span class="line">SET GOARCH=amd64 </span><br><span class="line">go build main.go </span><br><span class="line"></span><br><span class="line">SET CGO_ENABLED=0 </span><br><span class="line">SET GOOS=linux </span><br><span class="line">SET GOARCH=amd64 </span><br><span class="line">go build main.go</span><br></pre></td></tr></table></figure><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://blog.csdn.net/huyongtq/article/details/81805065">go交叉编译arm上的程序</a></p>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu18.04.2LTS安装微信web开发工具(wine)</title>
      <link href="/blog/2019/05/14/Ubuntu18-04-2LTS%E5%AE%89%E8%A3%85%E5%BE%AE%E4%BF%A1web%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7-wine/"/>
      <url>/blog/2019/05/14/Ubuntu18-04-2LTS%E5%AE%89%E8%A3%85%E5%BE%AE%E4%BF%A1web%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7-wine/</url>
      
        <content type="html"><![CDATA[<p>当我打开微信小程序开发者工具<a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html?t=19051421">下载页</a><br><img src="https://i.loli.net/2019/05/15/5cdb74fe9716f93266.png"></p><p>额，没有Linux版本。好吧，自力更生。</p><h1 id="Linux微信web开发者工具"><a href="#Linux微信web开发者工具" class="headerlink" title="Linux微信web开发者工具"></a>Linux微信web开发者工具</h1><h1 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h1><ul><li><a href="https://wiki.winehq.org/Ubuntu">Wine</a></li><li><a href="https://github.com/cytle/wechat_web_devtools">Linux微信web开发者工具</a></li></ul><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><ul><li><code>#</code> -要求使用root权限直接以root用户使用命令或对执行的命令使用linux <code>sudo</code></li><li><code>$</code> -要求给定的linux命令作为常规非特权用户执行</li></ul><p>如果您之前安装过来自其他仓库的 Wine 安装包，请在尝试安装 WineHQ 安装包之前删除它及依赖它的所有安装包（如：wine-mono、wine-gecko、winetricks），否则可能导致依赖冲突。</p><h2 id="Step1-删除之前安装的Wine"><a href="#Step1-删除之前安装的Wine" class="headerlink" title="Step1 删除之前安装的Wine"></a>Step1 删除之前安装的Wine</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 1. 删除软件及配置文件</span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get --purge remove wine</span></span><br><span class="line">// 2. 删除没用的依赖包</span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get autoremove wine</span></span><br><span class="line">// 3. 此时dpkg的列表中有&quot;rc&quot;状态的软件包,可以执行以下命令进行最后清理</span><br><span class="line"><span class="meta">$</span><span class="bash"> dpkg -l |grep ^rc|awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> |sudo xargs dpkg -P</span></span><br><span class="line">// 4. 然后删除安装包,位于/root/.wine和/home/usrname/.wine</span><br><span class="line"><span class="meta">$</span><span class="bash"> rm -rf /root/.wine</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> rm -rf /home/usrname/.wine</span></span><br></pre></td></tr></table></figure><blockquote><p>删除之后可能残留wine快捷方式的残留目录，进入目录检查下是否包含wine相关的内容</p><p>/usr/share/applications/            <em>//wine快捷方式</em><br>/usr/share/app-install/                <em>//wine快捷方式</em><br>/home/username/.lacal/             <em>//wine应用程序快捷方式</em><br>/home/username/.cache/           <em>//wine应用程序快捷方式</em><br>/home/username/.config/menus/applications-merged/ </p></blockquote><h2 id="Step2-安装-WineHQ-安装包"><a href="#Step2-安装-WineHQ-安装包" class="headerlink" title="Step2 安装 WineHQ 安装包"></a>Step2 安装 <a href="https://wiki.winehq.org/Ubuntu_zhcn">WineHQ 安装包</a></h2><p>如果您使用的是 64 位系统，请开启 32 bit 架构支持（如果您之前没有开启的话）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo dpkg --add-architecture i386</span> </span><br><span class="line">// 下载添加仓库密钥</span><br><span class="line"><span class="meta">$</span><span class="bash"> wget -nc https://dl.winehq.org/wine-builds/Release.key</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-key add Release.key</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-add-repository https://dl.winehq.org/wine-builds/ubuntu/</span></span><br><span class="line">// 添加仓库</span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-add-repository<span class="string">&#x27;deb https://dl.winehq.org/wine-builds/ubuntu/ xenial main&#x27;</span></span></span><br><span class="line">// 更新软件包</span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get update</span></span><br><span class="line">// 安装以下任一一个安装包</span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo apt install --install-recommends winehq-stable   // 稳定的分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo apt install --install-recommends winehq-devel    // 开发分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo apt install --install-recommends winehq-staging  //Staging 分支</span></span><br><span class="line">// 查看wine版本命令</span><br><span class="line"><span class="meta">$</span><span class="bash"> wine --version</span></span><br></pre></td></tr></table></figure><blockquote><p>错误1：“E: 仓库 “<a href="http://ppa.launchpad.net/ubuntu-wine/ppa/ubuntu">http://ppa.launchpad.net/ubuntu-wine/ppa/ubuntu</a> bionic Release” 没有 Release 文件。”  Ubuntu18.04LTS的版本代号为<code>bionic</code>，<br>这里报错我把这里<code>bionic</code>修改为Ubuntu16.04LTS的版本代号<code>xenial</code></p><p>错误2：’’W: GPG 错误：<a href="http://dl.winehq.org/wine-builds/ubuntu">http://dl.winehq.org/wine-builds/ubuntu</a> xenial InRelease: 由于没有公钥，无法验证下列签名： NO_PUBKEY 76F1A20FF987672F<br>E: 仓库 “<a href="http://dl.winehq.org/wine-builds/ubuntu">http://dl.winehq.org/wine-builds/ubuntu</a> xenial InRelease” 没有数字签名”<br>执行命令<code>$ sudo apt-key adv --recv-keys --keyserver keyserver.Ubuntu.com F987672F</code></p></blockquote><h2 id="Step3-安装Linux微信web开发者工具"><a href="#Step3-安装Linux微信web开发者工具" class="headerlink" title="Step3  安装Linux微信web开发者工具"></a>Step3  安装<a href="https://github.com/cytle/wechat_web_devtools">Linux微信web开发者工具</a></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/cytle/wechat_web_devtools.git</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> wechat_web_devtools</span></span><br><span class="line">// 自动下载最新 `nw.js` , 同时部署目录 `~/.config/wechat_web_devtools/`</span><br><span class="line"><span class="meta">$</span><span class="bash"> ./bin/wxdt install</span></span><br><span class="line">// 启动</span><br><span class="line"><span class="meta">$</span><span class="bash"> ./bin/wxdt</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/05/15/5cdb8297a445c94962.png"></p><h2 id="Step4-创建一个启动图标"><a href="#Step4-创建一个启动图标" class="headerlink" title="Step4 创建一个启动图标"></a>Step4 创建一个启动图标</h2><p>在 /usr/shared/applications/ 目录下，添加 xxx.desktop 文件（xxx为应用程序名），填写相关信息，保存即可。</p><p>例如，Icon=xxx ,Exec=xxx 替换为你的相应目录即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/usr/bin/env xdg-open</span></span><br><span class="line"></span><br><span class="line">[Desktop Entry]</span><br><span class="line">Encoding=UTF-8</span><br><span class="line">Type=Application</span><br><span class="line">Categories=Development;</span><br><span class="line">Icon=/home/xmaihh/Application/wechat_web_devtools/images/we_dev.png</span><br><span class="line">Exec=/home/xmaihh/Application/wechat_web_devtools/bin/wxdt                      </span><br><span class="line">Name=WeChat Web develop tools</span><br><span class="line">Name[zh_CN]=微信Web开发工具</span><br><span class="line">MimeType=</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/05/15/5cdb892f6e8e153613.png"></p><p>附上<a href="https://i.loli.net/2019/05/15/5cdb836d0232a43197.png">微信Web开发工具icon128x128</a></p>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu18.04.2LTS解决KVM permision denied报错</title>
      <link href="/blog/2019/05/10/Ubuntu18-04-2LTS%E8%A7%A3%E5%86%B3KVM-permision-denied%E6%8A%A5%E9%94%99/"/>
      <url>/blog/2019/05/10/Ubuntu18-04-2LTS%E8%A7%A3%E5%86%B3KVM-permision-denied%E6%8A%A5%E9%94%99/</url>
      
        <content type="html"><![CDATA[<p>我在尝试在Ubuntu18.04.2LTS的AndroidStudio上运行Android Virtual Device(AVD) 时，遇到这个报错：<code>/dev/kvm device: permission denied</code>。</p><p><img src="https://i.loli.net/2019/05/10/5cd4f15ca663e.png"></p><p>解决：</p><ol><li>Install <code>qemu-kvm</code></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt install qemu-kvm</span></span><br></pre></td></tr></table></figure><ol start="2"><li>添加当前用户到kvm组</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo adduser &lt;username&gt; kvm</span></span><br></pre></td></tr></table></figure><ol start="3"><li>添加当前用户权限</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo chown &lt;username&gt; /dev/kvm</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/05/10/5cd4f3a098847.png"></p><p>完成所有步骤后，可以成功启动AVD了。</p><p><img src="https://i.loli.net/2019/05/10/5cd4f4139318f.png"></p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://blog.chirathr.com/android/ubuntu/2018/08/13/fix-avd-error-ubuntu-18-04/">How to fix KVM permission denied error on Ubuntu 18.04</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android-SDK开发</title>
      <link href="/blog/2019/04/30/Android-SDK%E5%BC%80%E5%8F%91/"/>
      <url>/blog/2019/04/30/Android-SDK%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h1 id="SDK简介"><a href="#SDK简介" class="headerlink" title="SDK简介"></a>SDK简介</h1><p>SDK(Software Development Kit)，广泛意义上的 <code>SDK</code> 一般都是为特定的软件包、软件框架、硬件平台、操作系统等建立应用程序时所使用的开发工具的集合（<code>系统 SDK</code>）。而狭义上的 <code>SDK</code>（<code>应用 SDK</code>） 则是基于<code>系统 SDK</code> 进行开发的新的、独立于具体业务且完成特定功能的一组工具的集合。通常情况下，SDK 在应用程序中是作为特定功能提供者的角色出现的。例如推送功能的 SDK、统计功能的 SDK、广告功能的 SDK、性能监测功能的 SDK 以及分享功能的 SDK 等等。</p><h1 id="SDK设计"><a href="#SDK设计" class="headerlink" title="SDK设计"></a>SDK设计</h1><ul><li>易用性</li><li>稳定性</li><li>灵活性</li><li>最小资源开销</li><li>主线程</li><li>最小权限原则</li><li>严格的生命周期把控</li></ul><h1 id="API设计"><a href="#API设计" class="headerlink" title="API设计"></a>API设计</h1><ul><li>单一职责原则</li><li>参数尽可能少</li><li>参数合法性校验</li><li>优美的降解(预期的异常抛出)</li><li>实现不要影响API</li></ul><h1 id="版本管理"><a href="#版本管理" class="headerlink" title="版本管理"></a>版本管理</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">     alpha版本</span><br><span class="line">        +</span><br><span class="line">        v</span><br><span class="line">     beta版本</span><br><span class="line">        +</span><br><span class="line">        v</span><br><span class="line">release candidate版本(rc版)</span><br><span class="line">        +</span><br><span class="line">        v</span><br><span class="line">  release版本(发布)</span><br></pre></td></tr></table></figure><ul><li><p>alpha 版：该版本表示该 SDK 产品在此阶段主要是以实现功能为主，通常只在开发团队内部交流使用。一般来说，该版本的 SDK 产品存在的 Bug 较多，需要经历多个 alpha 版本的迭代才能进入 beta 版。</p></li><li><p>beta 版：该版本相对于 alpha 版已经有了很大的改进，修复了严重的 Bug，但是还存在一些已知或是未知的 Bug，通常情况下只在开发团队以及测试团队之间交流使用，需要经历多个 beta 版本的迭代才能进入 rc 版。</p></li><li><p>release candidate 版（rc 版）：该版本的 SDK 趋于成熟，基本上不会出现导致错误的 Bug，原则上不再增加新的功能，与正式发布的正式版没有太大的差异。通常情况下该版本用于进行小规模灰度测试，原则上不会提供给应用程序开发者使用。</p></li><li><p>release 版：该版本意味着 最终发布，在经历了前面几个版本的迭代之后产生的最终版本，也就是最终交付到应用程序开发者使用的版本。</p></li></ul><h1 id="SDK版本号命名"><a href="#SDK版本号命名" class="headerlink" title="SDK版本号命名"></a>SDK版本号命名</h1><p>一个比较合理的版本号命名规范由如下四部分组成：</p><p>V1_0_2_201904301717_beta</p><ol><li>主版本号（1）</li><li>子版本号（0）</li><li>阶段版本号（2）</li><li>迭代版本号（201904301717_beta）</li></ol><p>SDK版本号修改原则:</p><ul><li><p>主版本号：当功能模块有较大的变动，比如增加多个模块或者 SDK 整体架构发生变化时，由需求决定是否修改。</p></li><li><p>子版本号：当功能有一定的增加或变化时，由项目决定是否修改。</p></li><li><p>阶段版本号：当修复 Bug 以及小规模调整时，需要经常发布修订版，此时可由项目经理决定是否修改。</p></li><li><p>迭代版本号：用于记录该版本的 SDK 发布时的时间以及当前的迭代状态。原则上，当项目处于 alpha、beta以及 rc 版时，该版本号需要体现每一次的修改时间以及状态。当项目处于 release 版时，该版本号用于记录该版本的发版时间。</p></li></ul><h1 id="API版本管理"><a href="#API版本管理" class="headerlink" title="API版本管理"></a>API版本管理</h1><p><code>API</code>的版本受到 SDK 版本迭代状态的约束，但是不受 SDK 版本号修改原则的限制。<br>只有处于 <code>release</code>（或<code>rc</code> ） 状态的  API 才能是对外提供服务的，否则该 API 应该是对应用程序开发人员不可见的。换句话说就是，坚决不发布处于 alpha 和 beta 状态的 API。</p><p>API 一旦对外发布，其内部实现以及方法签名原则上处于不可变更状态：</p><p>如果需要修改 API 的内部实现，在保证方法签名不变的情况下，API 必须通过测试用例的边界及功能测试，并尽可能的给出原 API 实现的备份——使用<code>oldMethodName</code>前缀标识原 API；<br>如果需要变更方法签名，比如增加、删除参数或是改变返回值类型，那么在保证原 API 不变的情况下，使用方法重载实现新的 API。<br>如果需要废弃某些 API，应在 SDK release 版本迭代的前 N 个版本使用<code>@deprecated</code>标识需要废弃的 API，并给出该 API 的替代方案以及具体的 API 移除时间（或是 SDK 版本）。</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://www.jianshu.com/p/28becca53726">Android SDK 开发（第一部分</a></p>]]></content>
      
      
      <categories>
          
          <category> SDK开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SDK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AndroidStudio获取sha1码</title>
      <link href="/blog/2019/04/26/AndroidStudio%E8%8E%B7%E5%8F%96sha1%E7%A0%81/"/>
      <url>/blog/2019/04/26/AndroidStudio%E8%8E%B7%E5%8F%96sha1%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<p>在使用百度地图API时，需要获取项目的sha1码，在AndroidStudio3.3版本获取方法如下：</p><p><img src="https://i.loli.net/2019/04/26/5cc2c43ccf73f.png"></p><p>双击执行<code>SigningReport</code>任务后，在<code>Run</code>窗口即可看到生成的<code>SHA1</code>和<code>MD5</code>码，如图所示。</p><p><img src="https://i.loli.net/2019/04/26/5cc2c4cd22c1b.png"></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AndroidStudio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android颜色透明度计算</title>
      <link href="/blog/2019/04/24/Android%E9%A2%9C%E8%89%B2%E9%80%8F%E6%98%8E%E5%BA%A6%E8%AE%A1%E7%AE%97/"/>
      <url>/blog/2019/04/24/Android%E9%A2%9C%E8%89%B2%E9%80%8F%E6%98%8E%E5%BA%A6%E8%AE%A1%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<h1 id="Android颜色透明度计算"><a href="#Android颜色透明度计算" class="headerlink" title="Android颜色透明度计算"></a>Android颜色透明度计算</h1><h2 id="Android中颜色简介"><a href="#Android中颜色简介" class="headerlink" title="Android中颜色简介"></a>Android中颜色简介</h2><p>Android中的颜色值通常遵循RGB/ARGB标准，使用时通常以<code>#</code>字符开头，以16进制表示。<br>其中RGB依次代表红色（Red）、绿色（Green）、蓝色（Blue）.<br>ARGB依次代表透明度(Alpha)、红色（Red）、绿色（Green）、蓝色（Blue） </p><p>eg:#FF00CC99其中FF是透明度，00是红色值，CC是绿色值，99是蓝色值</p><h2 id="不透明度"><a href="#不透明度" class="headerlink" title="不透明度"></a>不透明度</h2><p>透明度的范围是0-255，在计算机中，我们就用16进制(00-FF)表示，全透明就是00，完全不透明就是FF</p><p>透明度和不透明度加起来等于1或者说100%</p><h2 id="计算方法"><a href="#计算方法" class="headerlink" title="计算方法"></a>计算方法</h2><p>255 * 不透明度 -&gt; 转换成16进制数</p><p>eg:30%不透明度也就是255*30%=76.5，四舍五入77，然后利用计算器转为16进制为4D</p><p>下面是代码计算</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">float</span> temp = <span class="number">255</span> * i * <span class="number">1.0f</span> / <span class="number">100f</span>;</span><br><span class="line">            <span class="keyword">int</span> alpha = Math.round(temp);</span><br><span class="line">            String hexStr = Integer.toHexString(alpha);</span><br><span class="line">            <span class="keyword">if</span> (hexStr.length() &lt; <span class="number">2</span>)</span><br><span class="line">                hexStr = <span class="string">&quot;0&quot;</span> + hexStr;</span><br><span class="line">            System.out.println(i + <span class="string">&quot;%, &quot;</span> + hexStr.toUpperCase());</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="速查表"><a href="#速查表" class="headerlink" title="速查表"></a>速查表</h2><table><thead><tr><th>不透明度</th><th>16进制表示</th></tr></thead><tbody><tr><td>0%</td><td>00</td></tr><tr><td>1%</td><td>03</td></tr><tr><td>2%</td><td>05</td></tr><tr><td>3%</td><td>08</td></tr><tr><td>4%</td><td>0A</td></tr><tr><td>5%</td><td>0D</td></tr><tr><td>6%</td><td>0F</td></tr><tr><td>7%</td><td>12</td></tr><tr><td>8%</td><td>14</td></tr><tr><td>9%</td><td>17</td></tr><tr><td>10%</td><td>1A</td></tr><tr><td>11%</td><td>1C</td></tr><tr><td>12%</td><td>1F</td></tr><tr><td>13%</td><td>21</td></tr><tr><td>14%</td><td>24</td></tr><tr><td>15%</td><td>26</td></tr><tr><td>16%</td><td>29</td></tr><tr><td>17%</td><td>2B</td></tr><tr><td>18%</td><td>2E</td></tr><tr><td>19%</td><td>30</td></tr><tr><td>20%</td><td>33</td></tr><tr><td>21%</td><td>36</td></tr><tr><td>22%</td><td>38</td></tr><tr><td>23%</td><td>3B</td></tr><tr><td>24%</td><td>3D</td></tr><tr><td>25%</td><td>40</td></tr><tr><td>26%</td><td>42</td></tr><tr><td>27%</td><td>45</td></tr><tr><td>28%</td><td>47</td></tr><tr><td>29%</td><td>4A</td></tr><tr><td>30%</td><td>4D</td></tr><tr><td>31%</td><td>4F</td></tr><tr><td>32%</td><td>52</td></tr><tr><td>33%</td><td>54</td></tr><tr><td>34%</td><td>57</td></tr><tr><td>35%</td><td>59</td></tr><tr><td>36%</td><td>5C</td></tr><tr><td>37%</td><td>5E</td></tr><tr><td>38%</td><td>61</td></tr><tr><td>39%</td><td>63</td></tr><tr><td>40%</td><td>66</td></tr><tr><td>41%</td><td>69</td></tr><tr><td>42%</td><td>6B</td></tr><tr><td>43%</td><td>6E</td></tr><tr><td>44%</td><td>70</td></tr><tr><td>45%</td><td>73</td></tr><tr><td>46%</td><td>75</td></tr><tr><td>47%</td><td>78</td></tr><tr><td>48%</td><td>7A</td></tr><tr><td>49%</td><td>7D</td></tr><tr><td>50%</td><td>80</td></tr><tr><td>51%</td><td>82</td></tr><tr><td>52%</td><td>85</td></tr><tr><td>53%</td><td>87</td></tr><tr><td>54%</td><td>8A</td></tr><tr><td>55%</td><td>8C</td></tr><tr><td>56%</td><td>8F</td></tr><tr><td>57%</td><td>91</td></tr><tr><td>58%</td><td>94</td></tr><tr><td>59%</td><td>96</td></tr><tr><td>60%</td><td>99</td></tr><tr><td>61%</td><td>9C</td></tr><tr><td>62%</td><td>9E</td></tr><tr><td>63%</td><td>A1</td></tr><tr><td>64%</td><td>A3</td></tr><tr><td>65%</td><td>A6</td></tr><tr><td>66%</td><td>A8</td></tr><tr><td>67%</td><td>AB</td></tr><tr><td>68%</td><td>AD</td></tr><tr><td>69%</td><td>B0</td></tr><tr><td>70%</td><td>B3</td></tr><tr><td>71%</td><td>B5</td></tr><tr><td>72%</td><td>B8</td></tr><tr><td>73%</td><td>BA</td></tr><tr><td>74%</td><td>BD</td></tr><tr><td>75%</td><td>BF</td></tr><tr><td>76%</td><td>C2</td></tr><tr><td>77%</td><td>C4</td></tr><tr><td>78%</td><td>C7</td></tr><tr><td>79%</td><td>C9</td></tr><tr><td>80%</td><td>CC</td></tr><tr><td>81%</td><td>CF</td></tr><tr><td>82%</td><td>D1</td></tr><tr><td>83%</td><td>D4</td></tr><tr><td>84%</td><td>D6</td></tr><tr><td>85%</td><td>D9</td></tr><tr><td>86%</td><td>DB</td></tr><tr><td>87%</td><td>DE</td></tr><tr><td>88%</td><td>E0</td></tr><tr><td>89%</td><td>E3</td></tr><tr><td>90%</td><td>E6</td></tr><tr><td>91%</td><td>E8</td></tr><tr><td>92%</td><td>EB</td></tr><tr><td>93%</td><td>ED</td></tr><tr><td>94%</td><td>F0</td></tr><tr><td>95%</td><td>F2</td></tr><tr><td>96%</td><td>F5</td></tr><tr><td>97%</td><td>F7</td></tr><tr><td>98%</td><td>FA</td></tr><tr><td>99%</td><td>FC</td></tr><tr><td>100%</td><td>FF</td></tr></tbody></table><p>eg:</p><p>UI给出的颜色值为#000000，不透明度为40%。<br>那么结合上表，40%不透明度对应的16进制的值为66，那么最终颜色值就是#66000000</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://blog.csdn.net/wangliblog/article/details/73248122">Android颜色透明度（不透明度）计算</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AndroidStudio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu18.04.2LTS下解決Dia无法输入中文问题</title>
      <link href="/blog/2019/04/16/Ubuntu18-04-2LTS%E4%B8%8B%E8%A7%A3%E6%B1%BADia%E6%97%A0%E6%B3%95%E8%BE%93%E5%85%A5%E4%B8%AD%E6%96%87%E9%97%AE%E9%A2%98/"/>
      <url>/blog/2019/04/16/Ubuntu18-04-2LTS%E4%B8%8B%E8%A7%A3%E6%B1%BADia%E6%97%A0%E6%B3%95%E8%BE%93%E5%85%A5%E4%B8%AD%E6%96%87%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>Dia是一款和MS <em>Visio</em>类似的绘制流程图、UML图、电路图、网络、数据库等结构化图形的工具，支持<a href="http://dia-installer.de/download/macosx.html">Mac OS X </a> 、<a href="http://dia-installer.de/download/linux.html">Linux</a> 、<a href="http://dia-installer.de/download/index.html">Windows </a>  。</p><ul><li><p>官网地址<a href="http://dia-installer.de/">Dia Diagram Editor</a></p></li><li><p>开源地址:<a href="https://github.com/GNOME/dia">github</a><br><img src="https://i.loli.net/2019/04/16/5cb536cd29418.png" alt="Dia界面"></p><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1></li><li><p><code>#</code> -要求使用root权限直接以root用户使用命令或对执行的命令使用linux <code>sudo</code></p></li><li><p><code>$</code> -要求给定的linux命令作为常规非特权用户执行</p><h1 id="安装Dia"><a href="#安装Dia" class="headerlink" title="安装Dia"></a>安装Dia</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt install dia -y</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h1><p>修改/usr/bin/dia文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dia-normal --integrated &quot;$@&quot;改为 dia-normal &quot;$@&quot;</span><br></pre></td></tr></table></figure><p>一番搜索下来比较多的方法是修改<code>/usr/bin/dia</code>文件,当我敲下 <code>sudo vim /usr/bin/dia</code>命令后,展示在我眼前的是以下画面<br><img src="https://i.loli.net/2019/04/16/5cb53879c9912.png"><br>是Doc转Unix转码问题，不成功，网上说这样能解决中文输入的问题，但是又会引起左边工具栏和主窗口分离的问题，每次画个图还得经常拖动工具条，调整其大小，反正就是用起来很麻烦，不完美，遂放弃。</p><h1 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h1><p>修改 <code>/usr/share/applications/dia.desktop</code>文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">把Exec=dia %F 改为Exec=env GTK_IM_MODULE=xim dia %F</span><br></pre></td></tr></table></figure><p>这个设置解决了从启动栏的快捷方式中启动Dia后，输入中文的问题。</p><h1 id="方法3"><a href="#方法3" class="headerlink" title="方法3"></a>方法3</h1><p>在终端启动时增加启动设置<br>启动命令dia 前边增加<code>env GTK_IM_MODULE=xim</code>，即用<code>env GTK_IM_MODULE=xim dia</code>来启动Dia，为了避免每次启动都要输入这么一长串，我们设置别名alias，执行命令<code>alias dia=&quot;env GTK_IM_MODULE=xim dia&quot;</code>，以后再启动Dia时还是使用dia就可以了<br>这个解决了从终端启动Dia后，输入中文的问题。</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://jlice.top/post/201805311.html">解决Dia在Linux上的输入法问题</a><br><a href="https://www.jianshu.com/p/9a7d736126d1">完美解决Dia无法输入中文的问题</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android Lottie动画的使用</title>
      <link href="/blog/2019/04/10/Android-Lottie%E5%8A%A8%E7%94%BB%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/blog/2019/04/10/Android-Lottie%E5%8A%A8%E7%94%BB%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>Lottie是一个用于Android，iOS，Web和Windows的库，用于解析使用<a href="https://github.com/airbnb/lottie-web">Bodymovin</a>导出为json的<a href="http://www.adobe.com/products/aftereffects.html">Adobe After Effects</a>动画，并在移动设备和网络上呈现它们！</p><p><img src="https://i.loli.net/2019/04/10/5cad843949bf3.gif"></p><p>介绍下Android的使用</p><p>github地址 ： <a href="https://github.com/airbnb/lottie-android">lottie-android</a></p><p>官方文档：<a href="http://airbnb.io/lottie/">airbnb.io/lottie</a></p><p>动画json下载：<a href="https://lottiefiles.com/">https://lottiefiles.com</a></p><p>效果图：</p><p><img src="https://i.loli.net/2019/04/10/5cad8590aecf0.gif"></p><p><img src="https://i.loli.net/2019/04/10/5cad85cd323a1.gif"></p><p><img src="https://i.loli.net/2019/04/10/5cad85a10a6dd.gif"></p><h1 id="Android项目使用"><a href="#Android项目使用" class="headerlink" title="Android项目使用"></a>Android项目使用</h1><p>首先，在项目<code>build.grade</code>文件中引入依赖：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">  implementation &#x27;com.airbnb.android:lottie:$lottieVersion&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有2种使用方式：</p><p>直接在布局文件使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;com.airbnb.lottie.LottieAnimationView</span><br><span class="line">        android:id=&quot;@+id/animation_view&quot;</span><br><span class="line">        android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        // 放在 res/raw 目录下的动画文件</span><br><span class="line">        app:lottie_rawRes=&quot;@raw/hello_world&quot;</span><br><span class="line">        // 放在assets目录下的动画文件</span><br><span class="line">        app:lottie_fileName=&quot;hello_world.json&quot;</span><br><span class="line">        // 开启循环</span><br><span class="line">        app:lottie_loop=&quot;true&quot;</span><br><span class="line">        // 自动播放</span><br><span class="line">        app:lottie_autoPlay=&quot;true&quot; /&gt;</span><br></pre></td></tr></table></figure><p>在Java代码中使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">LottieAnimationView animationView = findViewById(R.id.animation_view);</span><br><span class="line">animationView.setAnimation(R.raw.hello_world);</span><br><span class="line">// or</span><br><span class="line">animationView.setAnimation(R.raw.hello_world.json);</span><br><span class="line">animationView.playAnimation();</span><br></pre></td></tr></table></figure><p>好的，让我们运行一下项目。</p><p>然后你就会发现奇迹出现了，没有一张图片，没有一个gif，但是动画效果出来了！就是这么简单，就是这么暴力！</p><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><ul><li>LottieAnimationView.loop(true);<br>设置动画循环演示。</li><li>mLottieAnimationView.isAnimating();<br>是否在演示中。</li><li>mLottieAnimationView.setProgress(0.5f);<br>设置演示的进度。</li><li>mLottieAnimationView.getProgress();<br>获取演示的进度。</li><li>mLottieAnimationView.getDuration();<br>获取演示的时间。</li><li>mLottieAnimationView.playAnimation();<br>运行动画。</li><li>mLottieAnimationView.pauseAnimation();<br>暂停动画。</li><li>mLottieAnimationView.cancelAnimation();<br>关闭动画。</li></ul><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://www.jianshu.com/p/cae606f45c0b">Lottie- 让Android动画实现更简单</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Lottie </tag>
            
            <tag> AndroidStudio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu18.04.2LTS安装ZeroTier实现内网穿透</title>
      <link href="/blog/2019/04/02/Ubuntu18-04-2LTS%E5%AE%89%E8%A3%85ZeroTier%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
      <url>/blog/2019/04/02/Ubuntu18-04-2LTS%E5%AE%89%E8%A3%85ZeroTier%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="ZeroTier"><a href="#ZeroTier" class="headerlink" title="ZeroTier"></a>ZeroTier</h1><p>官网 https:/<a href="http://www.zerotier.com/">www.zerotier.com</a></p><p>github地址  <a href="https://github.com/zerotier/ZeroTierOne">https://github.com/zerotier/ZeroTierOne</a></p><p>ZeroTier在计算机和任何其他计算机之间设置VPN隧道组成一个局域网中，该网内设备自由访问，可完全免费使用多达100台设备。</p><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><ul><li><code>#</code> -要求使用root权限直接以root用户使用命令或对执行的命令使用linux <code>sudo</code></li><li><code>$</code> -要求给定的linux命令作为常规非特权用户执行</li></ul><h1 id="Step-1-编译安装ZeroTier"><a href="#Step-1-编译安装ZeroTier" class="headerlink" title="Step 1 编译安装ZeroTier"></a>Step 1 编译安装ZeroTier</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/zerotier/ZeroTierOne.git  ~/ZeroTier</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ~/ZeroTier</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> make</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo ./zerotier-one -d</span></span><br></pre></td></tr></table></figure><p>或者直接 去到 <a href="http://www.zerotier.com/download.shtml">http://www.zerotier.com/download.shtml</a>下载页面下载编译好的二进制文件安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl -s https://install.zerotier.com/ | sudo bash</span></span><br></pre></td></tr></table></figure><p>安装完成将会收到如下打印：</p><p><img src="https://i.loli.net/2019/04/02/5ca2cd8ca7fd1.png"></p><h1 id="Step-2-创建Network"><a href="#Step-2-创建Network" class="headerlink" title="Step 2 创建Network"></a>Step 2 创建Network</h1><p>进入官网 <a href="http://www.zerotier.com/">http://www.zerotier.com/</a> 注册账号登入后，创建一个Network</p><p><img src="https://i.loli.net/2019/04/02/5ca2ccdd67369.png"></p><p>在终端运行以下命令:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo zerotier-cli join &lt;network_id&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>network_id是上面创建的ID,记得使用root权限</p></blockquote><p><img src="https://i.loli.net/2019/04/02/5ca2d1ff54141.png"></p><h1 id="Step-3-授权设备访问"><a href="#Step-3-授权设备访问" class="headerlink" title="Step 3  授权设备访问"></a>Step 3  授权设备访问</h1><p>在Network管理页面点击Network_ID进来后，可以看到<code>Access Control</code>默认设置为 <code>PRIVATE</code></p><p>意味着所有机器必须先通过ZeroTier接口批准才能连接。这是默认选项，更安全</p><p>还有一个选项 <code>PUBLIC</code></p><p>意味着具有网络ID的任何人都可以连接。这是最简单的选择，但安全性稍差。</p><p>这里我使用默认选项 <code>PRIVATE</code></p><p>需要选中<em>Auth</em>下方的框 ，批准每台机器的连接这个网络</p><p><img src="https://i.loli.net/2019/04/02/5ca2d3e05457e.png"></p><p>其他选项，比如这里可以选择 内网网段</p><p><img src="https://i.loli.net/2019/04/02/5ca2d85f8bb98.png"></p><h1 id="Step-4-测试远程连接SSH"><a href="#Step-4-测试远程连接SSH" class="headerlink" title="Step  4 测试远程连接SSH"></a>Step  4 测试远程连接SSH</h1><p>我在一台Android设备上安装<a href="https://play.google.com/store/apps/details?id=com.zerotier.one">ZeroTier客户端</a></p><p>Ubuntu18.04.2LTS打开SSH服务</p><p>安装即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install openssh-server</span></span><br></pre></td></tr></table></figure><p>手机上操作比较简单，先<code>Join Network</code>，输入Network_ID选添加即可，打开后会出现一个建立VPN隧道的小钥匙图标 🔑。</p><p> <img src="https://i.loli.net/2019/04/02/5ca2fb875dd3b.png"></p><p>手机上打开ssh工具连接Ubuntu18.04.2LTS，可以看到我使用4G网络成功通过隧道ssh连接到了电脑</p><p><img src="https://i.loli.net/2019/04/02/5ca2fcab14aac.png"></p><p>电脑终端查看ssh连接</p><p><img src="https://i.loli.net/2019/04/02/5ca2d6f3bacf7.png"></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
            <tag> ZeroTier </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu18.04.2LTS安装Beyond-Compare4</title>
      <link href="/blog/2019/04/01/Ubuntu18-04-2LTS%E5%AE%89%E8%A3%85Beyond-Compare4/"/>
      <url>/blog/2019/04/01/Ubuntu18-04-2LTS%E5%AE%89%E8%A3%85Beyond-Compare4/</url>
      
        <content type="html"><![CDATA[<h1 id="Ubuntu18-04-2LTS安装Beyond-Compare4"><a href="#Ubuntu18-04-2LTS安装Beyond-Compare4" class="headerlink" title="Ubuntu18.04.2LTS安装Beyond-Compare4"></a>Ubuntu18.04.2LTS安装Beyond-Compare4</h1><p> <a href="https://www.scootersoftware.com/download.php">Beyond Compare</a>是一套非常实用的文件及文件夹对比工具，不仅可以快速比较出两个文件夹的不同之处，还可以详细的比较文件之间的内容差异。</p><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><ul><li>Ubuntu18.04.2LTS(64位)</li><li>Beyond-Compare4</li></ul><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><ul><li><code>#</code> -要求使用root权限直接以root用户使用命令或对执行的命令使用linux <code>sudo</code></li><li><code>$</code> -要求给定的linux命令作为常规非特权用户执行</li></ul><h1 id="Step1-官网下载最新版Beyond-Compare4"><a href="#Step1-官网下载最新版Beyond-Compare4" class="headerlink" title="Step1  官网下载最新版Beyond Compare4"></a>Step1  官网下载最新版Beyond Compare4</h1><p>下载页面 <a href="http://www.scootersoftware.com/download.php">http://www.scootersoftware.com/download.php</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo dpkg -i bcompare-4.2.9.23626_amd64.deb</span></span><br></pre></td></tr></table></figure><h1 id="Step2-激活License"><a href="#Step2-激活License" class="headerlink" title="Step2 激活License"></a>Step2 激活License</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /usr/lib/beyondcompare/</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo sed -i <span class="string">&quot;s/keexjEP3t4Mue23hrnuPtY4TdcsqNiJL-5174TsUdLmJSIXKfG2NGPwBL6vnRPddT7tH29qpkneX63DO9ECSPE9rzY1zhThHERg8lHM9IBFT+rVuiY823aQJuqzxCKIE1bcDqM4wgW01FH6oCBP1G4ub01xmb4BGSUG6ZrjxWHJyNLyIlGvOhoY2HAYzEtzYGwxFZn2JZ66o4RONkXjX0DF9EzsdUef3UAS+JQ+fCYReLawdjEe6tXCv88GKaaPKWxCeaUL9PejICQgRQOLGOZtZQkLgAelrOtehxz5ANOOqCaJgy2mJLQVLM5SJ9Dli909c5ybvEhVmIC0dc9dWH+/N9KmiLVlKMU7RJqnE+WXEEPI1SgglmfmLc1yVH7dqBb9ehOoKG9UE+HAE1YvH1XX2XVGeEqYUY-Tsk7YBTz0WpSpoYyPgx6Iki5KLtQ5G-aKP9eysnkuOAkrvHU8bLbGtZteGwJarev03PhfCioJL4OSqsmQGEvDbHFEbNl1qJtdwEriR+VNZts9vNNLk7UGfeNwIiqpxjk4Mn09nmSd8FhM4ifvcaIbNCRoMPGl6KU12iseSe+w+1kFsLhX+OhQM8WXcWV10cGqBzQE9OqOLUcg9n0krrR3KrohstS9smTwEx9olyLYppvC0p5i7dAx2deWvM1ZxKNs0BvcXGukR+/g&quot;</span> BCompare</span></span><br></pre></td></tr></table></figure><h1 id="Step3-注册License"><a href="#Step3-注册License" class="headerlink" title="Step3 注册License"></a>Step3 注册License</h1><p>打开软件，会提示“Trial Mode Error! “表示Step2成功,接着输入下面TEAM ZWT生成的密钥即可注册成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">--- BEGIN LICENSE KEY ---</span><br><span class="line">GXN1eh9FbDiX1ACdd7XKMV7hL7x0ClBJLUJ-zFfKofjaj2yxE53xauIfkqZ8FoLpcZ0Ux6McTyNmODDSvSIHLYhg1QkTxjCeSCk6ARz0ABJcnUmd3dZYJNWFyJun14rmGByRnVPL49QH+Rs0kjRGKCB-cb8IT4Gf0Ue9WMQ1A6t31MO9jmjoYUeoUmbeAQSofvuK8GN1rLRv7WXfUJ0uyvYlGLqzq1ZoJAJDyo0Kdr4ThF-IXcv2cxVyWVW1SaMq8GFosDEGThnY7C-SgNXW30jqAOgiRjKKRX9RuNeDMFqgP2cuf0NMvyMrMScnM1ZyiAaJJtzbxqN5hZOMClUTE+++</span><br><span class="line">--- END LICENSE KEY -----</span><br></pre></td></tr></table></figure><p>成功后会在~/.config/bcompare/下生成BC4Key.txt,内容如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> xmaihh@xmaihh-H81M-S1:~$ cat ~/.config/bcompare/BC4Key.txt </span><br><span class="line">Beyond Compare <span class="number">4</span></span><br><span class="line">Licensed to:    pwelyn</span><br><span class="line">Quantity:       <span class="number">9999</span> users</span><br><span class="line">Serial number:  <span class="number">9571</span>-<span class="number">9981</span></span><br><span class="line">License <span class="built_in">type</span>:   Pro Edition <span class="keyword">for</span> Windows/Linux/OS X</span><br><span class="line"></span><br><span class="line">--- BEGIN LICENSE KEY ---</span><br><span class="line">GXN1eh9FbDiX1ACdd7XKMV7hL7x0ClBJLUJ-zFfKofjaj2yxE53xauIfk</span><br><span class="line">qZ8FoLpcZ0Ux6McTyNmODDSvSIHLYhg1QkTxjCeSCk6ARz0ABJcnUmd3d</span><br><span class="line">ZYJNWFyJun14rmGByRnVPL49QH+Rs0kjRGKCB-cb8IT4Gf0Ue9WMQ1A6t</span><br><span class="line">31MO9jmjoYUeoUmbeAQSofvuK8GN1rLRv7WXfUJ0uyvYlGLqzq1ZoJAJD</span><br><span class="line">yo0Kdr4ThF-IXcv2cxVyWVW1SaMq8GFosDEGThnY7C-SgNXW30jqAOgiR</span><br><span class="line">jKKRX9RuNeDMFqgP2cuf0NMvyMrMScnM1ZyiAaJJtzbxqN5hZOMClUTE+</span><br><span class="line">--- END LICENSE KEY -----</span><br></pre></td></tr></table></figure><h1 id="Step-4-为所有用户注册bcompare命令"><a href="#Step-4-为所有用户注册bcompare命令" class="headerlink" title="Step 4 为所有用户注册bcompare命令"></a>Step 4 为所有用户注册bcompare命令</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo cp ~/.config/bcompare/BC4Key.txt /etc/</span></span><br></pre></td></tr></table></figure><p>如果Key失效，可以在 <strong><a href="https://www.serials.be/serial/Beyond_Compare_4_Linux_68803632.html">https://www.serials.be/serial/Beyond_Compare_4_Linux_68803632.html</a></strong>生成新的Key</p><p><img src="https://i.loli.net/2019/04/01/5ca1c98459e45.png"></p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://my.oschina.net/sfshine/blog/1829595">Crack-Beyond-Compare 4 -linux </a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu18.04.2LTS使用Gdrive同步文件、自动备份Hexo源文件</title>
      <link href="/blog/2019/03/28/Ubuntu18-04-2LTS%E4%BD%BF%E7%94%A8Gdrive%E5%90%8C%E6%AD%A5%E6%96%87%E4%BB%B6%E3%80%81%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BDHexo%E6%BA%90%E6%96%87%E4%BB%B6/"/>
      <url>/blog/2019/03/28/Ubuntu18-04-2LTS%E4%BD%BF%E7%94%A8Gdrive%E5%90%8C%E6%AD%A5%E6%96%87%E4%BB%B6%E3%80%81%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BDHexo%E6%BA%90%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/gdrive-org/gdrive">Gdrive项目地址</a></p><p>Gdrive是一个命令行操作Google云端硬盘账户的操作工具</p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ul><li><a href="%5Bhttps://drive.google.com%5D(https://drive.google.com/)">Google Drive账号</a></li><li>Ubuntu18.04.2LTS</li></ul><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><ul><li><code>#</code> -要求使用root权限直接以root用户使用命令或对执行的命令使用linux <code>sudo</code></li><li><code>$</code> -要求给定的linux命令作为常规非特权用户执行</li></ul><h1 id="安装Gdrive"><a href="#安装Gdrive" class="headerlink" title="安装Gdrive"></a>安装Gdrive</h1><p>该工具的官方<a href="https://github.com/gdrive-org/gdrive">GitHub页面 </a>，并下载系统的可执行文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> wget -O ~/gdrive  <span class="string">&quot;https://docs.google.com/uc?id=0B3X9GlR6EmbnQ0FtZmJJUXEyRTA&amp;export=download&quot;</span>   <span class="comment">##gdrive-linux-x64</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> chmod +x ~/gdrive    <span class="comment">##添加可执行权限</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo ln -s  ~/gdrive/gdrive   /usr/bin/gdrive<span class="comment">##建立软连接</span></span></span><br></pre></td></tr></table></figure><h1 id="授权Gdrive"><a href="#授权Gdrive" class="headerlink" title="授权Gdrive"></a>授权Gdrive</h1><p>为确保该工具能连接到Google云端硬盘账户，需要执行<code>gdrive about</code>进行授权,之后会在用户目录下生成<code>.gdrive</code>文件夹产生配置文件,不需要记得删除文件夹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gdrive about</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/03/28/5c9c3438ba922.png" alt="gdrive about"><br>把这串网址粘贴到浏览器并登入账号<br><img src="https://i.loli.net/2019/03/28/5c9c35bd3ccc3.png"><br>点击<code>允许</code>会返回一串代码,复制<br><img src="https://i.loli.net/2019/03/28/5c9c36267f5e0.png"><br>回到终端,将复制的代码粘贴上去<br><img src="https://i.loli.net/2019/03/28/5c9c370f31f63.png"></p><h1 id="使用Gdrive"><a href="#使用Gdrive" class="headerlink" title="使用Gdrive"></a>使用Gdrive</h1><p>常用命令如下，更多查看gdrive官网：<a href="https://github.com/gdrive-org/gdrive">gdrive</a></p><ul><li><p>列出Google Drive根目录下文件、文件夹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gdrive list</span></span><br></pre></td></tr></table></figure></li><li><p>下载Google Drive根目录下的文件、文件夹到本地</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gdrive download &#123;文件(夹)名&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>本地文件上传到Google Drive根目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gdrive upload &#123;文件(夹)名&#125;</span></span><br></pre></td></tr></table></figure></li></ul><p>本地文件上传到指定目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gdrive upload --parent &#123;Dir id&#125; &#123;文件(夹)名&#125;</span></span><br></pre></td></tr></table></figure><ul><li>在Google Drive根目录下创建文件夹<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gdrive mkdir &#123;文件夹名&#125;</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><p>:Dir id可以通过<code>gdrive list</code>查看</p></blockquote><p><img src="https://i.loli.net/2019/03/28/5c9c3af7f3e20.png"></p><h1 id="附上自动备份Hexo源文件脚本"><a href="#附上自动备份Hexo源文件脚本" class="headerlink" title="附上自动备份Hexo源文件脚本"></a>附上自动备份Hexo源文件脚本</h1><p>按需要修改自己所要备份的文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#---------------Folder you want to backup----------------##</span></span></span><br><span class="line">NameOfFolder=&quot;hexo&quot;</span><br><span class="line">SourceOffFolder=&quot;/home/xmaihh/Documents&quot;</span><br><span class="line">BackupLocation=&quot;/home/xmaihh/backups&quot;</span><br><span class="line">date=$(date +&quot;%Y-%m-%d&quot;)</span><br><span class="line">LOG_FILE=&quot;home/xmaihh/googledrive.log&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#-----That mean,you will Backup the folder /home/xmaihh/Documents/hexo and will save into Folder /home/xmaihh/backups</span></span></span><br><span class="line"></span><br><span class="line">if [ ! -d $BackupLocation ]; then</span><br><span class="line">mkdir -p $BackupLocation</span><br><span class="line">fi</span><br><span class="line">find $BackupLocation/*.zip -mtime +10 -exec rm &#123;&#125; \;</span><br><span class="line">for fd in $NameOfFolder; do</span><br><span class="line"><span class="meta">#</span><span class="bash"> Name of the Backup File</span></span><br><span class="line">file=$fd-$date.zip</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Zip the Folder you will want to Backup</span></span><br><span class="line">echo &quot;Starting to zip the folder and files&quot;</span><br><span class="line">cd $SourceOffFolder</span><br><span class="line">zip -r $BackupLocation/$file $fd</span><br><span class="line">sleep 5s</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Process Upload Files to Google Drive</span></span></span><br><span class="line">gdrive upload $BackupLocation/$file</span><br><span class="line">if test $? = 0</span><br><span class="line">then</span><br><span class="line">echo &quot;Your Data Successfully Uploaded to the Google Drive!&quot;</span><br><span class="line">else</span><br><span class="line">echo &quot;Error in Your Data Upload to Google Drive&quot; &gt; $LOG_FILE</span><br><span class="line">fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://lighti.me/1532.html">Gdrive：Linux下同步Google Drive文件、自动备份网站到Google Drive</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
            <tag> Gdrive </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python项目生成依赖requirements.txt的两种方法</title>
      <link href="/blog/2019/03/27/Python%E9%A1%B9%E7%9B%AE%E7%94%9F%E6%88%90%E4%BE%9D%E8%B5%96requirements-txt%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
      <url>/blog/2019/03/27/Python%E9%A1%B9%E7%9B%AE%E7%94%9F%E6%88%90%E4%BE%9D%E8%B5%96requirements-txt%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="为什么要有requirements-txt"><a href="#为什么要有requirements-txt" class="headerlink" title="为什么要有requirements.txt"></a>为什么要有requirements.txt</h1><p><code>requirements.txt</code>保存Python项目所依赖的类库。<code>Python</code>提供通过<code>requirements.txt</code>文件来进行项目中依赖的三方库进行整体安装导入。</p><p><code>requirements.txt</code>文件的格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">requests==<span class="number">1.2</span><span class="number">.0</span></span><br><span class="line">Flask==<span class="number">0.10</span><span class="number">.1</span></span><br></pre></td></tr></table></figure><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><ul><li><code>#</code> -要求使用root权限直接以root用户使用命令或对执行的命令使用linux sudo</li><li><code>$</code> -要求给定的linux命令作为常规非特权用户执行</li></ul><h1 id="方法1："><a href="#方法1：" class="headerlink" title="方法1："></a>方法1：</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pip freeze &gt; requirements.txt</span></span><br></pre></td></tr></table></figure><p>使用pip的<code>freeze</code>命令为您的项目生成一个<code>requirements.txt</code>文件：如果将其保存在requirements.txt中，则可以<code>pip install -r requirements.txt</code>来安装这些依赖。</p><blockquote><p>注意：<code>pip freeze</code>输出的是本地环境中所有三方包信息，但是会比<code>pip list</code>少几个包，因为<code>pip</code>，<code>wheel</code>，<code>setuptools</code>等包，是自带的而无法(un)install的，如果要显示所有包可以加上参数<code>-all</code>，即<code>pip freeze -all</code></p></blockquote><h1 id="方法2："><a href="#方法2：" class="headerlink" title="方法2："></a>方法2：</h1><p>使用<code>pipreqs</code>生成<code>requirements.txt</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pip install pipreqs</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pipreqs /path/to/project</span></span><br></pre></td></tr></table></figure><p>有关其他选项，请参阅<a href="https://github.com/bndr/pipreqs">https://github.com/bndr/pipreqs</a></p><blockquote><p>注意：<code>pipreqs</code>生成指定目录下的依赖类库</p></blockquote><h1 id="两种方法的区别"><a href="#两种方法的区别" class="headerlink" title="两种方法的区别"></a>两种方法的区别</h1><p><code>pip freeze</code>保存环境中的所有包，包括那些在当前项目中不使用的包。（如果你没有virtualenv,类库就会很杂很多）<br><code>pip freeze</code>仅保存在您的环境中使用<code>pip install</code>安装的软件包。<br><code>pipreqs</code>它会根据当前目录下的项目的依赖来导出三方类库</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu18.04.2LTS安装VMware Workstation</title>
      <link href="/blog/2019/03/27/Ubuntu18-04-2LTS%E5%AE%89%E8%A3%85VMware-Workstation/"/>
      <url>/blog/2019/03/27/Ubuntu18-04-2LTS%E5%AE%89%E8%A3%85VMware-Workstation/</url>
      
        <content type="html"><![CDATA[<h1 id="Ubuntu18-04-2LTS安装VMware-Workstation"><a href="#Ubuntu18-04-2LTS安装VMware-Workstation" class="headerlink" title="Ubuntu18.04.2LTS安装VMware Workstation"></a>Ubuntu18.04.2LTS安装VMware Workstation</h1><h1 id="操作系统与软件版本"><a href="#操作系统与软件版本" class="headerlink" title="操作系统与软件版本"></a>操作系统与软件版本</h1><ul><li>Ubuntu18.04.2LTS bionic </li><li>VMware Workstation 14PRO或更高版本</li></ul><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><ul><li><code>#</code> -要求使用root权限直接以root用户使用命令或对执行的命令使用linux <code>sudo</code></li><li><code>$</code> -要求给定的linux命令作为常规非特权用户执行</li></ul><h1 id="Step1-下载VMware-workstation"><a href="#Step1-下载VMware-workstation" class="headerlink" title="Step1 下载VMware workstation"></a>Step1 下载VMware workstation</h1><p>首先是下载VMware安装文件,打开命令行终端并使用<code>wget</code>命令执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> wget -O ~/vmware.bin https://www.vmware.com/go/getworkstation-linux</span></span><br></pre></td></tr></table></figure><h1 id="Step2-安装WMware依赖"><a href="#Step2-安装WMware依赖" class="headerlink" title="Step2 安装WMware依赖"></a>Step2 安装WMware依赖</h1><p>安装WMware依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt install build-essential</span></span><br></pre></td></tr></table></figure><h1 id="Step3-安装WMware-workstation"><a href="#Step3-安装WMware-workstation" class="headerlink" title="Step3 安装WMware workstation"></a>Step3 安装WMware workstation</h1><p>启动安装向导</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo bash ~/vmware.bin</span></span><br></pre></td></tr></table></figure><p>按照安装向导完成安装。如果您有序列号，请输入VMware序列号或留空。</p><p>附上VMware Workstation 15Pro激活密钥</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">YG5H2-ANZ0H-M8ERY-TXZZZ-YKRV8</span><br><span class="line"></span><br><span class="line">UG5J2-0ME12-M89WY-NPWXX-WQH88</span><br><span class="line"></span><br><span class="line">UA5DR-2ZD4H-089FY-6YQ5T-YPRX6</span><br><span class="line"></span><br><span class="line">GA590-86Y05-4806Y-X4PEE-ZV8E0</span><br><span class="line"></span><br><span class="line">ZF582-0NW5N-H8D2P-0XZEE-Z22VA</span><br><span class="line"></span><br><span class="line">YA18K-0WY8P-H85DY-L4NZG-X7RAD</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/03/27/5c9af1534a0f4.png"></p><h1 id="启动VMware"><a href="#启动VMware" class="headerlink" title="启动VMware"></a>启动VMware</h1><p>在你的开始菜单搜索系统上安装好的VMware</p><p><img src="https://i.loli.net/2019/03/27/5c9af0b066e6a.png" alt="启动WMware"></p><h1 id="打开VMware"><a href="#打开VMware" class="headerlink" title="打开VMware"></a>打开VMware</h1><p>启动VMware Workstation</p><p><img src="https://i.loli.net/2019/03/27/5c9af299bddbc.png" alt="Ubuntu 18.04.2LTS上的VMware Workstation 15 PRO"></p><h1 id="附上：VMware-Win镜像"><a href="#附上：VMware-Win镜像" class="headerlink" title="附上：VMware Win镜像"></a>附上：VMware Win镜像</h1><p>链接: <a href="https://pan.baidu.com/s/1B4UBgVBaKm_GjDgbWxE-ig">https://pan.baidu.com/s/1B4UBgVBaKm_GjDgbWxE-ig</a> 提取码: <code>jh8z</code> </p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu18.04.2LTS修改主文件夾名稱爲英文</title>
      <link href="/blog/2019/03/17/Ubuntu18-04-2LTS%E4%BF%AE%E6%94%B9%E4%B8%BB%E6%96%87%E4%BB%B6%E5%A4%BE%E5%90%8D%E7%A8%B1%E7%88%B2%E8%8B%B1%E6%96%87/"/>
      <url>/blog/2019/03/17/Ubuntu18-04-2LTS%E4%BF%AE%E6%94%B9%E4%B8%BB%E6%96%87%E4%BB%B6%E5%A4%BE%E5%90%8D%E7%A8%B1%E7%88%B2%E8%8B%B1%E6%96%87/</url>
      
        <content type="html"><![CDATA[<h1 id="Ubuntu18-04-2LTS修改主文件夾名稱爲英文"><a href="#Ubuntu18-04-2LTS修改主文件夾名稱爲英文" class="headerlink" title="Ubuntu18.04.2LTS修改主文件夾名稱爲英文"></a>Ubuntu18.04.2LTS修改主文件夾名稱爲英文</h1><h2 id="方法1："><a href="#方法1：" class="headerlink" title="方法1："></a>方法1：</h2><p>先重命名中文文件夾，然後</p><p>编辑~/.config/user-dirs.dirs文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim ~&#x2F;.config&#x2F;user-dirs.dirs</span><br></pre></td></tr></table></figure><p>修改文件內容爲：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">XDG_DESKTOP_DIR&#x3D;&quot;$HOME&#x2F;Desktop&quot;</span><br><span class="line">XDG_DOWNLOAD_DIR&#x3D;&quot;$HOME&#x2F;Downloads&quot;</span><br><span class="line">XDG_TEMPLATES_DIR&#x3D;&quot;$HOME&#x2F;Templates&quot;</span><br><span class="line">XDG_PUBLICSHARE_DIR&#x3D;&quot;$HOME&#x2F;Public&quot;</span><br><span class="line">XDG_DOCUMENTS_DIR&#x3D;&quot;$HOME&#x2F;Documents&quot;</span><br><span class="line">XDG_MUSIC_DIR&#x3D;&quot;$HOME&#x2F;Music&quot;</span><br><span class="line">XDG_PICTURES_DIR&#x3D;&quot;$HOME&#x2F;Pictures&quot;</span><br><span class="line">XDG_VIDEOS_DIR&#x3D;&quot;$HOME&#x2F;Videos&quot;</span><br></pre></td></tr></table></figure><h2 id="方法2："><a href="#方法2：" class="headerlink" title="方法2："></a>方法2：</h2><p>打开终端，在终端中输入命令:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ export LANG&#x3D;en_US</span><br><span class="line">$ xdg-user-dirs-gtk-update</span><br></pre></td></tr></table></figure><p>跳出对话框询问是否将目录转化为英文路径,同意并关闭。<br>在终端中输入命令:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ export LANG&#x3D;zh_CN</span><br></pre></td></tr></table></figure><p>重新启动系统，系统会提示更新文件名称，选择不再提示,并取消修改。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu18.04.2LTS安装Oracle Java JDK 8</title>
      <link href="/blog/2019/03/15/Ubuntu18-04-2LTS%E5%AE%89%E8%A3%85OracleJavaJDK%208/"/>
      <url>/blog/2019/03/15/Ubuntu18-04-2LTS%E5%AE%89%E8%A3%85OracleJavaJDK%208/</url>
      
        <content type="html"><![CDATA[<h1 id="Ubuntu18-04-2LTS安装Oracle-Java-JDK-8"><a href="#Ubuntu18-04-2LTS安装Oracle-Java-JDK-8" class="headerlink" title="Ubuntu18.04.2LTS安装Oracle Java JDK 8"></a>Ubuntu18.04.2LTS安装Oracle Java JDK 8</h1><p>Webupd8 Team维护一个PPA存储库，其中包含适用于所有当前Ubuntu版本的Oracle Java 8安装程序脚本。</p><h2 id="1-打开终端并运行命令添加PPA："><a href="#1-打开终端并运行命令添加PPA：" class="headerlink" title="1.打开终端并运行命令添加PPA："></a>1.打开终端并运行命令添加PPA：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:webupd8team&#x2F;java</span><br></pre></td></tr></table></figure><p>输入密码（输入时不会显示星号），然后按Enter键继续。</p><h2 id="2-然后运行命令安装Java-8安装程序并在提示时接受许可证："><a href="#2-然后运行命令安装Java-8安装程序并在提示时接受许可证：" class="headerlink" title="2.然后运行命令安装Java 8安装程序并在提示时接受许可证："></a>2.然后运行命令安装Java 8安装程序并在提示时接受许可证：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install oracle-java8-installer</span><br></pre></td></tr></table></figure><h2 id="3-安装完成后，Oracle-Java-8应自动设置为默认值。-如果没有，运行命令："><a href="#3-安装完成后，Oracle-Java-8应自动设置为默认值。-如果没有，运行命令：" class="headerlink" title="3.安装完成后，Oracle Java 8应自动设置为默认值。 如果没有，运行命令："></a>3.安装完成后，Oracle Java 8应自动设置为默认值。 如果没有，运行命令：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install oracle-java8-set-default</span><br></pre></td></tr></table></figure><h2 id="4-卸载："><a href="#4-卸载：" class="headerlink" title="4.卸载："></a>4.卸载：</h2><p>移除PPA软件包总是很容易，只需打开终端并运行命令即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get remove --autoremove oracle-java8-installer oracle-java10-installer</span><br></pre></td></tr></table></figure><p>然后启动软件和更新 - &gt;其他软件选项卡以删除PPA存储库。</p><h1 id="在Ubuntu18-04-2LTS安裝Android-NDK"><a href="#在Ubuntu18-04-2LTS安裝Android-NDK" class="headerlink" title="在Ubuntu18.04.2LTS安裝Android NDK"></a>在Ubuntu18.04.2LTS安裝Android NDK</h1><h2 id="1-下载地址："><a href="#1-下载地址：" class="headerlink" title="1.下载地址："></a>1.下载地址：</h2><p><a href="https://link.jianshu.com/?t=https://developer.android.com/ndk/downloads/index.html">https://developer.android.com/ndk/downloads/index.html</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -c http:&#x2F;&#x2F;dl.google.com&#x2F;android&#x2F;ndk&#x2F;android-ndk-r18b-linux-x86_64.zip</span><br></pre></td></tr></table></figure><h2 id="2-解压"><a href="#2-解压" class="headerlink" title="2.解压"></a>2.解压</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip android-ndk-r18b-linux-x86_64.zip</span><br></pre></td></tr></table></figure><h2 id="3-移动到自己想放的位置："><a href="#3-移动到自己想放的位置：" class="headerlink" title="3.移动到自己想放的位置："></a>3.移动到自己想放的位置：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir &#x2F;usr&#x2F;lib&#x2F;ndk    </span><br><span class="line">mv ndk-r18b  &#x2F;usr&#x2F;lib&#x2F;ndk</span><br></pre></td></tr></table></figure><h2 id="4-设置环境变量"><a href="#4-设置环境变量" class="headerlink" title="4.设置环境变量"></a>4.设置环境变量</h2><p>编辑 .profile 或者 .bash_profile,参照jdk环境变量设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export ANDROID_NDK&#x3D;&#x2F;usr&#x2F;lib&#x2F;ndk&#x2F;ndk-r18b</span><br><span class="line">export PATH&#x3D;$ANDROID_NDK:$PATH</span><br></pre></td></tr></table></figure><h2 id="5-使修改的配置立刻生效：执行source-etc-profile或者-source-bashrc"><a href="#5-使修改的配置立刻生效：执行source-etc-profile或者-source-bashrc" class="headerlink" title="5.使修改的配置立刻生效：执行source /etc/profile或者 source ~/.bashrc"></a>5.使修改的配置立刻生效：执行<code>source /etc/profile</code>或者 <code>source ~/.bashrc</code></h2><h2 id="6-检查是否安装成功："><a href="#6-检查是否安装成功：" class="headerlink" title="6.检查是否安装成功："></a>6.检查是否安装成功：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ndk-build -C</span><br></pre></td></tr></table></figure><p>若返回下面的信息表示NDK有效</p><p><a href="https://i.loli.net/2019/03/15/5c8b0bccde35a.png"><img src="https://i.loli.net/2019/03/15/5c8b0bccde35a.png" alt="檢查ndk-build是否安裝成功"></a>檢查ndk-build是否安裝成功</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu18.04.2LTS安装、配置、美化</title>
      <link href="/blog/2019/03/14/Ubuntu18-04-2LTS%E5%AE%89%E8%A3%85-%E9%85%8D%E7%BD%AE-%E7%BE%8E%E5%8C%96/"/>
      <url>/blog/2019/03/14/Ubuntu18-04-2LTS%E5%AE%89%E8%A3%85-%E9%85%8D%E7%BD%AE-%E7%BE%8E%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="Ubuntu18-04-2LTS安装、配置、美化"><a href="#Ubuntu18-04-2LTS安装、配置、美化" class="headerlink" title="Ubuntu18.04.2LTS安装、配置、美化"></a>Ubuntu18.04.2LTS安装、配置、美化</h1><h2 id="安装准备"><a href="#安装准备" class="headerlink" title="安装准备"></a>安装准备</h2><ul><li>准备<a href="http://releases.ubuntu.com/">Ubuntu18.04镜像</a></li><li>关闭Secure Boot</li></ul><h2 id="硬盘分区"><a href="#硬盘分区" class="headerlink" title="硬盘分区"></a>硬盘分区</h2><p>硬盘一般分为IDE硬盘、SCSI硬盘和SATA硬盘三种。</p><p>在Linux系统中，IDE接口的硬盘被称为hd，SCSI和SATA接口的硬盘则被称为sd，其中IDE硬盘基本上已经淘汰，现在市面上最常见的就是SATA接口的硬盘，第1块硬盘称为sda，第2块硬盘称为sdb……，依此类推。</p><p>一块硬盘最多有4个主分区，主分区以外的分区称为<a href="https://www.baidu.com/s?wd=%E6%89%A9%E5%B1%95%E5%88%86%E5%8C%BA&tn=24004469_oem_dg&rsv_dl=gh_pl_sl_csd">扩展分区</a>，硬盘可以没有扩展分区，但是一定要有主分区，在主分区中要有一个激活分区用来启动Windows系统，在扩展分区中可以建立若干个逻辑分区，因此，最合理的分区方式应该最多分三个主分区，一个扩展分区，这样可以有效地利用有限的主分区，然后在扩展分区中建立逻辑分区。</p><p>在Linux系统中每一个硬盘总共最多有 16个分区，硬盘上的4个主分区，分别标识为sdal、sda2、sda3和sda4，逻辑分区则从sda5开始标识一直到sda16。</p><p>Linux可以把分区作为挂载点，载入目录，其中最常用的硬盘大小（500G-1000G）分配目录推荐如下表所示：</p><table><thead><tr><th>目录</th><th>建议大小</th><th>格式</th><th>描述</th></tr></thead><tbody><tr><td>EFI</td><td>100M</td><td></td><td>一定要放在开头，主分区，分配32M以上</td></tr><tr><td>/</td><td>150G-200G</td><td>ext4</td><td>根目录</td></tr><tr><td>swap</td><td>物理内存两倍</td><td>swap</td><td>交换空间：交换分区相当于Windows中的“虚拟内存”，如果内存低的话（1-4G），物理内存的两倍，高点的话（8-16G）要么等于物理内存，要么物理内存+2g左右，</td></tr><tr><td>/boot</td><td>1G左右</td><td>ext4</td><td><strong>空间起始位置</strong> 分区格式为ext4 <strong>/boot</strong> <strong>建议：应该大于400MB或1GB</strong> Linux的内核及引导系统程序所需要的文件，比如 vmlinuz initrd.img文件都位于这个目录中。在一般情况下，GRUB或LILO系统引导管理器也位于这个目录；启动撞在文件存放位置，如kernels，initrd，grub。</td></tr><tr><td>/tmp</td><td>5G左右</td><td>ext4</td><td>系统的临时文件，一般系统重启不会被保存。（建立服务器需要？）</td></tr><tr><td>/home</td><td>尽量大些</td><td>ext4</td><td>用户工作目录；个人配置文件，如个人环境变量等；所有账号分配一个工作目录。</td></tr></tbody></table><h2 id="修改DNS"><a href="#修改DNS" class="headerlink" title="修改DNS"></a>修改DNS</h2><h3 id="Step1-添加Google’s-DNS"><a href="#Step1-添加Google’s-DNS" class="headerlink" title="Step1:添加Google’s DNS"></a>Step1:添加Google’s DNS</h3><p><code>vim /etc/systemd/resolved.conf</code><br>在文件中添加內容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DNS&#x3D;8.8.8.8 2001:4860:4860::8888</span><br><span class="line">FallbackDNS&#x3D;8.8.4.4 2001:4860:4860::8844</span><br></pre></td></tr></table></figure><h3 id="Step2-重啓網絡或者重啓電腦"><a href="#Step2-重啓網絡或者重啓電腦" class="headerlink" title="Step2:重啓網絡或者重啓電腦"></a>Step2:重啓網絡或者重啓電腦</h3><h2 id="更换root密码"><a href="#更换root密码" class="headerlink" title="更换root密码"></a>更换root密码</h2><p><a href="https://raw.githubusercontent.com/xmaihh/piggo-token/master/img20190313142321.png"><img src="https://raw.githubusercontent.com/xmaihh/piggo-token/master/img20190313142321.png" alt="更换root密码"></a>更换root密码更换root密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">xmaihh@xmaihh-H81M-S1:~$ sudo passwd root</span><br><span class="line">输入新的 UNIX 密码： </span><br><span class="line">重新输入新的 UNIX 密码： </span><br><span class="line">passwd：已成功更新密码</span><br><span class="line">xmaihh@xmaihh-H81M-S1:~$</span><br></pre></td></tr></table></figure><h2 id="sudo免密码"><a href="#sudo免密码" class="headerlink" title="sudo免密码"></a>sudo免密码</h2><p>shell输入:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xmaihh@xmaihh-H81M-S1:~$ sudo visudo</span><br></pre></td></tr></table></figure><p>显示如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">#</span><br><span class="line"># This file MUST be edited with the &#39;visudo&#39; command as root.</span><br><span class="line">#</span><br><span class="line"># Please consider adding local content in &#x2F;etc&#x2F;sudoers.d&#x2F; instead of</span><br><span class="line"># directly modifying this file.</span><br><span class="line">#</span><br><span class="line"># See the man page for details on how to write a sudoers file.</span><br><span class="line">#</span><br><span class="line">Defaults        env_reset</span><br><span class="line">Defaults        mail_badpass</span><br><span class="line">Defaults        secure_path&#x3D;&quot;&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin:$</span><br><span class="line"></span><br><span class="line"># Host alias specification</span><br><span class="line"></span><br><span class="line"># User alias specification</span><br><span class="line"></span><br><span class="line"># Cmnd alias specification</span><br><span class="line"></span><br><span class="line"># User privilege specification</span><br><span class="line">root    ALL&#x3D;(ALL:ALL) ALL</span><br><span class="line"></span><br><span class="line"># Members of the admin group may gain root privileges</span><br><span class="line">%admin ALL&#x3D;(ALL) ALL</span><br><span class="line"></span><br><span class="line"># Allow members of group sudo to execute any command</span><br><span class="line">%sudo   ALL&#x3D;(ALL:ALL) ALL</span><br><span class="line">xmaihh  ALL&#x3D;(ALL) NOPASSWD: ALL</span><br><span class="line"></span><br><span class="line"># See sudoers(5) for more information on &quot;#include&quot; directives:</span><br><span class="line"></span><br><span class="line">#includedir &#x2F;etc&#x2F;sudoers.d</span><br></pre></td></tr></table></figure><blockquote><p>只要在**%sudo ALL=(ALL:ALL) ALL**下面添加一行username  ALL=(ALL) NOPASSWD: ALL</p></blockquote><h2 id="更新源"><a href="#更新源" class="headerlink" title="更新源"></a>更新源</h2><p>找到Software &amp; Updates，将源更新为阿里云的源 或者其他国内的源</p><p>然后自己手动更新一下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt upgrade</span><br></pre></td></tr></table></figure><h2 id="Sougou-Pinyin"><a href="#Sougou-Pinyin" class="headerlink" title="Sougou Pinyin"></a>Sougou Pinyin</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install fcitx-bin      #安装fcitx-bin</span><br><span class="line">sudo apt-get update --fix-missing   #修复fcitx-bin安装失败的情况</span><br><span class="line">sudo apt-get install fcitx-bin      #重新安装fcitx-bin</span><br><span class="line">sudo apt-get install fcitx-table    #安装fcitx-table</span><br></pre></td></tr></table></figure><p>然后去<a href="https://pinyin.sogou.com/linux/">搜狗输入法Linux官网</a>下载64bit的deb包程序，如：sogoupinyin_2.2.0.0108_amd64.deb</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i sogoupinyin*.deb       #安装搜狗拼音</span><br><span class="line">sudo apt-get install -f             #修复搜狗拼音安装的错误</span><br><span class="line">sudo dpkg -i sogoupinyin*.deb       #重新安装搜狗拼音</span><br></pre></td></tr></table></figure><p>重启！重启！重启！也就是注销当前用户再重登的事</p><h2 id="WPS"><a href="#WPS" class="headerlink" title="WPS"></a>WPS</h2><p>去<a href="https://www.wps.com/download/">wps_linux官网</a>下载64bit的deb包程序，如：<a href="http://kdl.cc.ksosoft.com/wps-community/download/6757/wps-office_10.1.0.6757_amd64.deb">wps-office_10.1.0.6757_amd64.deb</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i libpng12-0*.deb      #安装依赖libpng12-0</span><br><span class="line">sudo dpkg -i wps*.deb  #安装wps</span><br><span class="line">sudo apt-get install -f           #若出现错误没有安装成功,用来修复</span><br></pre></td></tr></table></figure><p>下载<a href="https://drive.google.com/open?id=17bFkK8VvJ9MHnPGTAiDJlPf2mX_ItAer">wps字体</a>,然后解压<br>(或者<a href="https://pan.baidu.com/s/1xBd0XIdB2tqDiDR7zABrSg">链接</a>提取码:ea2d)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir &#x2F;usr&#x2F;share&#x2F;fonts&#x2F;WPS-Fonts       #新建wps字体存储文件夹</span><br><span class="line">cd ~&#x2F;Downloads     #进入下载好的字体目录</span><br><span class="line">sudo apt-get install unzip  #安装zip解压软件</span><br><span class="line">sudo unzip wps_symbol_fonts.zip -d &#x2F;usr&#x2F;share&#x2F;fonts&#x2F;WPS-Fonts&#x2F;  #解压字体到指定文件夹</span><br><span class="line">sudo mkfontscale    #生成字体索引</span><br><span class="line">sudo mkfontdir      #生成字体索引</span><br><span class="line">sudo fc-cache       #更新字体缓存</span><br></pre></td></tr></table></figure><h2 id="压缩软件"><a href="#压缩软件" class="headerlink" title="压缩软件"></a>压缩软件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install p7zip-full p7zip-rar rar unzip</span><br></pre></td></tr></table></figure><h2 id="Google-Chrome"><a href="#Google-Chrome" class="headerlink" title="Google Chrome"></a>Google Chrome</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget -q -O - https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;longhr&#x2F;ubuntu1604hub&#x2F;master&#x2F;linux_signing_key.pub | sudo apt-key add</span><br><span class="line">sudo sh -c &#39;echo &quot;deb [ arch&#x3D;amd64 ] http:&#x2F;&#x2F;dl.google.com&#x2F;linux&#x2F;chrome&#x2F;deb&#x2F; stable main&quot; &gt;&gt; &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;google-chrome.list&#39;</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install google-chrome-stable</span><br></pre></td></tr></table></figure><h2 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install vim</span><br></pre></td></tr></table></figure><h2 id="安裝VS-Code"><a href="#安裝VS-Code" class="headerlink" title="安裝VS Code"></a>安裝VS Code</h2><p>首先下载官方安装包：<br><a href="https://code.visualstudio.com/docs/?dv=linux64_deb">https://code.visualstudio.com/docs/?dv=linux64_deb</a><br>然后在该文件路径运行以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i code_1.24.1-1528912196_amd64.deb</span><br></pre></td></tr></table></figure><p>或者双击安装包，要安装依赖的话先安装依赖，如果双击安装无反应，可以在命令行中运行安装，然后安装所需依赖即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install -f</span><br></pre></td></tr></table></figure><h2 id="多版本gcc和g-共存"><a href="#多版本gcc和g-共存" class="headerlink" title="多版本gcc和g++共存"></a>多版本gcc和g++共存</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install gcc-5 gcc-5-multilib</span><br><span class="line">sudo apt-get install g++-5 g++-5-multilib</span><br><span class="line">sudo apt-get install gcc-6 gcc-6-multilib</span><br><span class="line">sudo apt-get install g++-6 g++-6-multilib</span><br><span class="line">sudo apt-get install gcc-7 gcc-7-multilib</span><br><span class="line">sudo apt-get install g++-7 g++-7-multilib</span><br><span class="line">sudo update-alternatives --install &#x2F;usr&#x2F;bin&#x2F;gcc gcc &#x2F;usr&#x2F;bin&#x2F;gcc-5 50</span><br><span class="line">sudo update-alternatives --install &#x2F;usr&#x2F;bin&#x2F;gcc gcc &#x2F;usr&#x2F;bin&#x2F;gcc-6 60</span><br><span class="line">sudo update-alternatives --install &#x2F;usr&#x2F;bin&#x2F;gcc gcc &#x2F;usr&#x2F;bin&#x2F;gcc-7 70</span><br><span class="line">sudo update-alternatives --install &#x2F;usr&#x2F;bin&#x2F;g++ g++ &#x2F;usr&#x2F;bin&#x2F;g++-5 50</span><br><span class="line">sudo update-alternatives --install &#x2F;usr&#x2F;bin&#x2F;g++ g++ &#x2F;usr&#x2F;bin&#x2F;g++-6 60</span><br><span class="line">sudo update-alternatives --install &#x2F;usr&#x2F;bin&#x2F;g++ g++ &#x2F;usr&#x2F;bin&#x2F;g++-7 70</span><br></pre></td></tr></table></figure><p>然后选择gcc和g++版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo update-alternatives --config gcc</span><br><span class="line">sudo update-alternatives --config g++</span><br></pre></td></tr></table></figure><h2 id="多版本python和pip共存"><a href="#多版本python和pip共存" class="headerlink" title="多版本python和pip共存"></a>多版本python和pip共存</h2><p>ubuntu18.04自带python3，但是没有python2，pip2，pip3。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install python2.7  #安装python2.7</span><br><span class="line">sudo apt install python-minimal</span><br><span class="line">sudo apt install curl</span><br><span class="line">curl https:&#x2F;&#x2F;bootstrap.pypa.io&#x2F;get-pip.py -o get-pip.py</span><br><span class="line">sudo apt install python-testresources   #防止pip2出错</span><br><span class="line">sudo apt install python3-testresources  #防止pip3出错</span><br><span class="line">sudo python3 get-pip.py #安装pip3</span><br><span class="line">sudo python2 get-pip.py #安装pip3</span><br><span class="line">sudo pip3 install --upgrade pip #升级pip3</span><br><span class="line">sudo pip2 install --upgrade pip #升级pip2</span><br></pre></td></tr></table></figure><p>此时pip和python并不知道指向2还是3，需要自己修改。我们使用alias来设置别名。我要让pip和python都指向3</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ whereis pip</span><br><span class="line">pip: &#x2F;usr&#x2F;local&#x2F;bin&#x2F;pip &#x2F;usr&#x2F;local&#x2F;bin&#x2F;pip3.6 &#x2F;usr&#x2F;local&#x2F;bin&#x2F;pip2.7</span><br><span class="line">$ whereis python</span><br><span class="line">python: &#x2F;usr&#x2F;bin&#x2F;python2.7 &#x2F;usr&#x2F;bin&#x2F;python2.7-config &#x2F;usr&#x2F;bin&#x2F;python3.6m &#x2F;usr&#x2F;bin&#x2F;python3.6 &#x2F;usr&#x2F;bin&#x2F;python3.6m-config &#x2F;usr&#x2F;bin&#x2F;python3.6-config &#x2F;usr&#x2F;bin&#x2F;python &#x2F;usr&#x2F;lib&#x2F;python2.7 &#x2F;usr&#x2F;lib&#x2F;python3.7 &#x2F;usr&#x2F;lib&#x2F;python3.6 &#x2F;etc&#x2F;python2.7 &#x2F;etc&#x2F;python3.6 &#x2F;etc&#x2F;python &#x2F;usr&#x2F;local&#x2F;lib&#x2F;python2.7 &#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.6 &#x2F;usr&#x2F;include&#x2F;python2.7 &#x2F;usr&#x2F;include&#x2F;python3.6m &#x2F;usr&#x2F;include&#x2F;python3.6 &#x2F;usr&#x2F;share&#x2F;python &#x2F;usr&#x2F;share&#x2F;man&#x2F;man1&#x2F;python.1.gz</span><br></pre></td></tr></table></figure><blockquote><p>error: Traceback (most recent call last):<br>  File “setup.py”, line 1, in <module><br>    from distutils.core import setup<br>ImportError: No module named distutils.core<br>报错缺少<code>python-distutils</code>包，安装即可。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install python3-distutils</span></span><br></pre></td></tr></table></figure><p>可见pip3在：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;usr&#x2F;local&#x2F;bin&#x2F;pip3.6</span><br></pre></td></tr></table></figure><p>python在：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;usr&#x2F;bin&#x2F;python3.6</span><br></pre></td></tr></table></figure><p>自定义alias别名：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~&#x2F;.bashrc</span><br></pre></td></tr></table></figure><p>打开文件后，在最后一行加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alias pip&#x3D;&#x2F;usr&#x2F;local&#x2F;bin&#x2F;pip3.6</span><br><span class="line">alias python&#x3D;&#x2F;usr&#x2F;bin&#x2F;python3.6</span><br></pre></td></tr></table></figure><p>然后更新环境：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~&#x2F;.bashrc</span><br></pre></td></tr></table></figure><h2 id="支持exfat"><a href="#支持exfat" class="headerlink" title="支持exfat"></a>支持exfat</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install exfat-fuse exfat-utils</span><br></pre></td></tr></table></figure><h2 id="音视频"><a href="#音视频" class="headerlink" title="音视频"></a>音视频</h2><h3 id="安装FFmpeg"><a href="#安装FFmpeg" class="headerlink" title="安装FFmpeg"></a>安装FFmpeg</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:djcj&#x2F;hybrid</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install ffmpeg</span><br></pre></td></tr></table></figure><h3 id="安装解码器"><a href="#安装解码器" class="headerlink" title="安装解码器"></a>安装解码器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install ubuntu-restricted-extras</span><br></pre></td></tr></table></figure><h3 id="安装VLC视频播放器"><a href="#安装VLC视频播放器" class="headerlink" title="安装VLC视频播放器"></a>安装VLC视频播放器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install vlc browser-plugin-vlc</span><br></pre></td></tr></table></figure><h3 id="安装录制gif软件peek"><a href="#安装录制gif软件peek" class="headerlink" title="安装录制gif软件peek"></a>安装录制gif软件peek</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:peek-developers&#x2F;stable</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install peek</span><br></pre></td></tr></table></figure><h2 id="美化"><a href="#美化" class="headerlink" title="美化"></a>美化</h2><h3 id="查看gnome版本"><a href="#查看gnome版本" class="headerlink" title="查看gnome版本"></a>查看gnome版本</h3><p>gnome3版本以下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gnome-panel --version   或者  gnome-about --gnome-version</span><br></pre></td></tr></table></figure><p>gnome3版本以上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gnome-session --version  或者 gnome-shell --version</span><br></pre></td></tr></table></figure><p>如我的gnome3版本如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xmaihh@xmaihh-H81M-S1:~$ gnome-shell --version</span><br><span class="line">GNOME Shell 3.28.3</span><br></pre></td></tr></table></figure><h3 id="使用Tweaks对gnome美化"><a href="#使用Tweaks对gnome美化" class="headerlink" title="使用Tweaks对gnome美化"></a>使用Tweaks对gnome美化</h3><p>Ubuntu 18.04 LTS 内置的是 gnome 桌面环境,安装一些主题、图标美化一下整个系统。再用几个插件增强一下效果和使用体验即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install gnome-tweak-tool   #安装tweak</span><br><span class="line">sudo apt-get install gnome-shell-extensions -y  #安装shell扩展</span><br><span class="line">sudo apt install chrome-gnome-shell     #为了能在浏览器内安装gnome插件，火狐和谷歌都能用</span><br><span class="line">sudo apt-get install gtk2-engines-pixbuf    #防止GTK2错误</span><br><span class="line">sudo apt install libxml2-utils</span><br></pre></td></tr></table></figure><p>gnome桌面环境主题、图标 下载地址：<br><a href="https://www.gnome-look.org/">https://www.gnome-look.org/</a><br>以下是我使用配置：<br><a href="https://github.com/EliverLara/Ant">仿macOS主题Ant</a><br><a href="https://i.loli.net/2019/03/13/5c88ce2486591.png"><img src="https://i.loli.net/2019/03/13/5c88ce2486591.png" alt="Ant"></a>AntAnt<br>安装使用配置: `Ctrl+Alt+T 打开terminal，执行如下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ sudo rm &#x2F;var&#x2F;lib&#x2F;apt&#x2F;lists&#x2F;lock</span><br><span class="line">$ sudo rm &#x2F;var&#x2F;cache&#x2F;apt&#x2F;archives&#x2F;lock</span><br><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install gnome-tweak-tool</span><br><span class="line">$ mkdir .themes</span><br><span class="line">$ cd ~&#x2F;.themes&#x2F;</span><br><span class="line">$ git clone https:&#x2F;&#x2F;github.com&#x2F;EliverLara&#x2F;Ant.git</span><br></pre></td></tr></table></figure><p>主题已经安装完成了，你可以打开 Tweaks – Appearance – Applications ，找到你刚下载下来的主题并一键使用。<br><a href="https://i.loli.net/2019/03/13/5c88cf808feb5.png"><img src="https://i.loli.net/2019/03/13/5c88cf808feb5.png" alt="Ant主题使用"></a>Ant主题使用Ant主题使用<br><a href="https://github.com/keeferrourke/la-capitaine-icon-theme">仿macOS主题扁平化图标 La Capitaine</a><br><a href="https://i.loli.net/2019/03/13/5c88d29138933.png"><img src="https://i.loli.net/2019/03/13/5c88d29138933.png" alt="La Capitaine"></a>La CapitaineLa Capitaine</p><p>同样，`Ctrl+Alt+T 打开terminal，执行如下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~&#x2F;.icons</span><br><span class="line">$ cd ~&#x2F;.icons&#x2F;</span><br><span class="line">$ git clone https:&#x2F;&#x2F;github.com&#x2F;keeferrourke&#x2F;la-capitaine-icon-theme.git</span><br></pre></td></tr></table></figure><p>OK，图标包安装完成，直接打开 Tweaks – Appearance – Icons ，选择使用即可。</p><p><a href="https://github.com/micheleg/dash-to-dock">仿macOS主题dask栏</a></p><p><a href="https://i.loli.net/2019/03/13/5c88d25f1c902.png"><img src="https://i.loli.net/2019/03/13/5c88d25f1c902.png" alt="dash-to-dock"></a>dash-to-dockdash-to-dock</p><p>这是一个dask栏插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ cd ~</span><br><span class="line">$ mkdir .temp</span><br><span class="line">$ cd .temp&#x2F;</span><br><span class="line">$ wget https:&#x2F;&#x2F;github.com&#x2F;micheleg&#x2F;dash-to-dock&#x2F;archive&#x2F;master.zip</span><br><span class="line">$ cd master&#x2F;</span><br><span class="line">$ make</span><br><span class="line">$ make install</span><br></pre></td></tr></table></figure><p>还没结束！现在进入重点部分，在键盘按下 <strong>Alt+F2 键</strong>，在弹出的窗口中输入字母 <code>r</code>。</p><p>嗯，现在才正式安装完插件。</p><p><a href="https://i.loli.net/2019/03/13/5c88d3dc523e6.png"><img src="https://i.loli.net/2019/03/13/5c88d3dc523e6.png" alt="Tweaks tool的界面"></a>Tweaks tool的界面Tweaks tool的界面</p><h3 id="Dash-to-dock-Settings"><a href="#Dash-to-dock-Settings" class="headerlink" title="Dash to dock Settings"></a>Dash to dock Settings</h3><p><a href="https://i.loli.net/2019/03/14/5c89a64d80b0c.png"><img src="https://i.loli.net/2019/03/14/5c89a64d80b0c.png" alt="Dash to dock Settings"></a>Dash to dock SettingsDash to dock Settings</p><h4 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h4><ol><li>我在安装的时候遇到Ubuntu18.04.2LTS自带dock栏与dash to dock冲突,输入以下命令将自带dock移动到～下，重启后即可解决此问题(也可移动到其他目录或者直接rm删除)。<strong>Ubuntu 更新后需要再执行一遍</strong>，因为更新会修复自带的 dock。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo mv &#x2F;usr&#x2F;share&#x2F;gnome-shell&#x2F;extensions&#x2F;ubuntu-dock@ubuntu.com ~&#x2F;</span><br><span class="line">或者</span><br><span class="line">sudo rm -rf &#x2F;usr&#x2F;share&#x2F;gnome-shell&#x2F;extensions&#x2F;ubuntu-dock@ubuntu.com</span><br></pre></td></tr></table></figure><ol><li>前面说到查看gnome版本，<a href="https://github.com/micheleg/dash-to-dock">dash-to-dock</a>有对应的<code>branch</code>，<code>git clone</code>拉取时加上<code>-b</code>参数拉取对应版本分支</li></ol><h2 id="聊天软件"><a href="#聊天软件" class="headerlink" title="聊天软件"></a>聊天软件</h2><ul><li><p><a href="https://telegram.org/">Telegram</a></p></li><li><p>Wechat Work&amp; Foxmail</p><p>使用<a href="https://github.com/wszqkzqk/deepin-wine-ubuntu">deepin-wine-ubuntu</a> 移植的企业微信 和Foxmail</p></li></ul><p>其他deepin-wine容器：<a href="http://mirrors.aliyun.com/deepin/pool/non-free/d/">阿里云镜像下载</a></p><p>安装使用：</p><p>打开terminal,执行下列命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;wszqkzqk&#x2F;deepin-wine-ubuntu.git</span><br></pre></td></tr></table></figure><p>cd到deepin-wine-for-ubuntu文件夹下面，执行下列命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;install.sh</span><br></pre></td></tr></table></figure><p>在home目录下新建一个文件夹,我命名的是softwares，然后cd进入softwares，执行如下命令:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;deepin&#x2F;pool&#x2F;non-free&#x2F;d&#x2F;deepin.com.weixin.work&#x2F;deepin.com.weixin.work_2.4.16.1347deepin0_i386.deb</span><br></pre></td></tr></table></figure><p>在softwares目录下,执行以下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i deepin.com.weixin.work_2.4.16.1347deepin0_i386.deb</span><br></pre></td></tr></table></figure><h2 id="网速和CPU使用率工具"><a href="#网速和CPU使用率工具" class="headerlink" title="网速和CPU使用率工具"></a>网速和CPU使用率工具</h2><p>打开terminal,执行下列命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:fossfreedom&#x2F;indicator-sysmonitor</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install indicator-sysmonitor</span><br></pre></td></tr></table></figure><p>接着执行命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ndicator-sysmonitor &amp;</span><br></pre></td></tr></table></figure><p>然后Ctrl+C就可以实现后台运行indicator-sysmonitor</p><p><a href="https://raw.githubusercontent.com/xmaihh/piggo-token/master/img20190313142855.png"><img src="https://raw.githubusercontent.com/xmaihh/piggo-token/master/img20190313142855.png" alt="运行效果"></a>运行效果运行效果</p><p>设置开机启动</p><p><a href="https://raw.githubusercontent.com/xmaihh/piggo-token/master/img20190313143941.png"><img src="https://raw.githubusercontent.com/xmaihh/piggo-token/master/img20190313143941.png" alt="设置开机启动"></a>设置开机启动设置开机启动</p><p><a href="https://raw.githubusercontent.com/xmaihh/piggo-token/master/img20190313144129.png"><img src="https://raw.githubusercontent.com/xmaihh/piggo-token/master/img20190313144129.png" alt="参数配置"></a>参数配置参数配置</p><h2 id="安装npm"><a href="#安装npm" class="headerlink" title="安装npm"></a>安装npm</h2><p>下载<a href="https://nodejs.org/zh-cn/download/">Node.js</a></p><p>接着执行以下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;usr&#x2F;local&#x2F;node&#x2F;</span><br><span class="line"></span><br><span class="line">wget https:&#x2F;&#x2F;npm.taobao.org&#x2F;mirrors&#x2F;node&#x2F;v10.15.3&#x2F;node-v10.15.3-linux-x64.tar.gz  #下载安装包</span><br><span class="line"></span><br><span class="line">tar -zxvf node-v10.15.3-linux-x64.tar.gz  # 解压安装包</span><br><span class="line"></span><br><span class="line">rm  node-v10.15.3-linux-x64.tar.gz  # 移除安装包</span><br><span class="line"></span><br><span class="line">ln -s &#x2F;usr&#x2F;local&#x2F;node&#x2F;node-v10.15.3-linux-x64&#x2F;bin&#x2F;npm &#x2F;usr&#x2F;local&#x2F;bin&#x2F;npm</span><br><span class="line"></span><br><span class="line">ln -s &#x2F;usr&#x2F;local&#x2F;node&#x2F;node-v10.15.3-linux-x64&#x2F;bin&#x2F;node &#x2F;usr&#x2F;local&#x2F;bin&#x2F;node</span><br></pre></td></tr></table></figure><p>查看npm版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xmaihh@xmaihh-H81M-S1:&#x2F;usr&#x2F;local&#x2F;node$ npm -v</span><br><span class="line">6.4.1</span><br></pre></td></tr></table></figure><p>npm升级,@后面是版本号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g npm@6.4.1</span><br></pre></td></tr></table></figure><h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><p>在 Ubuntu 这类 Debian 体系的系统上，可以用 apt-get 安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure><p>配置信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;yourname&quot; #引号里面输入你的名字</span><br><span class="line">git config --global user.email &quot;youremail&quot; #输入邮箱</span><br><span class="line">git config --global core.autocrlf false #消除由于Windows和Linux平台中换行符的差异导致的问题</span><br><span class="line">git config --global core.quotepath off #消除由于路径或者是文件名包含中文导致的乱码问题</span><br><span class="line">git config --global gui.encoding utf-8 #消除gui界面中文乱码问题(如果全程使用命令行的话不用担心这个问题)</span><br><span class="line">ssh-keygen -t rsa -C &quot;youremail&quot; #配置ssh的密钥，输完之后一路回车</span><br><span class="line">eval &#96;ssh-agent&#96; #启用ssh-agent</span><br><span class="line">ssh-add ~&#x2F;.ssh&#x2F;id_rsa #添加密钥</span><br><span class="line">ssh-add -l #将它添加到已知的key列表中</span><br><span class="line">cat ~&#x2F;.ssh&#x2F;id_rsa.pub #把这个公钥添加到自己的Github账户上去</span><br></pre></td></tr></table></figure><h1 id="2019-7-30补充-卸载Sougou输入法"><a href="#2019-7-30补充-卸载Sougou输入法" class="headerlink" title="2019-7-30补充 卸载Sougou输入法"></a>2019-7-30补充 卸载Sougou输入法</h1><p>鉴于Sougou Pinyin输入法在gnome3桌面日常崩溃，每每查看 /var/crash/ 目录下崩溃日志都有，卸载了。</p><p>  $ sudo apt-get  purge  sogoupinyin     （卸载搜狗拼音输入法）<br>  $ sudo apt-get purge  fcitx     （卸载fcitx）<br>  $ sudo apt-get autoremove    （彻底卸载fcitx及相关配置）<br>注销重新登录一下或者重启。</p><p>新输入法<br>rime输入法</p><p>$ sudo apt install ibus-rime（安装rime输入法）</p><p>$ sudo apt install librime-data-wubi（安装五笔库）</p><p>$ sudo apt install librime-data-pinyin-simp （安装简体拼音库）<br>在 ~/.config/ibus/rime/ 下新建一个文件  default.custom.yaml （覆盖默认设置）</p><p>内容是：</p><p>patch:</p><pre><code>   schema_list:           - schema: wubi_pinyin           - schema: pinyin_simp           - schema: wubi86</code></pre><p>说明：schema 是输入法顺序，如果仅用拼音或五笔，则将对应的项移到最前面，本人要五笔拼音一起混用，所以将wubi_pinyin放到了前面。</p><p>并且修改</p><p>wubi_pinyin.schema.yaml</p><p>switches下的reset 值由0改为1，意思是重启后默认由中文状态改为英文状态。</p><p>重启操作系统，使安装生效。</p><p>打开“setting（设置）”，“Region&amp;Language（区域和语言）”，点+号，添加输入法 Chinese(Rime) 。如果不用其它输入法，可以删除，其实也真不用其它输入法了</p><p>注销重新登录一下或者重启。</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://blog.jackyu.club/jack/1-13/">Ubuntu18.04完整新手安装教程</a></p><p><a href="https://sspai.com/post/45791">Ubuntu 18.04 LTS 安装（踩坑）配置全记录</a></p><p><a href="https://blog.csdn.net/u012052268/article/details/77145427">安装Ubuntu Linux系统时硬盘分区最合理的方法</a></p><p><a href="https://blog.csdn.net/hymanjack/article/details/80285400">Ubuntu18.04安装后应该做的事</a></p><p><a href="https://links.jianshu.com/go?to=%5Bhttps://jingyan.baidu.com/article/4853e1e5b090a31909f7269c.html%5D(https://jingyan.baidu.com/article/4853e1e5b090a31909f7269c.html)">Ubuntu 18.04 安装 ibus-rime 输入法</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高字节与低字节、高地址与低地址、大端模式与小端模式、网络字节顺序与主机字节顺序</title>
      <link href="/blog/2019/03/06/%E9%AB%98%E5%AD%97%E8%8A%82%E4%B8%8E%E4%BD%8E%E5%AD%97%E8%8A%82%E3%80%81%E9%AB%98%E5%9C%B0%E5%9D%80%E4%B8%8E%E4%BD%8E%E5%9C%B0%E5%9D%80%E3%80%81%E5%A4%A7%E7%AB%AF%E6%A8%A1%E5%BC%8F%E4%B8%8E%E5%B0%8F%E7%AB%AF%E6%A8%A1%E5%BC%8F%E3%80%81%E7%BD%91%E7%BB%9C%E5%AD%97%E8%8A%82%E9%A1%BA%E5%BA%8F%E4%B8%8E%E4%B8%BB%E6%9C%BA%E5%AD%97%E8%8A%82%E9%A1%BA%E5%BA%8F/"/>
      <url>/blog/2019/03/06/%E9%AB%98%E5%AD%97%E8%8A%82%E4%B8%8E%E4%BD%8E%E5%AD%97%E8%8A%82%E3%80%81%E9%AB%98%E5%9C%B0%E5%9D%80%E4%B8%8E%E4%BD%8E%E5%9C%B0%E5%9D%80%E3%80%81%E5%A4%A7%E7%AB%AF%E6%A8%A1%E5%BC%8F%E4%B8%8E%E5%B0%8F%E7%AB%AF%E6%A8%A1%E5%BC%8F%E3%80%81%E7%BD%91%E7%BB%9C%E5%AD%97%E8%8A%82%E9%A1%BA%E5%BA%8F%E4%B8%8E%E4%B8%BB%E6%9C%BA%E5%AD%97%E8%8A%82%E9%A1%BA%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<ul><li>字节序，顾名思义字节的顺序，再多说两句就是大于一个字节类型的数据在内存中的存放顺序(一个字节的数据当然就无需谈顺序的问题了)。</li><li>低地址、高地址：内存地址可以对应十六进制的数值，值大的为高地址，否则为低地址。</li><li>网络字节顺序NBO(Network Byte Order):按从高到低的顺序存储，在网络上使用统一的网络字节顺序，可以避免兼容性问题。</li><li>主机字节顺序HBO(Host Byte Order):不同的机器HBO不相同，与CPU设计有关计算机数据存储有两种字节优先顺序：高位字节优先和低位字节优先。在网络上数据以高位字节优先顺序在网络上传输，所以对于在内部是以低位字节优先方式存储数据的机器，在网络上传输数据时就需要进行转换。</li></ul><h1 id="高字节与低字节"><a href="#高字节与低字节" class="headerlink" title="高字节与低字节"></a>高字节与低字节</h1><p>字节顺序是指占内存多于一个字节类型的数据在内存中的存放顺序，通常有小端、大端两种字节顺序。<br>小端字节序指低字节数据存放在内存低地址处，高字节数据存放在内存高地址处；<br>大端字节序是高字节数据存放在低地址处，低字节数据存放在高地址处。</p><ul><li>计算机的数值应视为连续若干个二进制位的集合</li><li>所谓高、低字节就是此集合中位地址高/低的二进制位集合</li><li>例如定义一个unsigned short型变量在0x1234 5678，那么这个变量的地址就是0x1234 5678，占用0x1234 5678与0x1234 5679两字节存储空间，其中0x1234 5678是低字节、0x1234 5679是高字节</li><li>一个16进制数有两个字节组成，例如：A9。高字节就是指16进制数的前8位（权重高的8位），如上例中的A。低字节就是指16进制数的后8位（权重低的8位），如上例中的9</li></ul><p>举个栗子，按平时书写习惯，从左到右是高位到地位的顺序，假设有一张1000块的钞票，从左往右写就是<code>1000</code>，1所在的位置为高位，想象一下如果把<code>1</code>写在低位，就是<code>0001</code>，那样你得到的就是1块钱了。</p><h1 id="高地址与低地址"><a href="#高地址与低地址" class="headerlink" title="高地址与低地址"></a>高地址与低地址</h1><p>在内存中，栈是向下生长的,以char arr[4]为例，（因为char类型数据只有一个字节，不存在字节序的问题）依次输出每个元素的地址，可以发现，arr[0]的地址最低，arr[3]的地址最高，如图:</p><p><img src="https://i.loli.net/2019/03/06/5c7f8954dea03.png" alt="高地址与低地址 char举例"></p><h2 id="高低位"><a href="#高低位" class="headerlink" title="高低位"></a>高低位</h2><p>接下来看什么是高低位</p><p> 给一个十进制整数，<code>123456</code>，很明显左边的是高位，右边的是低位。计算机也是这样认为的。给一个16进制数，<code>0x12345678</code>，以字节为单位，从高位到低位依次是 <code>0x12</code>、<code>0x34</code>、<code>0x56</code>、<code>0x78</code>。</p><p> 接下来将高地地址和高低位对应。</p><pre><code> 一个整形占4个字节，给一个整形数据0x12345678，如果是大端存储，存储格式如下:</code></pre><p><img src="https://i.loli.net/2019/03/06/5c7f8e88da55d.png" alt="大端存储"></p><p>如果是小端存储，存储格式如下:</p><p><img src="https://i.loli.net/2019/03/06/5c7f9034ba334.png" alt="小端存储"></p><h2 id="如何判断当前系统是大端还是小端呢？"><a href="#如何判断当前系统是大端还是小端呢？" class="headerlink" title="如何判断当前系统是大端还是小端呢？"></a>如何判断当前系统是大端还是小端呢？</h2><p>最简单地来说，我们可以用 1 为例，1在栈中存储的大小端格式分别如下图所示:</p><p><img src="https://i.loli.net/2019/03/06/5c7f934a6fbb2.png"></p><p>如果我们可以得到 1 在内存中存储的第一个字节，那么我们就可以知道当前系统是大端存储还是小端存储了。</p><h1 id="大端模式与小端模式"><a href="#大端模式与小端模式" class="headerlink" title="大端模式与小端模式"></a>大端模式与小端模式</h1><h2 id="为什么会有大小端？"><a href="#为什么会有大小端？" class="headerlink" title="为什么会有大小端？"></a>为什么会有大小端？</h2><p> 这是因为在计算机系统中，我们是以字节为单位的，每个地址单元都对应着一个字节，一个字节为 8bit。但是在C语言中除了8bit的char之外，还有16bit的short型，32bit的long型（要看具体的编译器），另外，对于位数大于 8位的处理器，例如16位或者32位的处理器，由于寄存器宽度大于一个字节，那么必然存在着一个如果将多个字节安排的问题。因此就导致了大端存储模式和小端存储模式。例如一个16bit的short型x，在内存中的地址为0x0010，x的值为0x1122，那么0x11为高字节，0x22为低字节。对于大端模式，就将0x11放在低地址中，即0x0010中，0x22放在高地址中，即0x0011中。小端模式，刚好相反。我们常用的X86结构是小端模式，而KEIL C51则为大端模式。很多的ARM，DSP都为小端模式。有些ARM处理器还可以由硬件来选择。</p><h2 id="大小端是什么"><a href="#大小端是什么" class="headerlink" title="大小端是什么?"></a>大小端是什么?</h2><p><img src="https://i.loli.net/2019/03/06/5c7f95c739fca.png" alt="大小端是什么"></p><ul><li><p>所谓的大端模式，是指数据的低位保存在内存的高地址中，而数据的高位，保存在内存的低地址中；</p></li><li><p>所谓的小端模式，是指数据的低位保存在内存的低地址中，而数据的高位保存在内存的高地址中。</p></li></ul><p>大端方式将高位存放在低地址，小端方式将低位存放在低地址。采用大端方式 进行数据存放符合人类的正常思维，而采用小端方式进行数据存放利于计算机处理。</p><h2 id="大小端分别的优势"><a href="#大小端分别的优势" class="headerlink" title="大小端分别的优势"></a>大小端分别的优势</h2><ul><li><p>小端模式(Little-Endian)：强制转换数据不需要调整字节内容，1、2、4字节的存储方式一样。</p></li><li><p>大端模式(Big-Endian)：符号位的判定固定为第一个字节，容易判断正负。</p></li></ul><h2 id="大小端的判断"><a href="#大小端的判断" class="headerlink" title="大小端的判断"></a>大小端的判断</h2><p>简单介绍两种方法<br>方法1：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">hehe</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">&#125;un;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    un.a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(un.c == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;小端存储\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;大端存储\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法2：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> *p = (<span class="keyword">char</span> *)&amp;a;</span><br><span class="line">    <span class="keyword">if</span>(*p == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;小端存储\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;大端存储\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="网络字节序与主机字节序"><a href="#网络字节序与主机字节序" class="headerlink" title="网络字节序与主机字节序"></a>网络字节序与主机字节序</h1><ul><li><p>网络字节顺序NBO（Network Byte Order）：按从高到低的顺序存储，在网络上使用统一的网络字节顺序，可以避免兼容性问题。</p></li><li><p>主机字节顺序（HBO，Host Byte Order）：不同的机器HBO不相同，与CPU设计有关计算机数据存储有两种字节优先顺序：高位字节优先和低位字节优先。</p></li></ul><p>Internet上数据以高位字节优先顺序在网络上传输，所以对于在内部是以低位字节优先方式存储数据的机器，在Internet上传输数据时就需要进行转换。</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://blog.csdn.net/qq_27384769/article/details/80700320">https://blog.csdn.net/qq_27384769/article/details/80700320</a><br><a href="https://blog.csdn.net/Dawn_sf/article/details/54565487">https://blog.csdn.net/Dawn_sf/article/details/54565487</a><br><a href="https://blog.csdn.net/liubing8609/article/details/82054745">https://blog.csdn.net/liubing8609/article/details/82054745</a><br><a href="https://blog.csdn.net/ywgdk/article/details/52788447">https://blog.csdn.net/ywgdk/article/details/52788447</a></p>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jni </tag>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>W/linker: libxxx.so: unused DT entry: type 0x6ffffffe arg 0x5a4</title>
      <link href="/blog/2019/03/05/W-linker-libxxx-so-unused-DT-entry-type-0x6ffffffe-arg-0x5a4/"/>
      <url>/blog/2019/03/05/W-linker-libxxx-so-unused-DT-entry-type-0x6ffffffe-arg-0x5a4/</url>
      
        <content type="html"><![CDATA[<p>我正在使用<a href="https://github.com/xmaihh/Android-Serialport">libserialport.so</a>,在运行时，我收到以下警告:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">W/linker: libserialport.so: unused DT entry: type <span class="number">0x6ffffffe</span> arg <span class="number">0x5a4</span></span><br><span class="line">    libserialport.so: unused DT entry: type <span class="number">0x6fffffff</span> arg <span class="number">0x1</span></span><br></pre></td></tr></table></figure><h1 id="Q-What-are-“unused-DT-entry”-errors"><a href="#Q-What-are-“unused-DT-entry”-errors" class="headerlink" title="Q:What are “unused DT entry” errors?"></a>Q:What are “unused DT entry” errors?</h1><p>If you have reached this page, it’s probably because you have compiled or attempted to run some binaries on your ARM based Android system, with the result that your binary/app crashes or generates a lot of warnings in your logcat. Typically something like this:</p><p>如果您已到达此页面，可能是因为您已编译或尝试在基于ARM的Android系统上运行某些二进制文件，结果导致您的二进制文件/应用程序崩溃或在您的系统中生成大量警告  logcat。通常是这样的:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WARNING: linker: /blahblah/libopenssl.so: unused DT entry: type <span class="number">0x6ffffffe</span> arg <span class="number">0x1188</span></span><br></pre></td></tr></table></figure><h1 id="Q-What-is-a-“DT-entry”"><a href="#Q-What-is-a-“DT-entry”" class="headerlink" title="Q: What is a “DT entry”?"></a>Q: What is a “DT entry”?</h1><p>In a few words, they are descriptive array entries in the file structure of an ELF file. Specifically they are known as  Dynamic Array Tags and are requirements for executable and shared objects. However, not all entries are required or available, depending on the processor and kernel architecture.</p><p>In our case we are faced with a “Warning” that one of these are “unused”. What that means is, that your executable or library (*.so) files has been compiled with the DT entry indicated, but your kernel is not supporting that entry, for various reasons. The best examples are found on ARM based Android systems, where the system library paths are fixed and the cross compilers used for your firmware (OS/kernel) are set not to use these entries. Usually the binaries still run just fine, but the kernel is flagging this warning every time you’re using it.</p><p>简而言之，它们是<a href="https://en.wikipedia.org/wiki/Executable_and_Linkable_Format">ELF</a>文件的文件结构中的描述性数组条目  。具体而言，它们被称为  Dynamic Array Tags 可执行和共享对象的要求。但是，并非所有条目都是必需的或可用的，具体取决于处理器和内核体系结构。在我们的案例中，我们面临一个“警告”，其中一个是“未使用”。这意味着，您的可执行文件或库（*.so）文件已使用 指示的DT条目进行编译  ，但由于各种原因，您的内核不支持该条目。最好的例子可以在基于ARM的Android系统上找到，其中系统库路径是固定的，用于固件的交叉编译器（OS /内核）设置为不使用这些条目。通常二进制文件仍然可以正常运行，但内核每次使用它时都会标记此警告。</p><h1 id="Q-When-does-this-happen"><a href="#Q-When-does-this-happen" class="headerlink" title="Q: When does this happen?"></a>Q: When does this happen?</h1><p>This can happen when:</p><ul><li>Your ARM kernel is cross-compiled using the wrong flags (usually meant for other processor architectures).</li><li>您的ARM内核使用错误的标志进行交叉编译（通常用于其他处理器体系结构）。</li><li>Your ARM binaries and libraries are cross-compiled using AOS deprecated compilation flags.</li><li>您的ARM二进制文件和库是使用AOS弃用的编译标志进行交叉编译的。</li><li>and probably other ways yet to be discovered..</li><li>可能还有其他方法尚待发现..</li></ul><blockquote><p>Starting from 5.1 (API 22) the Android linker warns about the VERNEED and VERNEEDNUM ELF dynamic sections.</p></blockquote><blockquote><p>从5.1（API 22）开始，Android链接器会警告VERNEED和VERNEEDNUM ELF动态部分。</p></blockquote><p>The most common flags that cause this error on Android devices are:</p><p>在Android设备上导致此错误的最常见标志是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">DT_RPATH        <span class="number">0x0f</span> (<span class="number">15</span>)       The DT_STRTAB string table offset of a <span class="keyword">null</span>-terminated library search path string. </span><br><span class="line">                                This element<span class="string">&#x27;s use has been superseded by DT_RUNPATH.</span></span><br><span class="line"><span class="string">DT_RUNPATH      0x1d (29)       The DT_STRTAB string table offset of a null-terminated library search path string.</span></span><br><span class="line"><span class="string">DT_VERNEED      0x6ffffffe      The address of the version dependency table. Elements within this table contain </span></span><br><span class="line"><span class="string">                                indexes into the string table DT_STRTAB. This element requires that the </span></span><br><span class="line"><span class="string">                                DT_VERNEEDNUM element also be present.</span></span><br><span class="line"><span class="string">DT_VERNEEDNUM   0x6fffffff      The number of entries in the DT_VERNEEDNUM table.</span></span><br></pre></td></tr></table></figure><p>Tracking down the error above, we find that this message comes from the <code>bionic</code> library <a href="https://github.com/aosp-mirror/platform_bionic/blob/1fedfedda8a2b75ed56669e28265f943312ec22f/linker/linker.cpp#L2967-L2986">linker.cpp</a>:<br>追踪上面的错误，我们发现此消息来自  <code>bionic</code> 库<a href="https://github.com/aosp-mirror/platform_bionic/blob/1fedfedda8a2b75ed56669e28265f943312ec22f/linker/linker.cpp#L2967-L2986">linker.cpp</a>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">case</span> DT_VERNEED:</span><br><span class="line">    verneed_ptr_ = load_bias + d-&gt;d_un.d_ptr;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">case</span> DT_VERNEEDNUM:</span><br><span class="line">    verneed_cnt_ = d-&gt;d_un.d_val;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">case</span> DT_RUNPATH:</span><br><span class="line">    <span class="comment">// this is parsed after we have strtab initialized (see below).</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    <span class="keyword">if</span> (!relocating_linker) &#123;</span><br><span class="line">      DL_WARN(<span class="string">&quot;\&quot;%s\&quot; unused DT entry: type %p arg %p&quot;</span>, get_realpath(),</span><br><span class="line">          reinterpret_cast&lt;<span class="keyword">void</span>*&gt;(d-&gt;d_tag), reinterpret_cast&lt;<span class="keyword">void</span>*&gt;(d-&gt;d_un.d_val));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The code (above) supporting this symbol versioning was committed on April 9, 2015. Thus if your NDK build is either set to support API’s earlier than this, or using build tools linking to this earlier library, you will get these warnings.</p><p>支持此<a href="https://lists.debian.org/lsb-spec/1999/12/msg00017.html">符号版本控制</a>的代码（上文）   于<a href="https://github.com/android/platform_bionic/commit/2a815361448d01b0f4e575f507ce31913214c536#diff-9d78f752a519d0c92b4cf2c888fe26e4">2015</a>年<a href="https://github.com/android/platform_bionic/commit/2a815361448d01b0f4e575f507ce31913214c536#diff-9d78f752a519d0c92b4cf2c888fe26e4">4月9日</a>提交  。因此，如果您的NDK构建设置为支持早于此的API，或者使用链接到此早期库的构建工具，您将收到这些警告。</p><h1 id="Q-How-do-I-find-what-DT-entries-my-system-or-binaries-are-using"><a href="#Q-How-do-I-find-what-DT-entries-my-system-or-binaries-are-using" class="headerlink" title="Q: How do I find what DT entries my system or binaries are using?"></a>Q: How do I find what DT entries my system or binaries are using?</h1><p>There are many ways to do this:</p><ol><li>You look into your kernel sources for <code>&lt;linux/elf.h&gt;</code>.</li><li>You look in your Android NDK installation folders and check:</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> To find all elf.h files:</span></span><br><span class="line">find /&lt;path_to&gt;/ndk/platforms/android-*/arch-arm*/usr/include/linux/ -iname &quot;elf.h&quot;</span><br></pre></td></tr></table></figure><ol start="3"><li>Do an readelf of your binary:</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> readelf --dynamic libopenssl.so</span></span><br><span class="line"></span><br><span class="line"> Dynamic section at offset 0x23b960 contains 28 entries:</span><br><span class="line"> Tag        Type                         Name/Value</span><br><span class="line"> 0x00000003 (PLTGOT)                     0x23ce18</span><br><span class="line"> 0x00000002 (PLTRELSZ)                   952 (bytes)</span><br><span class="line"> 0x00000017 (JMPREL)                     0x15e70</span><br><span class="line"> 0x00000014 (PLTREL)                     REL</span><br><span class="line"> 0x00000011 (REL)                        0x11c8</span><br><span class="line"> 0x00000012 (RELSZ)                      85160 (bytes)</span><br><span class="line"> 0x00000013 (RELENT)                     8 (bytes)</span><br><span class="line"> 0x6ffffffa (RELCOUNT)                   10632</span><br><span class="line"> 0x00000015 (DEBUG)                      0x0</span><br><span class="line"> 0x00000006 (SYMTAB)                     0x148</span><br><span class="line"> 0x0000000b (SYMENT)                     16 (bytes)</span><br><span class="line"> 0x00000005 (STRTAB)                     0x918</span><br><span class="line"> 0x0000000a (STRSZ)                      1011 (bytes)</span><br><span class="line"> 0x00000004 (HASH)                       0xd0c</span><br><span class="line"> 0x00000001 (NEEDED)                     Shared library: [libdl.so]</span><br><span class="line"> 0x00000001 (NEEDED)                     Shared library: [libc.so]</span><br><span class="line"> 0x0000001a (FINI_ARRAY)                 0x238458</span><br><span class="line"> 0x0000001c (FINI_ARRAYSZ)               8 (bytes)</span><br><span class="line"> 0x00000019 (INIT_ARRAY)                 0x238460</span><br><span class="line"> 0x0000001b (INIT_ARRAYSZ)               16 (bytes)</span><br><span class="line"> 0x00000020 (PREINIT_ARRAY)              0x238470</span><br><span class="line"> 0x00000021 (PREINIT_ARRAYSZ)            0x8</span><br><span class="line"> 0x0000001e (FLAGS)                      BIND_NOW</span><br><span class="line"> 0x6ffffffb (FLAGS_1)                    Flags: NOW</span><br><span class="line"> 0x6ffffff0 (VERSYM)                     0x108c</span><br><span class="line"> 0x6ffffffe (VERNEED)                    0x1188</span><br><span class="line"> 0x6fffffff (VERNEEDNUM)                 2</span><br><span class="line"> 0x00000000 (NULL)                       0x0</span><br></pre></td></tr></table></figure><p> As you can see from the error above, the type corresponds to DT_VERNEED.</p><p>From <a href="http://docs.oracle.com/cd/E23824_01/html/819-0690/chapter6-42444.html#scrolltoc">THIS</a> document:</p><blockquote><p>DT_RPATH</p></blockquote><p>This element holds the string table offset of a null-terminated search library search path string, discussed in “Shared Object Dependencies.” The offset is an index into the table recorded in the DT_STRTAB entry. DT_RPATH may give a string that holds a list of directories, separated by colons (:). All LD_LIBRARY_PATH directories are searched after those from DT_RPATH.</p><p>DT_RPATH此元素保存以“共享对象依赖关系”中讨论的以null结尾的搜索库搜索路径字符串的字符串表偏移量。偏移量是DT_STRTAB条目中记录的表的索引。DT_RPATH可以给出一个包含目录列表的字符串，以冒号（:)分隔。在DT_RPATH之后搜索所有LD_LIBRARY_PATH目录。</p><h1 id="Q-So-how-do-you-solve-or-deal-with-these-issues"><a href="#Q-So-how-do-you-solve-or-deal-with-these-issues" class="headerlink" title="Q: So how do you solve or deal with these issues?"></a>Q: So how do you solve or deal with these issues?</h1><p>There are essentially 3 ways to deal with this:</p><ol><li>the quick</li><li>the bad</li><li>the ugly</li></ol><h2 id="The-Quick-you-don’t-have-any-sources-or-just-can’t-be-bothered"><a href="#The-Quick-you-don’t-have-any-sources-or-just-can’t-be-bothered" class="headerlink" title="The Quick (you don’t have any sources or just can’t be bothered)"></a>The Quick (you don’t have any sources or just can’t be bothered)</h2><p>Use an “ELF cleaner” to remove the offending DT entries from a all your binaries. This is an easy and quick remedy, especially when you don’t have the sources to recompile them properly for your system. There are at least <a href="https://github.com/kost/android-elf-cleaner">two cleaners</a> out there that you can use.</p><h2 id="The-Bad-you-have-the-sources"><a href="#The-Bad-you-have-the-sources" class="headerlink" title="The Bad (you have the sources)"></a>The Bad (you have the sources)</h2><p>Is the right way to do it, because you’ll become a bad-ass ARM cross compiler guru in the process of getting it to work. You basically need to find and tune the compiler settings in the Makefiles used.</p><p>From <a href="https://gitlab.com/jbwhips883/termux-packages">here</a>:</p><p><a href="https://github.com/kost/android-elf-cleaner">解决方法：https://github.com/kost/android-elf-cleaner</a></p><blockquote><p>The Android linker (/system/bin/linker) does not support RPATH or RUNPATH, so we set LD_LIBRARY_PATH=$USR/lib and try to avoid building useless rpath entries with –disable-rpath configure flags. Another option to avoid depending on LD_LIBRARY_PATH would be supplying a custom linker - this is not done due to the overhead of maintaining a custom linker.</p></blockquote><h2 id="The-Ugly-You-just-want-your-app-to-work-with-any-dirty-binary"><a href="#The-Ugly-You-just-want-your-app-to-work-with-any-dirty-binary" class="headerlink" title="The Ugly (You just want your app to work with any dirty binary.)"></a>The Ugly (You just want your app to work with any dirty binary.)</h2><p>You tell your Java app not to freak out when checking for null in error handlers and instead get fed these warnings, possibly causing fatal exceptions. Use something like:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OpensslErrorThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">                String line = opensslStderr.readLine();</span><br><span class="line">                <span class="keyword">if</span>(line == <span class="keyword">null</span>)&#123;</span><br><span class="line">                    <span class="comment">// OK</span></span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(line.contains(<span class="string">&quot;unused DT entry&quot;</span>))&#123;</span><br><span class="line">                    Log.i(TAG, <span class="string">&quot;Ignoring \&quot;unused DT entry\&quot; error from openssl: &quot;</span> + line);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// throw exception!</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">            Log.e(TAG, <span class="string">&quot;Exception!&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This is very bad and ugly as it doesn’t solve anything, while bloating your code. In addition, the warnings are there for a reason, and that is that in future AOS versions, this will become a full fledged error!</p><h1 id="Q-What-else"><a href="#Q-What-else" class="headerlink" title="Q. What else?"></a>Q. What else?</h1><p>Many changes in the API’s between 18-25 (J to N) has been made in way the Android kernel and libraries are compiled. I cannot provide a remotely close explanation of all that, but perhaps this will help guide you in the right direction. The best sources is of course looking in the Android sources and documentation itself.</p><p>For example, <a href="https://github.com/android/platform_bionic/blob/master/android-changes-for-ndk-developers.md">HERE</a> or <a href="https://developer.android.com/ndk/guides/standalone_toolchain.html">HERE</a>.</p><p>And finally the full list:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">Name                    Value           d_un            Executable              Shared Object</span><br><span class="line">---------------------------------------------------------------------------------------------</span><br><span class="line">DT_NULL                 0               Ignored         Mandatory               Mandatory</span><br><span class="line">DT_NEEDED               1               d_val           Optional                Optional</span><br><span class="line">DT_PLTRELSZ             2               d_val           Optional                Optional</span><br><span class="line">DT_PLTGOT               3               d_ptr           Optional                Optional</span><br><span class="line">DT_HASH                 4               d_ptr           Mandatory               Mandatory</span><br><span class="line">DT_STRTAB               5               d_ptr           Mandatory               Mandatory</span><br><span class="line">DT_SYMTAB               6               d_ptr           Mandatory               Mandatory</span><br><span class="line">DT_RELA                 7               d_ptr           Mandatory               Optional</span><br><span class="line">DT_RELASZ               8               d_val           Mandatory               Optional</span><br><span class="line">DT_RELAENT              9               d_val           Mandatory               Optional</span><br><span class="line">DT_STRSZ                0x0a (10)       d_val           Mandatory               Mandatory</span><br><span class="line">DT_SYMENT               0x0b (11)       d_val           Mandatory               Mandatory</span><br><span class="line">DT_INIT                 0x0c (12)       d_ptr           Optional                Optional</span><br><span class="line">DT_FINI                 0x0d (13)       d_ptr           Optional                Optional</span><br><span class="line">DT_SONAME               0x0e (14)       d_val           Ignored                 Optional</span><br><span class="line">DT_RPATH                0x0f (15)       d_val           Optional                Optional</span><br><span class="line">DT_SYMBOLIC             0x10 (16)       Ignored         Ignored                 Optional</span><br><span class="line">DT_REL                  0x11 (17)       d_ptr           Mandatory               Optional</span><br><span class="line">DT_RELSZ                0x12 (18)       d_val           Mandatory               Optional</span><br><span class="line">DT_RELENT               0x13 (19)       d_val           Mandatory               Optional</span><br><span class="line">DT_PLTREL               0x14 (20)       d_val           Optional                Optional</span><br><span class="line">DT_DEBUG                0x15 (21)       d_ptr           Optional                Ignored</span><br><span class="line">DT_TEXTREL              0x16 (22)       Ignored         Optional                Optional</span><br><span class="line">DT_JMPREL               0x17 (23)       d_ptr           Optional                Optional</span><br><span class="line">DT_BIND_NOW             0x18 (24)       Ignored         Optional                Optional</span><br><span class="line">DT_INIT_ARRAY           0x19 (25)       d_ptr           Optional                Optional</span><br><span class="line">DT_FINI_ARRAY           0x1a (26)       d_ptr           Optional                Optional</span><br><span class="line">DT_INIT_ARRAYSZ         0x1b (27)       d_val           Optional                Optional</span><br><span class="line">DT_FINI_ARRAYSZ         0x1c (28)       d_val           Optional                Optional</span><br><span class="line">DT_RUNPATH              0x1d (29)       d_val           Optional                Optional</span><br><span class="line">DT_FLAGS                0x1e (30)       d_val           Optional                Optional</span><br><span class="line">DT_ENCODING             0x1f (32)       Unspecified     Unspecified             Unspecified</span><br><span class="line">DT_PREINIT_ARRAY        0x20 (32)       d_ptr           Optional                Ignored</span><br><span class="line">DT_PREINIT_ARRAYSZ      0x21 (33)       d_val           Optional                Ignored</span><br><span class="line">DT_MAXPOSTAGS           0x22 (34)       Unspecified     Unspecified             Unspecified</span><br><span class="line">DT_LOOS                 0x6000000d      Unspecified     Unspecified             Unspecified</span><br><span class="line">DT_SUNW_AUXILIARY       0x6000000d      d_ptr           Unspecified             Optional</span><br><span class="line">DT_SUNW_RTLDINF         0x6000000e      d_ptr           Optional                Optional</span><br><span class="line">DT_SUNW_FILTER          0x6000000e      d_ptr           Unspecified             Optional</span><br><span class="line">DT_SUNW_CAP             0x60000010      d_ptr           Optional                Optional</span><br><span class="line">DT_SUNW_SYMTAB          0x60000011      d_ptr           Optional                Optional</span><br><span class="line">DT_SUNW_SYMSZ           0x60000012      d_val           Optional                Optional</span><br><span class="line">DT_SUNW_ENCODING        0x60000013      Unspecified     Unspecified             Unspecified</span><br><span class="line">DT_SUNW_SORTENT         0x60000013      d_val           Optional                Optional</span><br><span class="line">DT_SUNW_SYMSORT         0x60000014      d_ptr           Optional                Optional</span><br><span class="line">DT_SUNW_SYMSORTSZ       0x60000015      d_val           Optional                Optional</span><br><span class="line">DT_SUNW_TLSSORT         0x60000016      d_ptr           Optional                Optional</span><br><span class="line">DT_SUNW_TLSSORTSZ       0x60000017      d_val           Optional                Optional</span><br><span class="line">DT_SUNW_CAPINFO         0x60000018      d_ptr           Optional                Optional</span><br><span class="line">DT_SUNW_STRPAD          0x60000019      d_val           Optional                Optional</span><br><span class="line">DT_SUNW_CAPCHAIN        0x6000001a      d_ptr           Optional                Optional</span><br><span class="line">DT_SUNW_LDMACH          0x6000001b      d_val           Optional                Optional</span><br><span class="line">DT_SUNW_CAPCHAINENT     0x6000001d      d_val           Optional                Optional</span><br><span class="line">DT_SUNW_CAPCHAINSZ      0x6000001f      d_val           Optional                Optional</span><br><span class="line">DT_HIOS                 0x6ffff000      Unspecified     Unspecified             Unspecified</span><br><span class="line">DT_VALRNGLO             0x6ffffd00      Unspecified     Unspecified             Unspecified</span><br><span class="line">DT_CHECKSUM             0x6ffffdf8      d_val           Optional                Optional</span><br><span class="line">DT_PLTPADSZ             0x6ffffdf9      d_val           Optional                Optional</span><br><span class="line">DT_MOVEENT              0x6ffffdfa      d_val           Optional                Optional</span><br><span class="line">DT_MOVESZ               0x6ffffdfb      d_val           Optional                Optional</span><br><span class="line">DT_POSFLAG_1            0x6ffffdfd      d_val           Optional                Optional</span><br><span class="line">DT_SYMINSZ              0x6ffffdfe      d_val           Optional                Optional</span><br><span class="line">DT_SYMINENT             0x6ffffdff      d_val           Optional                Optional</span><br><span class="line">DT_VALRNGHI             0x6ffffdff      Unspecified     Unspecified             Unspecified</span><br><span class="line">DT_ADDRRNGLO            0x6ffffe00      Unspecified     Unspecified             Unspecified</span><br><span class="line">DT_CONFIG               0x6ffffefa      d_ptr           Optional                Optional</span><br><span class="line">DT_DEPAUDIT             0x6ffffefb      d_ptr           Optional                Optional</span><br><span class="line">DT_AUDIT                0x6ffffefc      d_ptr           Optional                Optional</span><br><span class="line">DT_PLTPAD               0x6ffffefd      d_ptr           Optional                Optional</span><br><span class="line">DT_MOVETAB              0x6ffffefe      d_ptr           Optional                Optional</span><br><span class="line">DT_SYMINFO              0x6ffffeff      d_ptr           Optional                Optional</span><br><span class="line">DT_ADDRRNGHI            0x6ffffeff      Unspecified     Unspecified             Unspecified</span><br><span class="line">DT_RELACOUNT            0x6ffffff9      d_val           Optional                Optional</span><br><span class="line">DT_RELCOUNT             0x6ffffffa      d_val           Optional                Optional</span><br><span class="line">DT_FLAGS_1              0x6ffffffb      d_val           Optional                Optional</span><br><span class="line">DT_VERDEF               0x6ffffffc      d_ptr           Optional                Optional</span><br><span class="line">DT_VERDEFNUM            0x6ffffffd      d_val           Optional                Optional</span><br><span class="line">DT_VERNEED              0x6ffffffe      d_ptr           Optional                Optional</span><br><span class="line">DT_VERNEEDNUM           0x6fffffff      d_val           Optional                Optional</span><br><span class="line">DT_LOPROC               0x70000000      Unspecified     Unspecified             Unspecified</span><br><span class="line">DT_SPARC_REGISTER       0x70000001      d_val           Optional                Optional</span><br><span class="line">DT_AUXILIARY            0x7ffffffd      d_val           Unspecified             Optional</span><br><span class="line">DT_USED                 0x7ffffffe      d_val           Optional                Optional</span><br><span class="line">DT_FILTER               0x7fffffff      d_val           Unspecified             Optional</span><br><span class="line">DT_HIPROC               0x7fffffff      Unspecified     Unspecified             Unspecified</span><br></pre></td></tr></table></figure><h1 id="WARNING-linker-demo-unused-DT-entry-type-0x6ffffffe-解决！！"><a href="#WARNING-linker-demo-unused-DT-entry-type-0x6ffffffe-解决！！" class="headerlink" title="WARNING: linker: ./demo: unused DT entry: type 0x6ffffffe 解决！！"></a>WARNING: linker: ./demo: unused DT entry: type 0x6ffffffe 解决！！</h1><ul><li>demo.c</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;www.chinapyg.com!\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Android.mk</li></ul><figure class="highlight mk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">LOCAL_PATH := <span class="variable">$(<span class="built_in">call</span> my-<span class="built_in">dir</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(CLEAR_VARS)</span></span><br><span class="line"></span><br><span class="line">LOCAL_MODULE    := demo </span><br><span class="line">LOCAL_SRC_FILES := ../demo.c </span><br><span class="line">LOCAL_ARM_MODE := arm</span><br><span class="line">LOCAL_CFLAGS := -g</span><br><span class="line">LOCAL_CFLAGS += -pie -fPIE</span><br><span class="line">LOCAL_LDFLAGS += -pie -fPIE</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(BUILD_EXECUTABLE)</span></span><br></pre></td></tr></table></figure><ul><li>Application.mk</li></ul><figure class="highlight mk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">APP_OPTIM := release</span><br><span class="line">APP_PLATFORM := android-14  </span><br><span class="line">APP_ABI := armeabi-v7a</span><br></pre></td></tr></table></figure><ul><li>NDK编译:</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\piao\Downloads\adbi\demo\jni</span><br><span class="line">λ ndk-build.cmd</span><br><span class="line">[armeabi-v7a] Compile arm    : demo &lt;= demo.c</span><br><span class="line">[armeabi-v7a] Executable     : demo</span><br><span class="line">[armeabi-v7a] Install        : demo =&gt; libs/armeabi-v7a/demo</span><br></pre></td></tr></table></figure><p>经过测试~~</p><p>此警告只会在5.0以上系统出现：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@ido:/data/<span class="built_in">local</span>/tmp <span class="comment"># ./demo</span></span><br><span class="line">WARNING: linker: ./demo: unused DT entry: <span class="built_in">type</span> 0x6ffffffe arg 0x41c</span><br><span class="line">WARNING: linker: ./demo: unused DT entry: <span class="built_in">type</span> 0x6fffffff arg 0x1</span><br><span class="line">www.chinapyg.com!</span><br></pre></td></tr></table></figure><p>解决方法：<a href="https://github.com/kost/android-elf-cleaner">https://github.com/kost/android-elf-cleaner</a></p><p>在Ubuntu16.04编译后:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">piao@piaopiao:~/Desktop/android-elf-cleaner$ make</span><br><span class="line">g++   -std=c++14 -Wall -Wextra -pedantic -Werror android-elf-cleaner.cpp -o android-elf-cleaner</span><br></pre></td></tr></table></figure><p>然后执行:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">piao@piaopiao:~/Desktop/android-elf-cleaner$ ./android-elf-cleaner demo</span><br><span class="line">./android-elf-cleaner: Removing the DT_VERNEEDED dynamic section entry from <span class="string">&#x27;demo&#x27;</span></span><br><span class="line">./android-elf-cleaner: Removing the DT_VERNEEDNUM dynamic section entry from <span class="string">&#x27;demo&#x27;</span></span><br><span class="line">piao@piaopiao:~/Desktop/android-elf-cleaner$</span><br></pre></td></tr></table></figure><p>再次push到手机里面运行:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@ido:/data/<span class="built_in">local</span>/tmp <span class="comment"># ./demo</span></span><br><span class="line">www.chinapyg.com!</span><br></pre></td></tr></table></figure><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://stackoverflow.com/questions/33206409/unused-dt-entry-type-0x1d-arg">https://stackoverflow.com/questions/33206409/unused-dt-entry-type-0x1d-arg</a><br><a href="http://blog.sina.com.cn/s/blog_602f87700102x01t.html">NDK升级遇到的一些问题汇总</a><br><a href="https://www.dllhook.com/post/211.html"> WARNING: linker: ./demo: unused DT entry: type 0x6ffffffe 解决！！</a></p>]]></content>
      
      
      <categories>
          
          <category> Android Framework </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> AndroidStudio </tag>
            
            <tag> Jni </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java-getExtractedText对android上的非活动InputConnection警告</title>
      <link href="/blog/2019/03/05/java-getExtractedText%E5%AF%B9android%E4%B8%8A%E7%9A%84%E9%9D%9E%E6%B4%BB%E5%8A%A8InputConnection%E8%AD%A6%E5%91%8A/"/>
      <url>/blog/2019/03/05/java-getExtractedText%E5%AF%B9android%E4%B8%8A%E7%9A%84%E9%9D%9E%E6%B4%BB%E5%8A%A8InputConnection%E8%AD%A6%E5%91%8A/</url>
      
        <content type="html"><![CDATA[<p>我在logcat中获得以下警告</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">W/IInputConnectionWrapper: finishComposingText on inactive InputConnection</span><br></pre></td></tr></table></figure><p>一直找不到背后的原因,网上找到一个类似的问题，看到如下的<code>logcat</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">W/IInputConnectionWrapper(<span class="number">21214</span>): getTextBeforeCursor on inactive InputConnection</span><br><span class="line">W/IInputConnectionWrapper(<span class="number">21214</span>): getSelectedText on inactive InputConnection</span><br><span class="line">W/IInputConnectionWrapper(<span class="number">21214</span>): getTextBeforeCursor on inactive InputConnection</span><br><span class="line">W/IInputConnectionWrapper(<span class="number">21214</span>): getTextAfterCursor on inactive InputConnection</span><br><span class="line">...</span><br><span class="line">I/Choreographer(<span class="number">20010</span>): Skipped <span class="number">30</span> frames!  The application may be doing too much work on its main thread.</span><br></pre></td></tr></table></figure><h1 id="我的情况"><a href="#我的情况" class="headerlink" title="我的情况"></a>我的情况</h1><p>我有一个EditText视图用户类型。当用户按下按钮时，EditText被清除。当我快速按下按钮时，很多非活动的InputConnection条目流出。</p><p>例如:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">editText.setText(<span class="keyword">null</span>);</span><br></pre></td></tr></table></figure><p>我的logcat中的最后一行提供了一个很好的指示，正在发生什么。果然，InputConnection被清除文本的请求所淹没。我试图修改代码以检查文本长度，然后再尝试清除它:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (editText.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    editText.setText(<span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这有助于缓解快速按下按钮不再导致<code>IInputConnectionWrapper</code>警告流的问题。然而，当用户在键入东西和按下按钮之间快速交替时，或者当应用程序处于充分负载等时按下按钮，这仍然容易出现问题。</p><p>幸运的是，我发现了另一种方式来清除文本：<code>Editable.clear()</code>.有了这一点，我不会得到警告：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (editText.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    editText.getText().clear();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，如果你想清除所有的输入状态，而不只是文本(自动文本，autocap，multitap，撤消)，你可以使用<code>TextKeyListener.clear(Editable e)</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (editText.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    TextKeyListener.clear(editText.getText());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://codeday.me/bug/20180429/159033.html">android - W/IInputConnectionWrapper(1066)：showStatusIcon在非活动的InputConnection</a><br><a href="https://codeday.me/bug/20190108/514667.html">java - 如何将活动上下文放入非活动类android？</a><br><a href="https://codeday.me/bug/20170829/64838.html">android - 警告：导出的活动不需要权限</a><br><a href="https://codeday.me/bug/20181213/451206.html">android-activity - 在非活动类中获取当前活动上下文</a><br><a href="https://codeday.me/bug/20180508/160725.html">java - 从非活动单例类获取应用程序上下文</a><br><a href="https://codeday.me/bug/20181007/280723.html">android - 在超时警告通知后检索活动</a><br><a href="https://codeday.me/bug/20170714/40764.html">java - 使用非活动的startActivityForResult</a><br><a href="https://codeday.me/bug/20180105/113304.html">Java PMD对非临时类成员的警告</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> AndroidStudio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[译文]Android内存泄漏的八种对应解决办法(下)</title>
      <link href="/blog/2019/02/26/%E8%AF%91%E6%96%87-Android%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E7%9A%84%E5%85%AB%E7%A7%8D%E5%AF%B9%E5%BA%94%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95-%E4%B8%8B/"/>
      <url>/blog/2019/02/26/%E8%AF%91%E6%96%87-Android%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E7%9A%84%E5%85%AB%E7%A7%8D%E5%AF%B9%E5%BA%94%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95-%E4%B8%8B/</url>
      
        <content type="html"><![CDATA[<p>在上一篇<a href="https://xmaihh.github.io/2019/02/26/%E8%AF%91%E6%96%87-Android%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E7%9A%84%E5%85%AB%E7%A7%8D%E5%8F%AF%E8%83%BD-%E4%B8%8A/"><code>[译文]Android内存泄漏的八种可能(上)</code></a>中，我们讨论了八种容易发生内存泄漏的代码。其中，尤其严重的是泄漏<code>Activity</code>对象，因为它占用了大量系统内存。不管内存泄漏的代码表现形式如何，其核心问题在于：</p><ul><li>在Activity生命周期之外仍持有其引用</li></ul><p>幸运的是，一旦泄漏发生且被定位到了，修复方法是相当简单的。</p><h1 id="Static-Actitivities"><a href="#Static-Actitivities" class="headerlink" title="Static Actitivities"></a>Static Actitivities</h1><p>这种泄漏</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> MainActivity activity;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setStaticActivity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    activity = <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构造静态变量持有<code>Activity</code>对象很容易造成内存泄漏，因为静态变量是全局存在的，所以当MainActivity生命周期结束时，引用仍被持有。这种写法开发者是有理由来使用的，所以我们需要正确的释放引用让垃圾回收机制在它被销毁的同时将其回收。</p><p>Android提供了特殊的<code>Set</code>集合 <a href="https://developer.android.com/reference/java/lang/ref/package-summary.html#classes">https://developer.android.com/reference/java/lang/ref/package-summary.html#classes</a></p><p>允许开发者控制引用的“强度”。<code>Activity</code>对象泄漏是由于需要被销毁时，仍然被强引用着，只要强引用存在就无法被回收。</p><p>可以用弱引用代替强引用。</p><p><a href="https://developer.android.com/reference/java/lang/ref/WeakReference.html">https://developer.android.com/reference/java/lang/ref/WeakReference.html</a></p><p>弱引用不会阻止对象的内存释放，所以即使有弱引用的存在，该对象也可以被回收。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> WeakReference&lt;MainActivity&gt; activityReference;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">setStaticActivity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       activityReference = <span class="keyword">new</span> WeakReference&lt;MainActivity&gt;(<span class="keyword">this</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h1 id="Static-Views"><a href="#Static-Views" class="headerlink" title="Static Views"></a>Static Views</h1><p>静态变量持有View</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> View view;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setStaticView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    view = findViewById(R.id.sv_button);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于<code>View</code>持有其宿主<code>Activity</code>的引用，导致的问题与<code>Activity</code>一样严重。弱引用是个有效的解决方法，然而还有另一种方法是在生命周期结束时清除引用，<code>Activity#onDestory()</code>方法就很适合把引用置空。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> View view;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onDestroy();</span><br><span class="line">    <span class="keyword">if</span> (view != <span class="keyword">null</span>) &#123;</span><br><span class="line">        unsetStaticView();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">unsetStaticView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    view = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Inner-Class"><a href="#Inner-Class" class="headerlink" title="Inner Class"></a>Inner Class</h1><p>这种泄漏</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Object inner;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createInnerClass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    inner = <span class="keyword">new</span> InnerClass();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与上述两种情况相似，开发者必须注意少用<a href="https://docs.oracle.com/javase/tutorial/java/javaOO/nested.html">非静态内部类</a>，因为非静态内部类持有外部类的隐式引用，容易导致意料之外的泄漏。然而内部类可以访问外部类的私有变量，只要我们注意引用的生命周期，就可以避免意外的发生。</p><ul><li>避免静态变量</li></ul><p>这样持有内部类的成员变量是可以的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Object inner;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createInnerClass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    inner = <span class="keyword">new</span> InnerClass();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Anonymous-Classes"><a href="#Anonymous-Classes" class="headerlink" title="Anonymous Classes"></a>Anonymous Classes</h1><p>前面我们看到的都是持有全局生命周期的静态成员变量引起的，直接或间接通过链式引用<code>Activity</code>导致的泄漏。这次我们用<code>AsyncTask</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">startAsyncTask</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">new</span> AsyncTask&lt;Void, Void, Void&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span> <span class="function"><span class="keyword">protected</span> Void <span class="title">doInBackground</span><span class="params">(Void... params)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;.execute();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>Handler</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">new</span> Handler() &#123;</span><br><span class="line">        <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>.handleMessage(message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;.postDelayed(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, Long.MAX_VALUE &gt;&gt; <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>Thread</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">scheduleTimer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">new</span> Timer().schedule(<span class="keyword">new</span> TimerTask() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, Long.MAX_VALUE &gt;&gt; <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>全部都是因为<a href="https://docs.oracle.com/javase/tutorial/java/javaOO/anonymousclasses.html">匿名类</a>导致的。匿名类是特殊的内部类——写法更为简洁。当需要一次性特殊的子类时，Java提供的语法糖能让表达式最少化。这种很赞很偷懒的写法容易导致泄漏。正如使用内部类一样，只要不跨越生命周期，内部类是完全没问题的。但是，这些类是用于产生后台线程的，这些Java线程是全局的，而且持有创建者的引用（即匿名类的引用），而匿名类又持有外部类的引用。线程是可能长时间运行的，所以一直持有<code>Activity</code>的引用导致当销毁时无法回收。<br>这次我们不能通过移除静态成员变量解决，因为线程是于应用生命周期相关的。为了避免泄漏，我们必须舍弃简洁偷懒的写法，把子类声明为静态内部类。</p><ul><li>静态内部类不持有外部类的引用，打破了链式引用。</li></ul><p>所以对于<code>AsyncTask</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">NimbleTask</span> <span class="keyword">extends</span> <span class="title">AsyncTask</span>&lt;<span class="title">Void</span>, <span class="title">Void</span>, <span class="title">Void</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">protected</span> Void <span class="title">doInBackground</span><span class="params">(Void... params)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">startAsyncTask</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">new</span> NimbleTask().execute();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>Handler</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">NimbleHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.handleMessage(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">NimbleRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">new</span> NimbleHandler().postDelayed(<span class="keyword">new</span> NimbleRunnable(), Long.MAX_VALUE &gt;&gt; <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>TimerTask</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">NimbleTimerTask</span> <span class="keyword">extends</span> <span class="title">TimerTask</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">scheduleTimer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">new</span> Timer().schedule(<span class="keyword">new</span> NimbleTimerTask(), Long.MAX_VALUE &gt;&gt; <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是，如果你坚持使用匿名类，只要在生命周期结束时中断线程就可以。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Thread thread;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onDestroy();</span><br><span class="line">    <span class="keyword">if</span> (thread != <span class="keyword">null</span>) &#123;</span><br><span class="line">        thread.interrupt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">spawnThread</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    thread = <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">        <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">while</span> (!isInterrupted()) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    thread.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Sensor-Manager"><a href="#Sensor-Manager" class="headerlink" title="Sensor Manager"></a>Sensor Manager</h1><p>这种泄漏</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">registerListener</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SensorManager sensorManager = (SensorManager) getSystemService(SENSOR_SERVICE);</span><br><span class="line">    Sensor sensor = sensorManager.getDefaultSensor(Sensor.TYPE_ALL);</span><br><span class="line">    sensorManager.registerListener(<span class="keyword">this</span>, sensor, SensorManager.SENSOR_DELAY_FASTEST);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用Android系统服务不当容易导致泄漏，为了<code>Activity</code>与服务交互，我们把<code>Activity</code>作为监听器，引用链在传递事件和回调中形成了。只要<code>Activity</code>维持注册监听状态，引用就会一直持有，内存就不会被释放。</p><ul><li>在Activity结束时注销监听器</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> SensorManager sensorManager;</span><br><span class="line"><span class="keyword">private</span> Sensor sensor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onDestroy();</span><br><span class="line">    <span class="keyword">if</span> (sensor != <span class="keyword">null</span>) &#123;</span><br><span class="line">        unregisterListener();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">unregisterListener</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    sensorManager.unregisterListener(<span class="keyword">this</span>, sensor);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><code>Activity</code>泄漏的案例我们已经都走过一遍了，其他都大同小异。建议日后遇到类似的情况时，就使用相应的解决方法。内存泄漏只要发生过一次，通过详细的检查，很容易解决并防范于未然。</p><p>是时候做最佳实践者了！</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="http://blog.nimbledroid.com/2016/09/06/stop-memory-leaks.html">http://blog.nimbledroid.com/2016/09/06/stop-memory-leaks.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Android Framework </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[译文]Android内存泄漏的八种可能(上)</title>
      <link href="/blog/2019/02/26/%E8%AF%91%E6%96%87-Android%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E7%9A%84%E5%85%AB%E7%A7%8D%E5%8F%AF%E8%83%BD-%E4%B8%8A/"/>
      <url>/blog/2019/02/26/%E8%AF%91%E6%96%87-Android%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E7%9A%84%E5%85%AB%E7%A7%8D%E5%8F%AF%E8%83%BD-%E4%B8%8A/</url>
      
        <content type="html"><![CDATA[<p>Java是垃圾回收语言的一种，其优点是开发者无需特意管理内存分配，降低了应用由于局部故障(segmentation fault)导致崩溃，同时防止未释放的内存把堆栈(heap)挤爆的可能，所以写出来的代码更为安全。</p><p>不幸的是，在Java中仍存在很多容易导致内存泄漏的逻辑可能(logical leak)。如果不小心，你的Android应用很容易浪费掉未释放的内存，最终导致内存用光的错误抛出(out-of-memory，OOM)。</p><p>一般内存泄漏(traditional memory leak)的原因是：由忘记释放分配的内存导致的。（译者注：<code>Cursor</code>忘记关闭等）<br>逻辑内存泄漏(logical memory leak)的原因是：当应用不再需要这个对象，当仍未释放该对象的所有引用。</p><p><code>如果持有对象的强引用，垃圾回收器是无法在内存中回收这个对象。</code></p><p>在Android开发中，最容易引发的内存泄漏问题的是<a href="https://developer.android.com/reference/android/content/Context.html">Context</a>。比如<a href="https://developer.android.com/reference/android/app/Activity.html">Activity</a>的<code>Context</code>，就包含大量的内存引用，例如<code>View Hierarchies</code>和其他资源。一旦泄漏了<code>Context</code>，也意味泄漏它指向的所有对象。Android机器内存有限，太多的内存泄漏容易导致OOM。</p><p>检测逻辑内存泄漏需要主观判断，特别是对象的生命周期并不清晰。幸运的是，Activity有着明确的<a href="https://developer.android.com/reference/android/app/Activity.html#ActivityLifecycle">生命周期</a>，很容易发现泄漏的原因。<a href="https://developer.android.com/reference/android/app/Activity.html#onDestroy()">Activity.onDestroy()</a>被视为<code>Activity</code>生命的结束，程序上来看，它应该被销毁了，或者Android系统需要回收这些内存（译者注：当内存不够时，Android会回收看不见的<code>Activity</code>）。<br>如果这个方法执行完，在堆栈中仍存在持有该Activity的强引用，垃圾回收器就无法把它标记成已回收的内存，而我们本来目的就是要回收它！<br>结果就是<code>Activity</code>存活在它的生命周期之外。</p><p><code>Activity</code>是重量级对象，应该让Android系统来处理它。然而，逻辑内存泄漏总是在不经意间发生。（译者注：曾经试过一个Activity导致20M内存泄漏）。在Android中，导致潜在内存泄漏的陷阱不外乎两种：</p><ul><li>全局进程(process-global)的static变量。这个无视应用的状态，持有Activity的强引用的怪物。</li><li>活在Activity生命周期之外的线程。没有清空对Activity的强引用。</li></ul><p>检查一下你有没有遇到下列的情况。</p><h1 id="Static-Activities"><a href="#Static-Activities" class="headerlink" title="Static Activities"></a>Static Activities</h1><p>在类中定义了静态<code>Activity</code>变量，把当前运行的<code>Activity</code>实例赋值于这个静态变量。<br>如果这个静态变量在<code>Activity</code>生命周期结束后没有清空，就导致内存泄漏。因为static变量是贯穿这个应用的生命周期的，所以被泄漏的<code>Activity</code>就会一直存在于应用的进程中，不会被垃圾回收器回收。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> Activity activity;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">setStaticActivity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    activity = <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  View saButton = findViewById(R.id.sa_button);</span><br><span class="line">  saButton.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">      setStaticActivity();</span><br><span class="line">      nextActivity();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/02/26/5c74a0feb907c.png" alt="Memory Leak 1 - Static Activity"></p><h1 id="Static-Views"><a href="#Static-Views" class="headerlink" title="Static Views"></a>Static Views</h1><p>类似的情况会发生在单例模式中，如果<code>Activity</code>经常被用到，那么在内存中保存一个实例是很实用的。正如之前所述，强制延长<code>Activity</code>的生命周期是相当危险而且不必要的，无论如何都不能这样做。</p><p>特殊情况：如果一个View初始化耗费大量资源，而且在一个<code>Activity</code>生命周期内保持不变，那可以把它变成static，加载到视图树上(View Hierachy)，<a href="https://github.com/NimbleDroid/Memory-Leaks/blob/master/app/src/main/java/com/nimbledroid/memoryleaks/MainActivity.java#L132">像这样</a>，当<code>Activity</code>被销毁时，应当释放资源。（译者注：示例代码中并没有释放内存，把这个static view置null即可，但是还是不建议用这个static view的方法）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> view;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">setStaticView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     view = findViewById(R.id.sv_button);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   View svButton = findViewById(R.id.sv_button);</span><br><span class="line">   svButton.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">     <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">       setStaticView();</span><br><span class="line">       nextActivity();</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/02/26/5c74a28acb265.png" alt="Memory Leak 2 - Static View"></p><h1 id="Inner-Classes"><a href="#Inner-Classes" class="headerlink" title="Inner Classes"></a>Inner Classes</h1><p>继续，假设<code>Activity</code>中有个<a href="https://github.com/NimbleDroid/Memory-Leaks/blob/master/app/src/main/java/com/nimbledroid/memoryleaks/MainActivity.java#L126">内部类</a>，这样做可以提高可读性和封装性。将如我们创建一个内部类，而且持有一个静态变量的引用，恭喜，内存泄漏就离你不远了（译者注：销毁的时候置空，嗯）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Object inner;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">createInnerClass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span> </span>&#123;</span><br><span class="line">       &#125;</span><br><span class="line">       inner = <span class="keyword">new</span> InnerClass();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   View icButton = findViewById(R.id.ic_button);</span><br><span class="line">   icButton.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">       <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">           createInnerClass();</span><br><span class="line">           nextActivity();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/02/26/5c74a3827f856.png" alt="Memory Leak 3 - Inner Class"></p><p>内部类的优势之一就是可以访问外部类，不幸的是，导致内存泄漏的原因，就是内部类持有外部类实例的强引用。</p><h1 id="Anonymous-Classes"><a href="#Anonymous-Classes" class="headerlink" title="Anonymous Classes"></a>Anonymous Classes</h1><p>相似地，匿名类也维护了外部类的引用。所以内存泄漏很容易发生，<a href="https://github.com/NimbleDroid/Memory-Leaks/blob/master/app/src/main/java/com/nimbledroid/memoryleaks/MainActivity.java#L102">当你在<code>Activity</code>中定义了匿名的<code>AsyncTask</code></a><br>。当异步任务在后台执行耗时任务期间，<code>Activity</code>不幸被销毁了（译者注：用户退出，系统回收），这个被<code>AsyncTask</code>持有的<code>Activity</code>实例就不会被垃圾回收器回收，直到异步任务结束。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">startAsyncTask</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">new</span> AsyncTask&lt;Void, Void, Void&gt;() &#123;</span><br><span class="line">          <span class="meta">@Override</span> <span class="function"><span class="keyword">protected</span> Void <span class="title">doInBackground</span><span class="params">(Void... params)</span> </span>&#123;</span><br><span class="line">              <span class="keyword">while</span>(<span class="keyword">true</span>);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;.execute();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">  setContentView(R.layout.activity_main);</span><br><span class="line">  View aicButton = findViewById(R.id.at_button);</span><br><span class="line">  aicButton.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">      <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">          startAsyncTask();</span><br><span class="line">          nextActivity();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/02/26/5c74a4bd45062.png" alt="Memory Leak 4 - AsyncTask"></p><h1 id="Handler"><a href="#Handler" class="headerlink" title="Handler"></a>Handler</h1><p>同样道理，<a href="https://github.com/NimbleDroid/Memory-Leaks/blob/master/app/src/main/java/com/nimbledroid/memoryleaks/MainActivity.java#L114">定义匿名的<code>Runnable</code>，用匿名类<code>Handler</code>执行</a>。<code>Runnable</code>内部类会持有外部类的隐式引用，被传递到<code>Handler</code>的消息队列<code>MessageQueue</code>中，在<code>Message</code>消息没有被处理之前，<code>Activity</code>实例不会被销毁了，于是导致内存泄漏。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Handler() &#123;</span><br><span class="line">            <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">super</span>.handleMessage(message);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.postDelayed(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">while</span>(<span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, Long.MAX_VALUE &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    View hButton = findViewById(R.id.h_button);</span><br><span class="line">    hButton.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">            createHandler();</span><br><span class="line">            nextActivity();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/02/26/5c74a5ab1f03e.png" alt="Memory Leak 5 - Handler"></p><h1 id="Threads"><a href="#Threads" class="headerlink" title="Threads"></a>Threads</h1><p>我们再次通过<a href="https://github.com/NimbleDroid/Memory-Leaks/blob/master/app/src/main/java/com/nimbledroid/memoryleaks/MainActivity.java#L142">Thread</a>和<a href="https://github.com/NimbleDroid/Memory-Leaks/blob/master/app/src/main/java/com/nimbledroid/memoryleaks/MainActivity.java#L150">TimerTask</a>来展现内存泄漏。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">spawnThread</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">          <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">              <span class="keyword">while</span>(<span class="keyword">true</span>);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;.start();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  View tButton = findViewById(R.id.t_button);</span><br><span class="line">  tButton.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        spawnThread();</span><br><span class="line">        nextActivity();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/02/26/5c74a695b7543.png" alt="Memory Leak 6 - Thread"></p><h1 id="TimerTask"><a href="#TimerTask" class="headerlink" title="TimerTask"></a>TimerTask</h1><p>只要是匿名类的实例，不管是不是在工作线程，都会持有<code>Activity</code>的引用，导致内存泄漏。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">scheduleTimer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Timer().schedule(<span class="keyword">new</span> TimerTask() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">while</span>(<span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, Long.MAX_VALUE &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    View ttButton = findViewById(R.id.tt_button);</span><br><span class="line">    ttButton.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">            scheduleTimer();</span><br><span class="line">            nextActivity();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/02/26/5c74a70924397.png" alt="Memory Leak 7 - TimerTask"></p><h1 id="Sensor-Manager"><a href="#Sensor-Manager" class="headerlink" title="Sensor Manager"></a>Sensor Manager</h1><p>最后，通过<a href="https://developer.android.com/reference/android/content/Context.html#getSystemService(java.lang.String)">Context.getSystemService(int name)</a>可以获取系统服务。这些服务工作在各自的进程中，帮助应用处理后台任务，处理硬件交互。如果需要使用这些服务，可以注册<a href="https://github.com/NimbleDroid/Memory-Leaks/blob/master/app/src/main/java/com/nimbledroid/memoryleaks/MainActivity.java#L136">监听器</a>，这会导致服务持有了<code>Context</code>的引用，如果在<code>Activity</code>销毁的时候没有注销这些监听器，会导致内存泄漏。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">registerListener</span><span class="params">()</span> </span>&#123;</span><br><span class="line">              SensorManager sensorManager = (SensorManager) getSystemService(SENSOR_SERVICE);</span><br><span class="line">              Sensor sensor = sensorManager.getDefaultSensor(Sensor.TYPE_ALL);</span><br><span class="line">              sensorManager.registerListener(<span class="keyword">this</span>, sensor, SensorManager.SENSOR_DELAY_FASTEST);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       View smButton = findViewById(R.id.sm_button);</span><br><span class="line">       smButton.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">           <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">               registerListener();</span><br><span class="line">               nextActivity();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/02/26/5c74a7d1725c1.png" alt="Memory Leak 8 - Sensor Manager"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>看过那么多会导致内存泄漏的例子，容易导致吃光手机的内存使垃圾回收处理更为频发，甚至最坏的情况会导致OOM。垃圾回收的操作是很昂贵的开销，会导致肉眼可见的卡顿。所以，实例化的时候注意持有的引用链，并经常进行内存泄漏检查。</p><p>（译者注：本文没有提及比较通用的解决方法，<a href="https://xmaihh.github.io/2019/02/26/%E8%AF%91%E6%96%87-Android%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E7%9A%84%E5%85%AB%E7%A7%8D%E5%AF%B9%E5%BA%94%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95-%E4%B8%8B/">具体可以参考这篇文章，静态内部类解脱你的烦恼</a>）</p><p>祝好运。</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="http://blog.nimbledroid.com/2016/05/23/memory-leaks.html">http://blog.nimbledroid.com/2016/05/23/memory-leaks.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Android Framework </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fragment异常：android.view.InflateException: Binary XML file line #7: Error inflating class fragment</title>
      <link href="/blog/2019/02/22/Fragment%E5%BC%82%E5%B8%B8%EF%BC%9Aandroid-view-InflateException-Binary-XML-file-line-7-Error-inflating-class-fragment/"/>
      <url>/blog/2019/02/22/Fragment%E5%BC%82%E5%B8%B8%EF%BC%9Aandroid-view-InflateException-Binary-XML-file-line-7-Error-inflating-class-fragment/</url>
      
        <content type="html"><![CDATA[<p>fragment是个很好的控件，但今天在静态使用fragment的时候，遇到个问题，错误信息如下:</p><h1 id="错误信息"><a href="#错误信息" class="headerlink" title="错误信息"></a>错误信息</h1><p>Caused by: android.view.InflateException: Binary XML file line #7: Error inflating class fragment</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;FrameLayout xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class="line">    android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">    android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class="line">    android:background&#x3D;&quot;#80434343&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;fragment</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;fragment_float_window&quot;</span><br><span class="line">        android:name&#x3D;&quot;com.xmaihh.example.ui.fragment.FloatWindowFragment&quot;</span><br><span class="line">        android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;wrap_content&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;FrameLayout&gt;</span><br></pre></td></tr></table></figure><h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><ul><li><p>1.xml布局中，fragment未设置id</p></li><li><p>2.嵌入的Activity要继承于FragmentActivity ，而不是Activity</p></li><li><p>3.xml中引入的包名不对,注意检查<br><code>android:name=&quot;com.xmaihh.example.ui.fragment.FloatWindowFragment&quot;</code></p></li><li><p>4.还有种可能就是你Fragment引入的包名不对，v4包下的还是系统的Fragment要统一好 注意<code>android.support.v4.app.FragmentActivity</code>和<code>android.app.Fragment</code>区别</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android logcat命令详解</title>
      <link href="/blog/2019/02/21/Android-logcat%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/"/>
      <url>/blog/2019/02/21/Android-logcat%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="Android-Log系统"><a href="#Android-Log系统" class="headerlink" title="Android Log系统"></a>Android Log系统</h1><p>Android提供了一个灵活的logging系统，允许应用程序和系统组件等整个系统记录logging信息，它是独立于Linux Kernel的一个logging系统，kernel是通过<code>pr_info</code>、<code>printk</code>等存储，通过<code>dmesg</code>或<code>cat /proc/kmsg</code>获取。不过，Android logging 系统也是将信息存在内核缓存区。其结构如下：<br><img src="https://i.loli.net/2019/02/21/5c6e43fee4322.png"></p><p>Logging system由如下几部分组成：</p><ul><li>实现loging信息存储的kernel驱动和缓存区</li><li>C，C++和Java 类添加与读取log</li><li>一个单独浏览log信息的程序（logcat）</li><li>能够查看和过滤来自主机的log信息（通过Android Studio 或者 DDMS）</li></ul><h1 id="Android-logcat介绍"><a href="#Android-logcat介绍" class="headerlink" title="Android logcat介绍"></a>Android logcat介绍</h1><p>logcat是android中的一个命令行工具，可以用于得到程序的log信息</p><h2 id="android-util-Log"><a href="#android-util-Log" class="headerlink" title="android.util.Log"></a><a href="https://developer.android.com/reference/android/util/Log">android.util.Log</a></h2><p>通常，我们使用android.util.Log类来打印日志消息，通过Logcat来查看打印的日志<br>Log类提供的方法，优先级按照从高到低的顺序如下:</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>Log.e(String,String)(error)</td><td>显示错误信息</td></tr><tr><td>Log.w(String,String)(waning)</td><td>显示警告信息</td></tr><tr><td>Log.i(String,String)(information)</td><td>显示一般信息</td></tr><tr><td>Log.d(String,String)(debug)</td><td>显示调试信息</td></tr><tr><td>Log.v(String,String) (vervbose)</td><td>显示全部信息</td></tr></tbody></table><p>e.g.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 通过代码打印log</span><br><span class="line">Log.d(&quot;MainActivity&quot;, &quot;LogCollectorThread is create&quot;);</span><br><span class="line"></span><br><span class="line"> ...</span><br><span class="line">&#x2F;&#x2F; adb获取log</span><br><span class="line">shell@android:&#x2F;$ adb logcat</span><br></pre></td></tr></table></figure><p>adb logcat 输出的日志:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D&#x2F;:MainActivity: LogCollectorThread is create</span><br></pre></td></tr></table></figure><h2 id="logcat缓冲区"><a href="#logcat缓冲区" class="headerlink" title="logcat缓冲区"></a>logcat缓冲区</h2><h3 id="缓冲区介绍"><a href="#缓冲区介绍" class="headerlink" title="缓冲区介绍"></a>缓冲区介绍</h3><p>android log输出量巨大，特别是通信系统的log，因此，android把log输出到不同的缓冲区中，目前定义了四个log缓冲区：</p><ol><li>Radio：输出通信系统的log</li><li>System：输出系统组件的log</li><li>Event：输出event模块的log</li><li>Main：所有java层的log，遗迹不属于上面3层的log<br>缓冲区主要给系统组件使用，一般的应用不需要关心，应用的log都输出到main缓冲区中<br>默认log输出（不指定缓冲区的情况下）是输出System和Main缓冲区的log</li></ol><h3 id="缓冲区模型"><a href="#缓冲区模型" class="headerlink" title="缓冲区模型"></a>缓冲区模型</h3><p><img src="https://i.loli.net/2019/02/21/5c6e4e93a1230.png"></p><h3 id="获取缓冲区命令"><a href="#获取缓冲区命令" class="headerlink" title="获取缓冲区命令"></a>获取缓冲区命令</h3><table><thead><tr><th>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;参数&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</th><th>描述</th></tr></thead><tbody><tr><td><code>-b&lt;buffer&gt;</code></td><td>加载一个可使用的日志缓冲区提供查看，默认值是<code>main</code></td></tr></tbody></table><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">adb logcat –b radio</span><br><span class="line"></span><br><span class="line">adb logcat –b system</span><br><span class="line"></span><br><span class="line">adb logcat –b events</span><br><span class="line"></span><br><span class="line">adb logcat –b main</span><br></pre></td></tr></table></figure><h2 id="logcat命令参数"><a href="#logcat命令参数" class="headerlink" title="logcat命令参数"></a>logcat命令参数</h2><h3 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h3><table><thead><tr><th>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;参数&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</th><th>描述</th></tr></thead><tbody><tr><td><code>-b &lt;buffer&gt;</code></td><td>加载一个可使用的日志缓冲区供查看，比如event和radio。默认值是main  具体查看<a href="https://developer.android.com/studio/command-line/logcat#alternativeBuffers">Viewing Alternative Log Buffers</a>.</td></tr><tr><td><code>-c</code></td><td>清除缓冲区中的全部日志并退出（清除完后可以使用-g查看缓冲区）</td></tr><tr><td><code>-d</code></td><td>将缓冲区的log转存到屏幕中然后退出</td></tr><tr><td><code>-f &lt;filename&gt;</code></td><td>将log输出到指定的文件中&lt;文件名&gt;.默认为标准输出（stdout）</td></tr><tr><td><code>-g</code></td><td>打印日志缓冲区的大小并退出</td></tr><tr><td><code>-n &lt;count&gt;</code></td><td>设置日志的最大数目<code>&lt;count&gt;</code>，默认值是4，需要和<code>-r</code>选项一起使用</td></tr><tr><td><code>-r &lt;kbytes&gt;</code></td><td>没<code>&lt;kbytes&gt;</code>时输出日志，默认值是16，需要和<code>-f</code>选项一起使用</td></tr><tr><td><code>-s</code></td><td>设置过滤器</td></tr><tr><td><code>-v &lt;format&gt;</code></td><td>设置输出格式的日志消息。默认是短暂的格式。支持的格式列表 参看<a href="https://developer.android.com/studio/command-line/logcat#outputFormat">Controlling Log Output Format</a></td></tr></tbody></table><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;将缓冲区的log打印到屏幕并退出</span><br><span class="line">adb logcat -d </span><br><span class="line">&#x2F;&#x2F;清除缓冲区log（testCase运行前可以先清除一下）</span><br><span class="line">adb logcat -c</span><br><span class="line">&#x2F;&#x2F;打印缓冲区大小并退出</span><br><span class="line">adb logcat -g</span><br><span class="line">&#x2F;&#x2F;输出log</span><br><span class="line">adb logcat -f &#x2F;sdcard&#x2F;log.txt -n 10 -r 1</span><br></pre></td></tr></table></figure><h2 id="logcat格式化输出"><a href="#logcat格式化输出" class="headerlink" title="logcat格式化输出"></a>logcat格式化输出</h2><p>日志消息包含一个元数据字段，除了标签和优先级，您可以修改输出显示一个特定的元数据字段格式的消息。为此，您使用-v选项来指定一个支持的输出格式。一下为支持的格式：</p><table><thead><tr><th>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;格式&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</th><th>说明</th></tr></thead><tbody><tr><td><code>brief</code></td><td>显示优先级/标记和过程的PID发出的消息（默认格式）</td></tr><tr><td><code>process</code></td><td>只显示PID</td></tr><tr><td><code>tag</code></td><td>只显示优先级/标记</td></tr><tr><td><code>raw</code></td><td>显示原始的日志消息，没有其他元数据字段</td></tr><tr><td><code>time</code></td><td>调用显示日期、时间、优先级/标签和过程的PID发出消息</td></tr><tr><td><code>threadtime</code></td><td>调用显示日期、时间、优先级、标签遗迹PID TID线程发出的消息</td></tr><tr><td><code>long</code></td><td>显示所有元数据字段与空白行和单独的消息</td></tr></tbody></table><p>当logcat开始，指定想要输出格式<code>-v</code>选项：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[adb] logcat [-v &lt;format&gt;]</span><br><span class="line">adb logcat –v thread</span><br></pre></td></tr></table></figure><blockquote><p>只能指定一个输出格式<code>-v</code></p></blockquote><h2 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h2><p><img src="https://i.loli.net/2019/02/21/5c6e571e84ea1.png"></p><h1 id="logcat优先级"><a href="#logcat优先级" class="headerlink" title="logcat优先级"></a>logcat优先级</h1><p>优先级使用字符标识，一下优先级从低到高:</p><ul><li>V –Verbose(最低优先级)</li><li>D – Debug</li><li>I – Info</li><li>W – Warning</li><li>E – Error</li><li>F – Fatal</li><li>S – Silent</li></ul><p>为了减少不想要日志的输出，可以建立一个过滤器<br>过滤语法：<code>tag：priority</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 过滤TAG为ActivityManager输出级别大于I的日志与TAG为MyApp输出级别大于D的日志</span><br><span class="line"></span><br><span class="line">adb logcat ActivityManager:I  My App:D *:S</span><br><span class="line"></span><br><span class="line"> ...</span><br><span class="line">&#x2F;&#x2F; 设置过滤级别为W以上</span><br><span class="line">adb logcat *:W</span><br></pre></td></tr></table></figure><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://elinux.org/Android_Logging_System">https://elinux.org/Android_Logging_System</a><br><a href="https://developer.android.com/studio/command-line/logcat">https://developer.android.com/studio/command-line/logcat</a><br><a href="https://www.cnblogs.com/JianXu/p/5468839.html">https://www.cnblogs.com/JianXu/p/5468839.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Android Framework </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>定制开关保存LOGCAT和KMSG日志输出到文件</title>
      <link href="/blog/2019/02/20/%E5%AE%9A%E5%88%B6%E5%BC%80%E5%85%B3%E4%BF%9D%E5%AD%98LOGCAT%E5%92%8CKMSG%E6%97%A5%E5%BF%97%E8%BE%93%E5%87%BA%E5%88%B0%E6%96%87%E4%BB%B6/"/>
      <url>/blog/2019/02/20/%E5%AE%9A%E5%88%B6%E5%BC%80%E5%85%B3%E4%BF%9D%E5%AD%98LOGCAT%E5%92%8CKMSG%E6%97%A5%E5%BF%97%E8%BE%93%E5%87%BA%E5%88%B0%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>在 “设置” 应用中的开发者选项添加一个开关 保存Logcat和KMSG日志</p><h1 id="添加te文件"><a href="#添加te文件" class="headerlink" title="添加te文件"></a>添加te文件</h1><p>由于SELinux的原因,需要在sepolicy下添加catlot.te</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">type catlog, domain;</span><br><span class="line">type catlog_exec, exec_type, file_type;</span><br><span class="line"></span><br><span class="line">allow init catlog_exec:file &#123; execute getattr read open &#125;;</span><br><span class="line">allow init catlog:process &#123; transition &#125;;</span><br><span class="line">allow init catlog:process &#123; rlimitinh siginh noatsecure &#125;;</span><br><span class="line">allow catlog kernel:system &#123; syslog_mod &#125;;</span><br><span class="line">allow catlog catlog:capability &#123; dac_override sys_nice &#125;;</span><br><span class="line">allow catlog catlog:capability2 &#123; syslog &#125;;</span><br><span class="line">allow catlog catlog_exec:file &#123; execute entrypoint read open &#125;;</span><br><span class="line">allow catlog shell_exec:file &#123; getattr read &#125;;</span><br><span class="line">allow catlog rootfs:lnk_file &#123; getattr &#125;;</span><br><span class="line">allow catlog proc:file &#123; write open read &#125;;</span><br><span class="line">allow catlog tmpfs:lnk_file &#123; read &#125;;</span><br><span class="line">allow catlog storage_file:dir &#123; search &#125;;</span><br><span class="line">allow catlog storage_file:lnk_file &#123; read &#125;;</span><br><span class="line">allow catlog mnt_user_file:dir &#123; search &#125;;</span><br><span class="line">allow catlog mnt_user_file:lnk_file &#123; read &#125;;</span><br><span class="line">allow catlog fuse:dir &#123; search getattr create write read open add_name rename remove_name &#125;;</span><br><span class="line">allow catlog fuse:file &#123; getattr create write open rename append &#125;;</span><br><span class="line">allow catlog toolbox_exec:file &#123; execute read open getattr execute_no_trans &#125;;</span><br><span class="line">allow catlog logdr_socket:sock_file &#123; write &#125;;</span><br><span class="line">allow catlog logd:unix_stream_socket &#123; connectto &#125;;</span><br><span class="line">allow catlog logcat_exec:file &#123; execute read open execute_no_trans getattr &#125;;</span><br></pre></td></tr></table></figure><h1 id="添加cat-log-sh脚本"><a href="#添加cat-log-sh脚本" class="headerlink" title="添加cat_log.sh脚本"></a>添加<code>cat_log.sh</code>脚本</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;system&#x2F;bin&#x2F;sh</span><br><span class="line"></span><br><span class="line"># 在init.rc下加入如下语句</span><br><span class="line"># service  catlog &#x2F;system&#x2F;bin&#x2F;busybox  sh  &#x2F;system&#x2F;bin&#x2F;cat_log.sh</span><br><span class="line">#     disabled</span><br><span class="line">#     oneshot</span><br><span class="line">#</span><br><span class="line"># on property:sys.boot_completed&#x3D;1</span><br><span class="line">#   start catlog</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">function enable_log()</span><br><span class="line">&#123;</span><br><span class="line">       LOG_FILE&#x3D;&quot;&#x2F;data&#x2F;tool.log&quot;</span><br><span class="line"></span><br><span class="line">       exec 2&gt;&gt; $LOG_FILE</span><br><span class="line">       exec 1&gt;&gt; $LOG_FILE</span><br><span class="line">       echo &quot;----------------------------------&quot;</span><br><span class="line">       echo &quot;para: $*&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">enable_log $* ; set -x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">echo 1 &gt; &#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;panic</span><br><span class="line"></span><br><span class="line">#命名文件夹名字e5_log,也可以自己更改</span><br><span class="line">ENABLE_LOG_FILE&#x3D;&quot;&#x2F;mnt&#x2F;sdcard&#x2F;.enable_logsave&quot;</span><br><span class="line">LOG_DIR&#x3D;&quot;&#x2F;mnt&#x2F;sdcard&#x2F;LOGSAVE&quot;</span><br><span class="line">LAST_LOG_DIR&#x3D;&quot;&#x2F;mnt&#x2F;sdcard&#x2F;LOGSAVE&#x2F;last&quot;</span><br><span class="line">SAVE_LOG_COUNT&#x3D;5   # 保存上5次的log，值最小为1;例为5,则last.1为最后一次重启前的log；last.5为最老的log</span><br><span class="line"></span><br><span class="line">#echo “save last_time  $&#123;SAVE_LOG_COUNT&#125; log”</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#if [ ! -f &quot;$ENABLE_LOG_FILE&quot; ];then                     </span><br><span class="line">#   echo &quot;disable logsave&quot;                    </span><br><span class="line">#   exit                                                 </span><br><span class="line"></span><br><span class="line">#fi </span><br><span class="line"></span><br><span class="line">#echo &quot;enable logsave&quot;</span><br><span class="line"></span><br><span class="line">if [ ! -d &quot;$LOG_DIR&quot; ];then</span><br><span class="line">   mkdir $LOG_DIR</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [  -d &quot;$LAST_LOG_DIR.$SAVE_LOG_COUNT&quot; ];then</span><br><span class="line">   rm -r &quot;$LAST_LOG_DIR.$SAVE_LOG_COUNT&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#for((i&#x3D; $&#123;SAVE_LOG_COUNT&#125;-1; $i &gt;&#x3D; 1 ;i--));do</span><br><span class="line">#for i in  $(seq  &#96;expr $SAVE_LOG_COUNT - 1&#96;  -1 1)</span><br><span class="line">i&#x3D;$((SAVE_LOG_COUNT -1))</span><br><span class="line">while [ $i -ge 1 ]</span><br><span class="line">do </span><br><span class="line">        if [  -d &quot;$LAST_LOG_DIR.$i&quot; ];then</span><br><span class="line">               #echo &quot;$LAST_LOG_DIR.$i is exists &quot;</span><br><span class="line">               if [ &quot;&#96;ls -a $LAST_LOG_DIR.$i&#96;&quot; &#x3D; &quot;&quot; ]; then</span><br><span class="line">                       echo &quot;$LAST_LOG_DIR.$i is indeed empty&quot;</span><br><span class="line">               else</span><br><span class="line">                       echo &quot;$LAST_LOG_DIR.$i is not empty&quot;</span><br><span class="line">                       #j&#x3D;&#96;expr $i + 1&#96;</span><br><span class="line">                       j&#x3D;$(($i+1)) </span><br><span class="line">                       mv  &quot;$LAST_LOG_DIR.$i&quot;  &quot;$LAST_LOG_DIR.$j&quot;</span><br><span class="line">               fi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       #else</span><br><span class="line">               #echo &quot;$LAST_LOG_DIR.$i isnot exists&quot;</span><br><span class="line"></span><br><span class="line">        fi</span><br><span class="line">        i&#x3D;$(($i-1))</span><br><span class="line"></span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">#创建上一次日志保存目录</span><br><span class="line">mkdir $LAST_LOG_DIR.&quot;1&quot;</span><br><span class="line"></span><br><span class="line">#保存上次开机之后的log</span><br><span class="line">mv $LOG_DIR&#x2F;*.log $LAST_LOG_DIR.&quot;1&quot;</span><br><span class="line">mv $LOG_DIR&#x2F;*.log* $LAST_LOG_DIR.&quot;1&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">DATE&#x3D;$(date +%Y%m%d%H%M)</span><br><span class="line"></span><br><span class="line">cat &#x2F;sys&#x2F;fs&#x2F;pstore&#x2F;console-ramoops&quot;-0&quot; &gt; $LOG_DIR&#x2F;&quot;$DATE&quot;_panic_kmsg.log</span><br><span class="line"></span><br><span class="line">echo &quot;------start kmsg log------&quot;</span><br><span class="line">cat &#x2F;proc&#x2F;kmsg &gt; $LOG_DIR&#x2F;&quot;$DATE&quot;_kmsg.log &amp;</span><br><span class="line"></span><br><span class="line">echo &quot;------start logcat log------&quot;</span><br><span class="line">logcat -v time -n 1 -f $LOG_DIR&#x2F;&quot;$DATE&quot;_logcat.log -r10240 </span><br></pre></td></tr></table></figure><h1 id="拷贝脚本到system-bin"><a href="#拷贝脚本到system-bin" class="headerlink" title="拷贝脚本到system/bin"></a>拷贝脚本到<code>system/bin</code></h1><p>在mk文件添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PRODUCT_COPY_FILES +&#x3D;$(CUR_PATH)&#x2F;cat_log.sh:system&#x2F;bin&#x2F;cat_log.sh</span><br></pre></td></tr></table></figure><h1 id="property-service里赋予权限"><a href="#property-service里赋予权限" class="headerlink" title="property_service里赋予权限"></a><code>property_service</code>里赋予权限</h1><p>在property_service.cpp 的检查权限check_mac_perms函数中添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if(strcmp(&quot;persist.sys.cat_log&quot;,name) &#x3D;&#x3D; 0)</span><br><span class="line">   &#123;</span><br><span class="line">       return 1;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h1 id="init-rc里声明服务"><a href="#init-rc里声明服务" class="headerlink" title="init.*.rc里声明服务"></a><code>init.*.rc</code>里声明服务</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#catlog</span><br><span class="line">service catlog &#x2F;system&#x2F;bin&#x2F;cat_log.sh</span><br><span class="line">    seclabel u:r:catlog:s0</span><br><span class="line">    disabled</span><br><span class="line">    oneshot</span><br><span class="line"></span><br><span class="line">on property:persist.sys.cat_log&#x3D;1</span><br><span class="line">     start catlog</span><br><span class="line"></span><br><span class="line">on property:persist.sys.cat_log&#x3D;0</span><br><span class="line">     stop catlog</span><br></pre></td></tr></table></figure><blockquote><p>其中的seclabel就是SELinux要用到的标志</p></blockquote><h1 id="开发者选项中添加一个SwitchPreference组件"><a href="#开发者选项中添加一个SwitchPreference组件" class="headerlink" title="开发者选项中添加一个SwitchPreference组件"></a>开发者选项中添加一个SwitchPreference组件</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;SwitchPreference</span><br><span class="line">    android:key&#x3D;&quot;logcat_enable&quot;</span><br><span class="line">    android:title&#x3D;&quot;@string&#x2F;logcat_enable&quot;</span><br><span class="line">    android:summary&#x3D;&quot;@string&#x2F;logcat_summary&quot;</span><br><span class="line">    android:fragment&#x3D;&quot;com.android.tv.settings.system.development.AdbDialog&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure><h1 id="添加开关控制逻辑"><a href="#添加开关控制逻辑" class="headerlink" title="添加开关控制逻辑"></a>添加开关控制逻辑</h1><p>在DevelopmentFragment.java的onPreferenceTreeClick里添加相关逻辑</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">if(preference &#x3D;&#x3D; mLogcatPreference)&#123;</span><br><span class="line">            if (mLogcatPreference.isChecked())&#123;</span><br><span class="line">                writeLogcatEnableOptions(1);</span><br><span class="line">                setLogcatEnable(getPreferenceManager().getContext(), 1);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                writeLogcatEnableOptions(0);</span><br><span class="line">                setLogcatEnable(getPreferenceManager().getContext(), 0);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h1 id="开机时初始化状态"><a href="#开机时初始化状态" class="headerlink" title="开机时初始化状态"></a>开机时初始化状态</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">String action &#x3D; intent.getAction();</span><br><span class="line">            if (action.equals(Intent.ACTION_BOOT_COMPLETED)) &#123;</span><br><span class="line">                SharedPreferences sharedPreferences &#x3D; context</span><br><span class="line">                        .getSharedPreferences(&quot;TvSetting&quot;, Context.MODE_PRIVATE);</span><br><span class="line">                boolean enable_log_save &#x3D; sharedPreferences.getBoolean(</span><br><span class="line">                        &quot;enable_log_save&quot;, false);</span><br><span class="line">                String persist_sys_cat_log &#x3D; SystemProperties.get(&quot;persist.sys.cat_log&quot;);</span><br><span class="line">                Log.i(&quot;BootReceiver&quot;,</span><br><span class="line">                        &quot;action&#x3D;&#x3D;ACTION_BOOT_COMPLETED,BootReceiver is start&quot;);</span><br><span class="line">                if (persist_sys_cat_log.equals(&quot;1&quot;)) &#123;</span><br><span class="line">                    SystemProperties.set(&quot;persist.sys.cat_log&quot;, &quot;1&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>编译运行，打开开关，可以看到LOG保存到了sdcard/LOGSAVE目录下面。</p>]]></content>
      
      
      <categories>
          
          <category> Android Framework </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Debian/Ubuntu时区和自动较时设置</title>
      <link href="/blog/2019/01/17/Debian-Ubuntu%E6%97%B6%E5%8C%BA%E5%92%8C%E8%87%AA%E5%8A%A8%E8%BE%83%E6%97%B6%E8%AE%BE%E7%BD%AE/"/>
      <url>/blog/2019/01/17/Debian-Ubuntu%E6%97%B6%E5%8C%BA%E5%92%8C%E8%87%AA%E5%8A%A8%E8%BE%83%E6%97%B6%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>NTP 是通过网络自动校时的一种 TCP/IP 协议。Debian/Ubuntu 中有两种方式实现时间同步：ntpdate 和 ntpd，前者为一天调整一次时间，后者 ntpd 为守护进程，可以持续不断地调整时间。个人推荐使用 ntpd，它实际占用资源是很小的。</p><h1 id="设置时区"><a href="#设置时区" class="headerlink" title="设置时区"></a>设置时区</h1><p>使用 tzconfig 或 tzselect 工具来设置时区</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tzselect</span><br></pre></td></tr></table></figure><p>选你要设置的时区,比如 Asia/China/Beijing</p><p>然后执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cat &gt;&gt;~&#x2F;.profile&lt;&lt;EOF</span><br><span class="line">TZ&#x3D;&#39;Asia&#x2F;Beijing&#39;; export TZ</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>最后执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rm -rf &#x2F;etc&#x2F;localtime</span><br><span class="line">cp &#x2F;usr&#x2F;share&#x2F;zoneinfo&#x2F;Asia&#x2F;Beijing &#x2F;etc&#x2F;localtime</span><br></pre></td></tr></table></figure><h1 id="设置时间同步服务器"><a href="#设置时间同步服务器" class="headerlink" title="设置时间同步服务器"></a>设置时间同步服务器</h1><h2 id="方法一：ntpdate-方式"><a href="#方法一：ntpdate-方式" class="headerlink" title="方法一：ntpdate 方式"></a>方法一：ntpdate 方式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">apt-get install -y ntpdate #安装</span><br><span class="line">vim &#x2F;etc&#x2F;cron.daily&#x2F;ntpdate #添加下面一行，每天同步。</span><br><span class="line">ntpdate ntp.ubuntu.com cn.pool.ntp.org</span><br><span class="line">chmod 755 &#x2F;etc&#x2F;cron.daily&#x2F;ntpdate #修改权限</span><br><span class="line">ntpdate -d cn.pool.ntp.org #立即同步时间</span><br></pre></td></tr></table></figure><h2 id="ntpd-方式"><a href="#ntpd-方式" class="headerlink" title="ntpd 方式"></a>ntpd 方式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">apt-get install -y ntpd #安装</span><br><span class="line">vim &#x2F;etc&#x2F;ntp.conf #添加下面一行</span><br><span class="line">server cn.pool.ntp.org</span><br><span class="line">&#x2F;etc&#x2F;init.d&#x2F;ntp restart #重启</span><br></pre></td></tr></table></figure><h2 id="以下适用于-debian"><a href="#以下适用于-debian" class="headerlink" title="以下适用于 debian"></a>以下适用于 debian</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">apt-get install -y ntp</span><br><span class="line">vim &#x2F;etc&#x2F;ntp.conf #修改为下面几行</span><br><span class="line">server 0.debian.pool.ntp.org iburst dynamic</span><br><span class="line">server 1.debian.pool.ntp.org iburst dynamic</span><br><span class="line">server 2.debian.pool.ntp.org iburst dynamic</span><br><span class="line">server 3.debian.pool.ntp.org iburst dynamic</span><br><span class="line">&#x2F;etc&#x2F;init.d&#x2F;ntp restart #重启</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Debian </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3-UnicodeEncodeError:-&#39;ascii&#39;-codec-can&#39;t-encode-character-&#39;Ü&#39;-in-position-6:-ordinal-not-in-range(128)</title>
      <link href="/blog/2019/01/17/Python3-UnicodeEncodeError-ascii-codec-can-t-encode-character-xdc-in-position-6-ordinal-not-in-range-128/"/>
      <url>/blog/2019/01/17/Python3-UnicodeEncodeError-ascii-codec-can-t-encode-character-xdc-in-position-6-ordinal-not-in-range-128/</url>
      
        <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>每次我尝试运行我的程序时都会返回错误，并且我的程序可以在其他应用程序中运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Error:</span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">File &quot;&#x2F;sdcard&#x2F;pythonP&#x2F;ex95.py&quot;, line 16, in </span><br><span class="line">gols[f&quot;partida&#123;g&#125;&quot;] &#x3D; int(input(f&quot;quantidade de gols na</span><br><span class="line">partida &#123;g&#125;\xaa: &quot;))</span><br><span class="line">UnicodeEncodeError: &#39;ascii&#39; codec can&#39;t encode character &#39;\x</span><br><span class="line">aa&#39; in position 31: ordinal not in range(128)</span><br></pre></td></tr></table></figure><p>正在尝试输出一个非ASCII字符的字符串。您是否尝试将LANG = C.UTF-8预先添加到您的python命令中，看看是否有帮助（Do LANG=C.UTF8 python3 your-script.py）？（至少ubuntu映像）似乎默认为Clocale，它只是ASCII。<br>Ubuntu rootfs中不正确配置的语言环境的结果（构建脚本引用了C语言环境，而C.UTF-8Unicode支持则需要）。设置此区域设置（例如，通过执行export LANG=C.UTF-8）一切正常。<br>这也打破了一些其他的应用程序（例如，pipenv并且mosh拒绝非Unicode终端上运行）。</p><p>问题可以通过以下简单的python脚本重现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">＃！&#x2F; usr &#x2F; bin &#x2F; env python3 </span><br><span class="line">print（ “ HalloÜmlaut！”）</span><br></pre></td></tr></table></figure><p>在Ubuntu上，这给了我以下错误</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">user@localhost:~$ python3 testcase.py</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;testcase.py&quot;, line 2, in &lt;module&gt;</span><br><span class="line">    print(&quot;Hallo \xdcmlaut!&quot;)</span><br><span class="line">UnicodeEncodeError: &#39;ascii&#39; codec can&#39;t encode character &#39;\xdc&#39; in position 6: ordinal not in range(128)</span><br></pre></td></tr></table></figure><h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ export LANG &#x3D; C.UTF-8</span><br><span class="line">$ python3 your-script.py</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用GPG加密Github Commits</title>
      <link href="/blog/2018/12/25/%E4%BD%BF%E7%94%A8GPG%E5%8A%A0%E5%AF%86Github-Commits/"/>
      <url>/blog/2018/12/25/%E4%BD%BF%E7%94%A8GPG%E5%8A%A0%E5%AF%86Github-Commits/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.loli.net/2018/12/25/5c218fc76d90d.png"><br>GnuPG（简称 GPG），它是目前最流行、最好用的开源加密工具之一。<br>GPG 有许多用途，比如对文件，邮件的加密。而本文要说的是，如何使用 GPG 来加密 Github Commits,从而保证提交的commit在传输的过程中没有被篡改。。<br>在 Github 上查看一些项目的 Commits 时，偶尔会发现「This commit was signed with a verified signature.」字样。</p><h1 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h1><p>git自带gpg命令,后续步骤直接在git bash里生成密匙。<br>Git官网 <a href="https://git-scm.com/">https://git-scm.com</a></p><h1 id="生成密匙"><a href="#生成密匙" class="headerlink" title="生成密匙"></a>生成密匙</h1><p>打开git bash,直接输入:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg --gen-key</span><br></pre></td></tr></table></figure><p>回车,提示信息如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">gpg (GnuPG) 1.4.21; Copyright (C) 2015 Free Software Foundation, Inc.</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.</span><br><span class="line"></span><br><span class="line">Please select what kind of key you want:</span><br><span class="line">   (1) RSA and RSA (default)</span><br><span class="line">   (2) DSA and Elgamal</span><br><span class="line">   (3) DSA (sign only)</span><br><span class="line">   (4) RSA (sign only)</span><br><span class="line">Your selection?</span><br></pre></td></tr></table></figure><p>选择加密算法，默认选择第一个选项即可，表示加密和签名都使用 RSA 算法。<br>选 1，回车。<br>选择密钥长度，默认为 2048，建议输入 4096。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RSA keys may be between 1024 and 4096 bits long.</span><br><span class="line">What keysize do you want? (2048)</span><br></pre></td></tr></table></figure><p>输入 <code>4096</code>，回车。</p><p>设定密钥的有效期。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Please specify how long the key should be valid.</span><br><span class="line">         0 &#x3D; key does not expire</span><br><span class="line">      &lt;n&gt;  &#x3D; key expires in n days</span><br><span class="line">      &lt;n&gt;w &#x3D; key expires in n weeks</span><br><span class="line">      &lt;n&gt;m &#x3D; key expires in n months</span><br><span class="line">      &lt;n&gt;y &#x3D; key expires in n years</span><br><span class="line">Key is valid for? (0)</span><br></pre></td></tr></table></figure><p>密钥只是个人使用的话，建议选择第一个选项，即永不过期。<br>输入 <code>0</code>，回车。</p><p>系统会问你上述设置是否正确。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Is this correct? (y&#x2F;N)</span><br></pre></td></tr></table></figure><p>输入 <code>y</code>，回车。</p><p>系统会要求你输入个人信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">You need a user ID to identify your key; the software constructs the user ID</span><br><span class="line">from the Real Name, Comment and Email Address in this form:</span><br><span class="line">    &quot;Heinrich Heine (Der Dichter) &lt;heinrichh@duesseldorf.de&gt;&quot;</span><br><span class="line"></span><br><span class="line">Real name:</span><br></pre></td></tr></table></figure><p>「Real name」填入你的名字，需是英文。回车。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Email address:</span><br></pre></td></tr></table></figure><p>「Email address」填入你的邮箱地址。回车。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Comment:</span><br></pre></td></tr></table></figure><p>「Comment」可以空着不填。回车。<br>系统会再次让你确认填入的信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">You selected this USER-ID:</span><br><span class="line">    &quot;Teddysun &lt;i@teddysun.com&gt;&quot;</span><br><span class="line"></span><br><span class="line">Change (N)ame, (C)omment, (E)mail or (O)kay&#x2F;(Q)uit?</span><br></pre></td></tr></table></figure><p>输入 <code>O</code>，回车。<br>系统会让你设定一个私钥的密码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">You need a Passphrase to protect your secret key.</span><br><span class="line">Enter passphrase:</span><br><span class="line">Repeat passphrase:</span><br></pre></td></tr></table></figure><p>注意这里要留空不填，直接回车即可。这是因为 TortoiseGit 不支持 1.4.x 含有私钥密码。直接使用git bash的话不影响，可选择设置密码。<br>系统这时开始生成密钥，，这时会要求你做一些随机的举动，以生成一个随机数。你拿起鼠标随便晃晃，直到完成密钥生成。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">We need to generate a lot of random bytes. It is a good idea to perform</span><br><span class="line">some other action (type on the keyboard, move the mouse, utilize the</span><br><span class="line">disks) during the prime generation; this gives the random number</span><br><span class="line">generator a better chance to gain enough entropy.</span><br></pre></td></tr></table></figure><p>最后，提示生成完毕。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gpg: key 0F136FEA marked as ultimately trusted</span><br><span class="line">public and secret key created and signed.</span><br></pre></td></tr></table></figure><h1 id="列出密钥"><a href="#列出密钥" class="headerlink" title="列出密钥"></a>列出密钥</h1><p>命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg --list--keys</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;c&#x2F;Users&#x2F;Administrator&#x2F;.gnupg&#x2F;pubring.gpg</span><br><span class="line">-----------------------------------------</span><br><span class="line">pub   4096R&#x2F;0F136FEA 2018-12-25</span><br><span class="line">uid                  xmaihh (xmaihh@protonmail.com) &lt;xmaihh@protonmail.com&gt;</span><br><span class="line">sub   4096R&#x2F;13FA2C24 2018-12-25</span><br></pre></td></tr></table></figure><p>第一行显示公钥文件名（pubring.gpg）<br>第二行显示公钥特征（4096 位，Hash 字符串和生成时间）<br>第三行显示用户信息<br>第四行显示私钥特征</p><h1 id="输出密钥"><a href="#输出密钥" class="headerlink" title="输出密钥"></a>输出密钥</h1><p>公钥文件（.gnupg/pubring.gpg）以二进制形式储存，armor 参数可以将其转换为 ASCII 码显示。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg --armor --output public-key.txt --export [密钥ID]</span><br></pre></td></tr></table></figure><p>[密钥ID]指定用户的公钥，如 <code>0F136FEA</code>，output 参数指定输出文件名，如 public-key.txt</p><p>同时，export-secret-keys 参数可以转换私钥。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg --armor --output private-key.txt --export-secret-keys</span><br></pre></td></tr></table></figure><p>public-key.txt 和 private-key.txt 默认会导出至git bash 当前工作目录下。</p><h1 id="上传公钥至Github"><a href="#上传公钥至Github" class="headerlink" title="上传公钥至Github"></a>上传公钥至Github</h1><p>点击用户头像，打开 <code>Settings</code>，左侧菜单点击 <code>SSH and GPG keys</code>，在 <code>GPG keys</code> 那里，点击 <code>New GPG key</code>。<br>在输入框里填入刚刚导出的 <code>public-key.txt</code> 内容。<br>点击 <code>Add GPG key</code>，完成上传。</p><h1 id="设置git"><a href="#设置git" class="headerlink" title="设置git"></a>设置git</h1><p>回到 <code>Git Bash</code> 窗口，根据刚才 <code>gpg –list-keys</code> 显示的结果，此时已经知道密钥 ID 为 <code>0F136FEA</code><br>设置 Git 使用该密钥 ID 加密：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.signingkey 0F136FEA</span><br></pre></td></tr></table></figure><p>设置 Git 全局使用该密钥加密：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global commit.gpgsign true</span><br></pre></td></tr></table></figure><p>最后，再输入以下命令查看 Git 配置情况：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config -l</span><br></pre></td></tr></table></figure><p>可以看到包含以下信息说明设置成功。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">user.signingkey&#x3D;0F136FEA</span><br><span class="line">commit.gpgsign&#x3D;true</span><br></pre></td></tr></table></figure><p>至此，使用 <code>GPG</code> 加密 <code>Github Commits</code> 就正式完成了。<br>以后再 <code>Git Commit</code>，同步到 <code>Github</code> 上之后，就会发现该 <code>Commit</code> 已显示 <code>Verified</code>。</p><p>参考链接:<br><a href="https://teddysun.com/496.html">https://teddysun.com/496.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu16.04升级到18.04LTS记录</title>
      <link href="/blog/2018/12/21/Ubuntu16-04%E5%8D%87%E7%BA%A7%E5%88%B018-04LTS%E8%AE%B0%E5%BD%95/"/>
      <url>/blog/2018/12/21/Ubuntu16-04%E5%8D%87%E7%BA%A7%E5%88%B018-04LTS%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="更新Ubuntu-16-04"><a href="#更新Ubuntu-16-04" class="headerlink" title="更新Ubuntu 16.04"></a>更新Ubuntu 16.04</h1><p>在升级之前，先更新当前的16.04至最新状态。建议升级之前更新/升级所有已安装的软件包。</p><p>首先更新APT源和软件包至最新</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update &amp;&amp; sudo apt dist-upgrade &amp;&amp; sudo apt autoremove</span><br></pre></td></tr></table></figure><h1 id="安装和配置Ubuntu-update-manager"><a href="#安装和配置Ubuntu-update-manager" class="headerlink" title="安装和配置Ubuntu update manager"></a>安装和配置<code>Ubuntu update manager</code></h1><p>更新完组件后，运行以下命令安装<code>update-manager-core</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install update-manager-core</span><br></pre></td></tr></table></figure><p>打开<code>update-manager</code>配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi &#x2F;etc&#x2F;update-manager&#x2F;release-upgrades</span><br></pre></td></tr></table></figure><blockquote><p>确保设置为Prompt=lts</p></blockquote><h1 id="执行升级命令"><a href="#执行升级命令" class="headerlink" title="执行升级命令"></a>执行升级命令</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo do-release-upgrade -d</span><br></pre></td></tr></table></figure><p>出现升级提示时，全部选择y</p><p>等待所有的软件包下载…安装…到重启… </p><p>当所有操作执行完毕后，系统就升级到最新的Ubuntu 18.04 LTS版本了。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android获得点击屏幕的位置坐标</title>
      <link href="/blog/2018/12/17/Android%E8%8E%B7%E5%BE%97%E7%82%B9%E5%87%BB%E5%B1%8F%E5%B9%95%E7%9A%84%E4%BD%8D%E7%BD%AE%E5%9D%90%E6%A0%87/"/>
      <url>/blog/2018/12/17/Android%E8%8E%B7%E5%BE%97%E7%82%B9%E5%87%BB%E5%B1%8F%E5%B9%95%E7%9A%84%E4%BD%8D%E7%BD%AE%E5%9D%90%E6%A0%87/</url>
      
        <content type="html"><![CDATA[<h1 id="开发者选项获得点击屏幕的位置坐标"><a href="#开发者选项获得点击屏幕的位置坐标" class="headerlink" title="开发者选项获得点击屏幕的位置坐标"></a>开发者选项获得点击屏幕的位置坐标</h1><p>在手机开发者选项中,打开指针位置,可以在屏幕上方获取当前点击位置的坐标点(x,y)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">P:1/1  X:553  Y:1851  Xv:0:0  Yv:0:0 Prs:1.0  Size:0.13</span><br></pre></td></tr></table></figure> <img src="https://i.loli.net/2018/12/18/5c18b910782fd.jpg" width = "300" alt="Android开发者选项_指针位置" align=center /><p> 命令行窗口输入：<code>adb shell input tap 553 1851</code>实现点击效果</p><h1 id="通过adb-shell-getevent命令获得点击屏幕的位置坐标"><a href="#通过adb-shell-getevent命令获得点击屏幕的位置坐标" class="headerlink" title="通过adb shell getevent命令获得点击屏幕的位置坐标"></a>通过<code>adb shell getevent</code>命令获得点击屏幕的位置坐标</h1><ol><li>命令行窗口输入:<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell getevent -p | grep -e &quot;0035&quot; -e &quot;0036&quot;</span><br></pre></td></tr></table></figure></li></ol><p>获得event 体系里 width宽（0035）和height高（0036）</p><p><img src="https://i.loli.net/2018/12/18/5c18bd9839f38.png"><br><img src="https://i.loli.net/2018/12/18/5c18bf79433b8.png"><br>2. 计算比例<br>用到其中的max值</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0035（width） max 1024</span><br><span class="line">0036（height） max 600</span><br></pre></td></tr></table></figure><p>跟手机屏幕的分辨率比较，获取手机分辨率在命令行窗口输入:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell wm size </span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2018/12/18/5c18c406093bf.png"></p><p>即手机分辨率是: 1280(width) x 600(height)</p><p>计算比例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rateW = 1280(手机屏幕的宽) / 1024(event里0035的max) = 1.25</span><br><span class="line">rateH = 600(手机屏幕的高) / 600(event里0036的max) = 1</span><br></pre></td></tr></table></figure><ol start="3"><li>点击屏幕计算点击位置的坐标</li></ol><p>在命令行窗口输入:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell getevent | grep -e &quot;0035&quot; -e &quot;0036&quot;</span><br></pre></td></tr></table></figure><blockquote><p>注意：这里的命令<code>adb shell getevent</code>不带<code>-p</code>参数</p></blockquote><p>例如,点击屏幕一个位置得到输出:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/dev/input/event0: 0003 0035 00000280</span><br><span class="line">/dev/input/event0: 0003 0036 0000018c</span><br></pre></td></tr></table></figure><p>把0035和0036后面的位置数据从16进制转化为10进制</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">width = 0x280 = 2*16*16 + 8*16 = 640</span><br><span class="line">height = 0x8ec = 1*16*16 + 8*16 + 12 = 396</span><br></pre></td></tr></table></figure><p>这是在event体系里的位置，将其转化为屏幕位置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">screenW = width*rateW = 640*1.25 = 800</span><br><span class="line">screenH = height*rateH = 396*1 = 396</span><br></pre></td></tr></table></figure><p>最终算出来了<br>刚刚点击的屏幕位置坐标就是（800, 396）</p><h1 id="代码TouchEvent里面的位置直接就是你在屏幕上的点击位置"><a href="#代码TouchEvent里面的位置直接就是你在屏幕上的点击位置" class="headerlink" title="代码TouchEvent里面的位置直接就是你在屏幕上的点击位置"></a>代码TouchEvent里面的位置直接就是你在屏幕上的点击位置</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//    ACTION_DOWN:用户按下屏幕的事件</span></span><br><span class="line"><span class="comment">//    ACTION_MOVE:用户滑动的时间</span></span><br><span class="line"><span class="comment">//    ACTION_UP:用户手指从按下状态抬起屏幕的时间</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    getAction方法：得到操作时间的类型</span></span><br><span class="line"><span class="comment">//    getDwonTime方法：得到用户按下的时间</span></span><br><span class="line"><span class="comment">//    getEventTime方法：得到用户操作的时间</span></span><br><span class="line"><span class="comment">//    getPressure方法：得到用户的触摸压力值</span></span><br><span class="line"></span><br><span class="line">    <span class="function">override fun <span class="title">onTouchEvent</span><span class="params">(event: MotionEvent?)</span>: Boolean </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (MotionEvent.ACTION_DOWN == event!!.action) &#123;</span><br><span class="line">            <span class="keyword">var</span> x = event.x</span><br><span class="line">            <span class="keyword">var</span> y = event.y</span><br><span class="line">            tv!!.text = <span class="string">&quot;您点击的位置是:\nx: &quot;</span> + x + <span class="string">&quot;\ny: &quot;</span> + y</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onTouchEvent(event)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2018/12/18/5c18c98c3685a.png"><br>详细代码<br><a href="https://github.com/xmaihh/KotlinTrainingThings/releases/tag/v1.0">https://github.com/xmaihh/KotlinTrainingThings/releases/tag/v1.0</a></p>]]></content>
      
      
      <categories>
          
          <category> Android Framework </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> ADB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中bit的操作技巧</title>
      <link href="/blog/2018/12/10/Java%E4%B8%ADbit%E7%9A%84%E6%93%8D%E4%BD%9C%E6%8A%80%E5%B7%A7/"/>
      <url>/blog/2018/12/10/Java%E4%B8%ADbit%E7%9A%84%E6%93%8D%E4%BD%9C%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<p>Java中定义八种基本数据类型,最小到byte,然而最近在底层操作中遇到需要根据一个byte中的bit来操作,作此记录。</p><h1 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h1><ul><li>byte b; 1字节（8位） （-128~127）（-2的7次方到2的7次方-1）</li><li>short s; 2字节（16位） （-32768~32767）（-2的15次方到2的15次方-1）</li><li>char c;2字节（16位）（C语言中是1字节）可以存储一个汉字</li><li>int i; 4字节（32位） （一个字长）（-2147483648~2147483647）（-2的31次方到2的31次方-1）</li><li>long l; 8字节（64位） （-9223372036854774808~9223372036854774807）（-2的63次方到2的63次方-1）</li><li>float f; 4字节（32位） （3.402823e+38 ~ 1.401298e-45）（e+38是乘以10的38次方，e-45是乘以10的负45次方）(-2^128 ~ +2^128)</li><li>double d; 8字节（64位） （1.797693e+308~ 4.9000000e-324)(-2^1024 ~ +2^1024)</li><li>boolean bool; false/true (理论上占用1bit,1/8字节，实际处理按1byte处理)</li></ul><h1 id="bit操作技巧"><a href="#bit操作技巧" class="headerlink" title="bit操作技巧"></a>bit操作技巧</h1><p> bit：位<br>    一个二进制数据0或1，是1bit；<br>Java中最小基本数据类型是byte,Java中要根据byte获得bit就要进行一些位操作可以根据<code> 1 byte = 8 bit</code>这个转化关系来。</p><h2 id="将byte转换bit"><a href="#将byte转换bit" class="headerlink" title="将byte转换bit"></a>将byte转换bit</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">    * 将byte转换为一个长度为8的byte数组，数组每个值代表bit</span><br><span class="line">    * &lt;p&gt; e.g.</span><br><span class="line">    * byte b &#x3D; 0x35; &#x2F;&#x2F; 0011 0101</span><br><span class="line">    * &#x2F;&#x2F; 输出 [0, 0, 1, 1, 0, 1, 0, 1]</span><br><span class="line">    *</span><br><span class="line">    * @param b</span><br><span class="line">    * @return</span><br><span class="line">    *&#x2F;</span><br><span class="line">   public static byte[] getBooleanArray(byte b) &#123;</span><br><span class="line">       byte[] array &#x3D; new byte[8];</span><br><span class="line">       for (int i &#x3D; 7; i &gt;&#x3D; 0; i--) &#123;</span><br><span class="line">           array[i] &#x3D; (byte) (b &amp; 1);</span><br><span class="line">           b &#x3D; (byte) (b &gt;&gt; 1);</span><br><span class="line">       &#125;</span><br><span class="line">       return array;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line">    * 把byte转为字符串的bit</span><br><span class="line">    * &lt;p&gt; e.g.</span><br><span class="line">    * byte b &#x3D; 0x35; &#x2F;&#x2F; 0011 0101</span><br><span class="line">    * &#x2F;&#x2F; 输出 00110101</span><br><span class="line">    *</span><br><span class="line">    * @param b</span><br><span class="line">    * @return</span><br><span class="line">    *&#x2F;</span><br><span class="line"></span><br><span class="line">   public static String byteToBit(byte b) &#123;</span><br><span class="line">       return &quot;&quot;</span><br><span class="line">               + (byte) ((b &gt;&gt; 7) &amp; 0x1) + (byte) ((b &gt;&gt; 6) &amp; 0x1)</span><br><span class="line">               + (byte) ((b &gt;&gt; 5) &amp; 0x1) + (byte) ((b &gt;&gt; 4) &amp; 0x1)</span><br><span class="line">               + (byte) ((b &gt;&gt; 3) &amp; 0x1) + (byte) ((b &gt;&gt; 2) &amp; 0x1)</span><br><span class="line">               + (byte) ((b &gt;&gt; 1) &amp; 0x1) + (byte) ((b &gt;&gt; 0) &amp; 0x1);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出内容就是各个 bit 位的 0 和 1 值，还有一种<br>JDK自带的方法<code>Integer.toBinaryString(0x35);</code>,会忽略前面的 0 ,输出为<code>110101</code></p></blockquote><h2 id="bit转换byte"><a href="#bit转换byte" class="headerlink" title="bit转换byte"></a>bit转换byte</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">    * 二进制字符串转byte</span><br><span class="line">    *</span><br><span class="line">    * @param byteStr</span><br><span class="line">    * @return</span><br><span class="line">    *&#x2F;</span><br><span class="line">   public static byte decodeBinaryString(String byteStr) &#123;</span><br><span class="line">       int re, len;</span><br><span class="line">       if (null &#x3D;&#x3D; byteStr) &#123;</span><br><span class="line">           return 0;</span><br><span class="line">       &#125;</span><br><span class="line">       len &#x3D; byteStr.length();</span><br><span class="line">       if (len !&#x3D; 4 &amp;&amp; len !&#x3D; 8) &#123;</span><br><span class="line">           return 0;</span><br><span class="line">       &#125;</span><br><span class="line">       if (len &#x3D;&#x3D; 8) &#123;&#x2F;&#x2F; 8 bit处理</span><br><span class="line">           if (byteStr.charAt(0) &#x3D;&#x3D; &#39;0&#39;) &#123;&#x2F;&#x2F; 正数</span><br><span class="line">               re &#x3D; Integer.parseInt(byteStr, 2);</span><br><span class="line">           &#125; else &#123;&#x2F;&#x2F; 负数</span><br><span class="line">               re &#x3D; Integer.parseInt(byteStr, 2) - 256;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; else &#123;&#x2F;&#x2F; 4 bit处理</span><br><span class="line">           re &#x3D; Integer.parseInt(byteStr, 2);</span><br><span class="line">       &#125;</span><br><span class="line">       return (byte) re;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android Framework </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android的四大启动模式</title>
      <link href="/blog/2018/12/03/Android%E7%9A%84%E5%9B%9B%E5%A4%A7%E5%90%AF%E5%8A%A8%E6%A8%A1%E5%BC%8F/"/>
      <url>/blog/2018/12/03/Android%E7%9A%84%E5%9B%9B%E5%A4%A7%E5%90%AF%E5%8A%A8%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h1><ol><li>standard：标准模式</li><li>singleTop：栈顶复用模式</li><li>singleTask：栈内复用模式</li><li>singleInstance：单一实例模式<h1 id="启动模式"><a href="#启动模式" class="headerlink" title="启动模式"></a>启动模式</h1><h2 id="standard：标准模式"><a href="#standard：标准模式" class="headerlink" title="standard：标准模式"></a>standard：标准模式</h2></li></ol><p>系统默认模式。每次启动一个Activity都会重新创建一个新的实例，不管这个实例是否已经存在。在这个模式下，谁启动了Activity，那么这个Activity就运行在启动它的那个Activity所在栈中。</p><h2 id="singleTop：栈顶复用模式"><a href="#singleTop：栈顶复用模式" class="headerlink" title="singleTop：栈顶复用模式"></a>singleTop：栈顶复用模式</h2><p>在这种模式下，如果新的Activity已经位于任务栈顶，那么此Activity不会被重新创建，同时它的onNewIntent方法会被回调，通过此方法的参数我们可以取出当前的请求信息</p><h2 id="singleTask：栈内复用模式"><a href="#singleTask：栈内复用模式" class="headerlink" title="singleTask：栈内复用模式"></a>singleTask：栈内复用模式</h2><p>这是一种单例模式，在这种模式下，只要Activity在一个栈中存在，那么多次启动此Activity都不会创建实例，和singleTop是一样，系统也会调用onNewIntent。还有一点，就是singleTask有clearTop的效果，会导致栈内已有的Activity全部出栈。</p><h2 id="singleInstance：单一实例模式"><a href="#singleInstance：单一实例模式" class="headerlink" title="singleInstance：单一实例模式"></a>singleInstance：单一实例模式</h2><p>这是一种加强的singleTask模式，它除了具有singleTask的所有特性以外，还加强了一点，那就是具有此模式的Activity只能单独位于一个任务栈中，比如Activity A是singleInstance模式，当A启动后，系统会为它创建一个新的任务栈，然后A独自在这个新的任务栈中，由于栈内复用的特性，后续均不会创建新的Activity，除非这个独特的任务栈被系统销毁。整个手机操作系统里面只有一个实例存在。不同的应用去打开这个activity 共享公用的同一个activity。他会运行在自己单独，独立的任务栈里面，并且任务栈里面只有他一个实例存在。</p><h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h1><h2 id="standard使用场景："><a href="#standard使用场景：" class="headerlink" title="standard使用场景："></a>standard使用场景：</h2><p>邮件客户端，在新建一个邮件的时候，适合新建一个新的实例</p><h2 id="singleTop使用场景："><a href="#singleTop使用场景：" class="headerlink" title="singleTop使用场景："></a>singleTop使用场景：</h2><p>消息推送，通知栏弹出Notification，点击Notification跳转到指定Activity，使用singleTop避免生成重复的页面。<br>登录的时候，登录成功跳转到主页，按下两次登录按钮，使用singleTask避免生成两个主页。<br>从activity A启动了个service进行耗时操作，或者某种监听，这个时候你home键了，service收集到信息，要返回activityA。</p><h2 id="singleTask使用场景："><a href="#singleTask使用场景：" class="headerlink" title="singleTask使用场景："></a>singleTask使用场景：</h2><p>提供给第三方应用调用的页面，做浏览器、微博之类的应用，浏览器的主界面等等。<br>程序的主界面，进入多层嵌套之后，一键退回，之前打开的Activity全部出栈。</p><h2 id="singleInstance使用场景："><a href="#singleInstance使用场景：" class="headerlink" title="singleInstance使用场景："></a>singleInstance使用场景：</h2><p>呼叫来电界面，打电话、发短信功能。<br>闹铃提醒，将闹铃提醒与闹铃设置分离。</p><h1 id="四种启动模式的区别"><a href="#四种启动模式的区别" class="headerlink" title="四种启动模式的区别"></a>四种启动模式的区别</h1><p><img src="https://github.com/xmaihh/xmaihh.github.io/raw/master/asset/Android-launchMode.png" alt="Android启动模式"></p><h1 id="启动模式的设置"><a href="#启动模式的设置" class="headerlink" title="启动模式的设置"></a>启动模式的设置</h1><h2 id="在AndroidMainifest的Activity配置进行设置"><a href="#在AndroidMainifest的Activity配置进行设置" class="headerlink" title="在AndroidMainifest的Activity配置进行设置"></a>在<code>AndroidMainifest</code>的Activity配置进行设置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;activity </span><br><span class="line">    android:name&#x3D;&quot;.singletop.SingleTopActivity&quot; </span><br><span class="line">    android:launchMode&#x3D;&quot;singleTop&quot;</span><br><span class="line">    android:taskAffinity&#x3D;&quot;com.xmaihh.demo.standard&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure><blockquote><p>taskAffinitys属性在默认情况下一个应用中的所有activity具有相同的taskAffinity，即应用程序的包名。我们可以通过设置不同的taskAffinity属性给应用中的activity分组，也可以把不同的应用中的activity的taskAffinity设置成相同的值。</p></blockquote><h2 id="通过Intent设置标志位"><a href="#通过Intent设置标志位" class="headerlink" title="通过Intent设置标志位"></a>通过Intent设置标志位</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Intent inten &#x3D; new Intent (ActivityA.this,ActivityB.class);</span><br><span class="line">intent,addFlags(Intent,FLAG_ACTIVITY_NEW_TASK);</span><br><span class="line">startActivity(intent);</span><br></pre></td></tr></table></figure><p>标志位属性<br>| 标记位属性 | 含义 |<br>| – | –|<br>| FLAG_ACTIVITY_SINGLE_TOP | 指定启动模式为栈顶复用模式（SingleTop） |<br>| FLAG_ACTIVITY_NEW_TASK | 指定启动模式为栈内复用模式（SingleTask） |<br>| FLAG_ACTIVITY_CLEAR_TOP | 所有位于其上层的Activity都要移除，SingleTask模式默认具有此标记效果 |<br>| FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS | 具有该标记的Activity不会出现在历史Activity的列表中，即无法通过历史列表回到该Activity上 |</p><blockquote><p>两种设置方式有区别<br>1.优先级不同<br>Intent设置方式的优先级 &gt; Manifest设置方式，即 以前者为准<br>2.限定范围不同<br>Manifest设置方式无法设定 FLAG_ACTIVITY_CLEAR_TOP；Intent设置方式 无法设置单例模式（SingleInstance）</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Android Framework </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AndroidStudio的module library添加aar的配置</title>
      <link href="/blog/2018/11/20/AndroidStudio%E7%9A%84module-library%E6%B7%BB%E5%8A%A0aar%E7%9A%84%E9%85%8D%E7%BD%AE/"/>
      <url>/blog/2018/11/20/AndroidStudio%E7%9A%84module-library%E6%B7%BB%E5%8A%A0aar%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="使用aar的步骤"><a href="#使用aar的步骤" class="headerlink" title="使用aar的步骤"></a>使用aar的步骤</h1><ol><li><p>在app的build.gradle中加入配置<br>一般来说,对<code>/项目工程/app/build.gradle</code>加入配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">android&#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    repositories &#123;</span><br><span class="line">        flatDir &#123;</span><br><span class="line">            dirs &#39;libs&#39;   &#x2F;&#x2F; aar目录</span><br><span class="line">          &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>将aar文件拷贝到<code>app/libs</code>目录下 (e.g. aar文件为 xxxx-release.aar)</p></li><li><p>在app的dependencies中加入aar引用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation(name: &#39;xxxx-release&#39;, ext: &#39;aar&#39;)</span><br></pre></td></tr></table></figure><p>重新编译即可使用新加入的aar文件了</p><h1 id="在module-library使用aar的步骤"><a href="#在module-library使用aar的步骤" class="headerlink" title="在module library使用aar的步骤"></a>在module library使用aar的步骤</h1></li><li><p>在<code>module library</code>的build.gradle中加入配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: &#39;com.android.library&#39;</span><br><span class="line">android&#123;</span><br><span class="line">  repositories &#123;</span><br><span class="line">        flatDir &#123;</span><br><span class="line">            dirs &#39;libs&#39;,&#39;..&#x2F;module_library&#x2F;libs</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">dependencies &#123;</span><br><span class="line">    implementation fileTree(include: [&#39;*.jar&#39;], dir: &#39;libs&#39;)</span><br><span class="line">    implementation(name: &#39;xxxx-release&#39;, ext: &#39;aar&#39;)</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里主要是配置路径：这个是相对项目下的路径，一定要配上/module_library/libs,否则会由于路径不对找不到对应的aar</p></li><li><p>将aar文件拷贝到<code>module_library/libs</code>目录下 (e.g. aar文件为 xxxx-release.aar)</p></li><li><p>在<code>module library</code>的dependencies中加入aar引用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation(name: &#39;xxxx-release&#39;, ext: &#39;aar&#39;)</span><br></pre></td></tr></table></figure><blockquote></blockquote><p>如果觉得写绝对路径比较复杂，可以更简单点,在Top-level build.gradle定义</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ext&#123;</span><br><span class="line">   MODULE_DIR_PATH &#x3D; projectDir.getPath() +  &quot;&#x2F;module_library&#x2F;libs&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么依赖可以写成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">repositories &#123;</span><br><span class="line">        flatDir &#123;</span><br><span class="line">            dirs &#39;libs&#39;,  rootProject.ext.MODULE_DIR_PATH</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> AndroidStudio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android工程中assets与raw文件夹的区别</title>
      <link href="/blog/2018/11/13/Android%E5%B7%A5%E7%A8%8B%E4%B8%ADassets%E4%B8%8Eraw%E6%96%87%E4%BB%B6%E5%A4%B9%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/blog/2018/11/13/Android%E5%B7%A5%E7%A8%8B%E4%B8%ADassets%E4%B8%8Eraw%E6%96%87%E4%BB%B6%E5%A4%B9%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p>  我们都知道Android工程中assets与raw文件夹都可以用来存放文件<br>比如已经设计好的数据库文件可以选择放到assets中（当然你们也可以放到raw里 ），这样程序在打包时会原封不动的保存到apk包中，不会被编译成二进制。早期android2.3以前的版本有着assets和raw里资源文件不能超过1M的限制，当然现在已经没有这个限制了。</p><h1 id="res-raw和assets的相同点"><a href="#res-raw和assets的相同点" class="headerlink" title="res/raw和assets的相同点"></a>res/raw和assets的相同点</h1><p>两者目录下的文件在打包后会原封不动的保存在apk包中，不会被编译成二进制</p><h1 id="res-raw和assets的不同点"><a href="#res-raw和assets的不同点" class="headerlink" title="res/raw和assets的不同点"></a>res/raw和assets的不同点</h1><ol><li>res/raw中的文件会被映射到R.java文件中，访问的时候直接使用资源ID即R.id.filename；assets文件夹下的文件不会被映射到R.java中，访问的时候需要AssetManager类。</li><li>res/raw不可以有目录结构，而assets则可以有目录结构，也就是assets目录下可以再建立文件夹</li></ol><blockquote><ul><li>由于raw是Resources (res)的子目录，Android会自动的为这目录中的所有资源文件生成一个ID，这个ID会被存储在R类当中，作为一个文件的引用。这意味着这个资源文件可以很容易的被Android的类和方法访问到，甚至在Android XML文件中你也可以@raw/的形式引用到它。在Android中，使用ID是访问一个文件最快捷的方式。MP3和Ogg文件放在这个目录下是比较合适的。</li><li>assets目录更像一个附录类型的目录，Android不会为这个目录中的文件生成ID并保存在R类当中，因此它与Android中的一些类和方法兼容度更低。同时，由于你需要一个字符串路径来获取这个目录下的文件描述符，访问的速度会更慢。但是把一些文件放在这个目录下会使一些操作更加方便，比方说拷贝一个数据库文件到系统内存中。要注意的是，你无法在Android XML文件中引用到assets目录下的文件，只能通过AssetManager来访问这些文件。数据库文件和游戏数据等放在这个目录下是比较合适的。</li></ul></blockquote><h1 id="读取文件资源"><a href="#读取文件资源" class="headerlink" title="读取文件资源"></a>读取文件资源</h1><ol><li>读取res/raw下的文件资源，通过以下方式获取输入流来进行写操作<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">InputStream is &#x3D; getResources().openRawResource(R.id.filename); </span><br></pre></td></tr></table></figure></li><li>读取assets下的文件资源，通过以下方式获取输入流来进行写操作<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">AssetManager am &#x3D; null;  </span><br><span class="line">am &#x3D; getAssets();  </span><br><span class="line">InputStream is &#x3D; am.open(&quot;filename&quot;);  </span><br></pre></td></tr></table></figure><h1 id="读取-res-raw下文件并写入sd卡的示例方法"><a href="#读取-res-raw下文件并写入sd卡的示例方法" class="headerlink" title="读取/res/raw下文件并写入sd卡的示例方法"></a>读取/res/raw下文件并写入sd卡的示例方法</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">void makeFile() &#123;</span><br><span class="line">    Toast.makeText(MainActivity.this, &quot;开始创建文件&quot;, Toast.LENGTH_SHORT).show();</span><br><span class="line">        if (Environment.getExternalStorageState().equals(</span><br><span class="line">            Environment.MEDIA_MOUNTED)) &#123;</span><br><span class="line">        String dirPath &#x3D; Environment.getExternalStorageDirectory()</span><br><span class="line">                .getPath() + &quot;&#x2F;WeiPics&quot;; &#x2F;&#x2F; 要保存的路径</span><br><span class="line">        String fileName &#x3D; &quot;notes1.png&quot;; &#x2F;&#x2F; 文件名</span><br><span class="line"> </span><br><span class="line">        try &#123;</span><br><span class="line">            File dir &#x3D; new File(dirPath);</span><br><span class="line">            if (!dir.exists()) &#123;&#x2F;&#x2F; 如果目录不存在，创建目录</span><br><span class="line">                dir.mkdirs();</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            File file &#x3D; new File(dirPath + &quot;&#x2F;&quot; + fileName);</span><br><span class="line">            if (!file.exists()) &#123;&#x2F;&#x2F; 如果文件不存在，创建文件</span><br><span class="line">                InputStream ins &#x3D; getResources().openRawResource(</span><br><span class="line">                        R.raw.notes1);</span><br><span class="line">                FileOutputStream fos &#x3D; new FileOutputStream(file);</span><br><span class="line">                byte[] buffer &#x3D; new byte[8192];</span><br><span class="line">                int count &#x3D; 0;</span><br><span class="line">                while ((count &#x3D; ins.read(buffer)) &gt; 0) &#123;</span><br><span class="line">                    fos.write(buffer, 0, count);</span><br><span class="line">                &#125;</span><br><span class="line">                fos.close();</span><br><span class="line">                ins.close();</span><br><span class="line">                Toast.makeText(MainActivity.this, &quot;创建文件成功&quot;,</span><br><span class="line">                        Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>另外，在Manifest中记得加入相关权限<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;uses-permission android:name&#x3D;&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure>读取/assets下文件并写入sd卡的示例方法<br>和上面的方法几乎一致，只是把：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">InputStream ins &#x3D; getResources().openRawResource(</span><br><span class="line">                        R.raw.notes1);</span><br></pre></td></tr></table></figure>改为:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AssetManager assetManager &#x3D; getAssets();</span><br><span class="line">InputStream ins &#x3D; assetManager.open(&quot;Notes1.png&quot;);</span><br></pre></td></tr></table></figure><h1 id="获取assets文件夹的所有文件"><a href="#获取assets文件夹的所有文件" class="headerlink" title="获取assets文件夹的所有文件"></a>获取assets文件夹的所有文件</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">AssetManager am &#x3D; context.getAssets();</span><br><span class="line">String[] path &#x3D; null;</span><br><span class="line">try &#123;</span><br><span class="line">    path &#x3D; am.list(&quot;&quot;);  &#x2F;&#x2F; &quot;&quot;获取所有,填入目录获取该目录下所有资源</span><br><span class="line">&#125; catch (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> AndroidStudio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何正确写出单例模式</title>
      <link href="/blog/2018/11/09/%E5%A6%82%E4%BD%95%E6%AD%A3%E7%A1%AE%E5%86%99%E5%87%BA%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/blog/2018/11/09/%E5%A6%82%E4%BD%95%E6%AD%A3%E7%A1%AE%E5%86%99%E5%87%BA%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>单例模式算是设计模式中最容易理解，也是最容易手写代码的模式了吧。但是其中的坑却不少，所以也常作为面试题来考。本文主要对几种单例写法的整理，并分析其优缺点。很多都是一些老生常谈的问题，但如果你不知道如何创建一个线程安全的单例，不知道什么是双检锁，那这篇文章可能会帮助到你。</p><h1 id="懒汉式，线程不安全"><a href="#懒汉式，线程不安全" class="headerlink" title="懒汉式，线程不安全"></a>懒汉式，线程不安全</h1><p>当被问到要实现一个单例模式时，很多人的第一反应是写出如下的代码，包括教科书上也是这样教我们的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class Singleton &#123;</span><br><span class="line">    private static Singleton instance;</span><br><span class="line">    private Singleton ()&#123;&#125;</span><br><span class="line">    public static Singleton getInstance() &#123;</span><br><span class="line">     if (instance &#x3D;&#x3D; null) &#123;</span><br><span class="line">         instance &#x3D; new Singleton();</span><br><span class="line">     &#125;</span><br><span class="line">     return instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码简单明了，而且使用了懒加载模式，但是却存在致命的问题。当有多个线程并行调用 getInstance() 的时候，就会创建多个实例。也就是说在多线程下不能正常工作。</p><h1 id="懒汉式，线程安全"><a href="#懒汉式，线程安全" class="headerlink" title="懒汉式，线程安全"></a>懒汉式，线程安全</h1><p>为了解决上面的问题，最简单的方法是将整个 getInstance() 方法设为同步（synchronized）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public static synchronized Singleton getInstance() &#123;</span><br><span class="line">    if (instance &#x3D;&#x3D; null) &#123;</span><br><span class="line">        instance &#x3D; new Singleton();</span><br><span class="line">    &#125;</span><br><span class="line">    return instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然做到了线程安全，并且解决了多实例的问题，但是它并不高效。因为在任何时候只能有一个线程调用 getInstance() 方法。但是同步操作只需要在第一次调用时才被需要，即第一次创建单例实例对象时。这就引出了双重检验锁。</p><h1 id="双重检验锁"><a href="#双重检验锁" class="headerlink" title="双重检验锁"></a>双重检验锁</h1><p>双重检验锁模式（double checked locking pattern），是一种使用同步块加锁的方法。程序员称其为双重检查锁，因为会有两次检查<code>instance == null</code>，一次是在同步块外，一次是在同步块内。为什么在同步块内还要再检验一次？因为可能会有多个线程一起进入同步块外的 if，如果在同步块内不进行二次检验的话就会生成多个实例了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public static Singleton getSingleton() &#123;</span><br><span class="line">    if (instance &#x3D;&#x3D; null) &#123;                         &#x2F;&#x2F;Single Checked</span><br><span class="line">        synchronized (Singleton.class) &#123;</span><br><span class="line">            if (instance &#x3D;&#x3D; null) &#123;                 &#x2F;&#x2F;Double Checked</span><br><span class="line">                instance &#x3D; new Singleton();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return instance ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码看起来很完美，很可惜，它是有问题。主要在于instance = new Singleton()这句，这并非是一个原子操作，事实上在 JVM 中这句话大概做了下面 3 件事情。</p><ol><li>给 instance 分配内存</li><li>调用 Singleton 的构造函数来初始化成员变量</li><li>将instance对象指向分配的内存空间（执行完这步 instance 就为非 null 了）</li></ol><p>但是在 JVM 的即时编译器中存在指令重排序的优化。也就是说上面的第二步和第三步的顺序是不能保证的，最终的执行顺序可能是 1-2-3 也可能是 1-3-2。如果是后者，则在 3 执行完毕、2 未执行之前，被线程二抢占了，这时 instance 已经是非 null 了（但却没有初始化），所以线程二会直接返回 instance，然后使用，然后顺理成章地报错。</p><p>我们只需要将 instance 变量声明成 volatile 就可以了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public class Singleton &#123;</span><br><span class="line">    private volatile static Singleton instance; &#x2F;&#x2F;声明成 volatile</span><br><span class="line">    private Singleton ()&#123;&#125;</span><br><span class="line">    public static Singleton getSingleton() &#123;</span><br><span class="line">        if (instance &#x3D;&#x3D; null) &#123;                         </span><br><span class="line">            synchronized (Singleton.class) &#123;</span><br><span class="line">                if (instance &#x3D;&#x3D; null) &#123;       </span><br><span class="line">                    instance &#x3D; new Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return instance;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有些人认为使用 volatile 的原因是可见性，也就是可以保证线程在本地不会存有 instance 的副本，每次都是去主内存中读取。但其实是不对的。使用 volatile 的主要原因是其另一个特性：禁止指令重排序优化。也就是说，在 volatile 变量的赋值操作后面会有一个内存屏障（生成的汇编代码上），读操作不会被重排序到内存屏障之前。比如上面的例子，取操作必须在执行完 1-2-3 之后或者 1-3-2 之后，不存在执行到 1-3 然后取到值的情况。从「先行发生原则」的角度理解的话，就是对于一个 volatile 变量的写操作都先行发生于后面对这个变量的读操作（这里的“后面”是时间上的先后顺序）。</p><p>但是特别注意在 Java 5 以前的版本使用了 volatile 的双检锁还是有问题的。其原因是 Java 5 以前的 JMM （Java 内存模型）是存在缺陷的，即时将变量声明成 volatile 也不能完全避免重排序，主要是 volatile 变量前后的代码仍然存在重排序问题。这个 volatile 屏蔽重排序的问题在 Java 5 中才得以修复，所以在这之后才可以放心使用 volatile。</p><p>相信你不会喜欢这种复杂又隐含问题的方式，当然我们有更好的实现线程安全的单例模式的办法。</p><h1 id="饿汉式-static-final-field"><a href="#饿汉式-static-final-field" class="headerlink" title="饿汉式 static final field"></a>饿汉式 static final field</h1><p>这种方法非常简单，因为单例的实例被声明成 static 和 final 变量了，在第一次加载类到内存中时就会初始化，所以创建实例本身是线程安全的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class Singleton&#123;</span><br><span class="line">    &#x2F;&#x2F;类加载时就初始化</span><br><span class="line">    private static final Singleton instance &#x3D; new Singleton();</span><br><span class="line">    </span><br><span class="line">    private Singleton()&#123;&#125;</span><br><span class="line">    public static Singleton getInstance()&#123;</span><br><span class="line">        return instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种写法如果完美的话，就没必要在啰嗦那么多双检锁的问题了。缺点是它不是一种懒加载模式（lazy initialization），单例会在加载类后一开始就被初始化，即使客户端没有调用 getInstance()方法。饿汉式的创建方式在一些场景中将无法使用：譬如 Singleton 实例的创建是依赖参数或者配置文件的，在 getInstance() 之前必须调用某个方法设置参数给它，那样这种单例写法就无法使用了。</p><h1 id="静态内部类-static-nested-class"><a href="#静态内部类-static-nested-class" class="headerlink" title="静态内部类 static nested class"></a>静态内部类 static nested class</h1><p>我比较倾向于使用静态内部类的方法，这种方法也是《Effective Java》上所推荐的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class Singleton &#123;  </span><br><span class="line">    private static class SingletonHolder &#123;  </span><br><span class="line">        private static final Singleton INSTANCE &#x3D; new Singleton();  </span><br><span class="line">    &#125;  </span><br><span class="line">    private Singleton ()&#123;&#125;  </span><br><span class="line">    public static final Singleton getInstance() &#123;  </span><br><span class="line">        return SingletonHolder.INSTANCE; </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种写法仍然使用JVM本身机制保证了线程安全问题；由于 SingletonHolder 是私有的，除了 getInstance() 之外没有办法访问它，因此它是懒汉式的；同时读取实例的时候不会进行同步，没有性能缺陷；也不依赖 JDK 版本。</p><h1 id="枚举-Enum"><a href="#枚举-Enum" class="headerlink" title="枚举 Enum"></a>枚举 Enum</h1><p>用枚举写单例实在太简单了！这也是它最大的优点。下面这段代码就是声明枚举实例的通常做法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public enum EasySingleton&#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以通过EasySingleton.INSTANCE来访问实例，这比调用getInstance()方法简单多了。创建枚举默认就是线程安全的，所以不需要担心double checked locking，而且还能防止反序列化导致重新创建新的对象。但是还是很少看到有人这样写，可能是因为不太熟悉吧。Java 5 之前，我们定义常量都是： public static fianl,要Java 5以上支持枚举Enum。</p><h1 id="容器类管理"><a href="#容器类管理" class="headerlink" title="容器类管理"></a>容器类管理</h1><p>Android很多系统服务都是通过容器获取的单例，将多种单例类型注入到一个统一的管理类中，在使用时根据key获取对象对应类型的对象。这种方式使得我们可以管理多种类型的单例，并且在使用时可以通过统一的接口进行获取操作， 降低了用户的使用成本，也对用户隐藏了具体实现，降低了耦合度。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">* 使用容器实现单例模式（可以用于管理单例，有兴趣的可以尝试一下）</span><br><span class="line">* *&#x2F;</span><br><span class="line">class InstanceManager &#123;</span><br><span class="line">private static Map&lt;String, Object&gt; objectMap &#x3D; new HashMap&lt;&gt;();</span><br><span class="line">private InstanceManager()&#123;&#125;</span><br><span class="line">public static void registerService(String key,Object instance)&#123;</span><br><span class="line">if (!objectMap.containsKey(key))&#123;</span><br><span class="line">objectMap.put(key,instance);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">public static Object getService(String key)&#123;</span><br><span class="line">return objectMap.get(key);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;**</span><br><span class="line">* 使用方式</span><br><span class="line">* Dog类就不贴出来了 </span><br><span class="line">* 自己随便写个就行</span><br><span class="line">* 可以运行一下看看 打印的地址是否一致</span><br><span class="line">*&#x2F;</span><br><span class="line">class Test &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">InstanceManager .registerService(&quot;dog&quot;, new Dog());</span><br><span class="line"></span><br><span class="line">Dog dog &#x3D; (Dog) InstanceManager .getService(&quot;dog&quot;);</span><br><span class="line">Dog dog2 &#x3D; (Dog) InstanceManager .getService(&quot;dog&quot;);</span><br><span class="line">Dog dog3 &#x3D; (Dog) InstanceManager .getService(&quot;dog&quot;);</span><br><span class="line">Dog dog4 &#x3D; (Dog) InstanceManager .getService(&quot;dog&quot;);</span><br><span class="line"></span><br><span class="line">System.out.println(dog);</span><br><span class="line">System.out.println(dog2);</span><br><span class="line">System.out.println(dog3);</span><br><span class="line">System.out.println(dog4);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>一般来说，单例模式有五种写法：懒汉、饿汉、双重检验锁、静态内部类、枚举。上述所说都是线程安全的实现，文章开头给出的第一种方法不算正确的写法。</p><p>就我个人而言，一般情况下直接使用饿汉式就好了，如果明确要求要懒加载（lazy initialization）会倾向于使用静态内部类，如果涉及到反序列化创建对象时会试着使用枚举的方式来实现单例。</p><p>判断一个设计是否应该为单例模式：</p><ul><li><p>Quote from 《 Use your singletons wisely 》每一个应用（组件/模块）是否以完全一致的方式来使用这个类？</p></li><li><p>Will every application use this class exactly the same way? (keyword: exactly)每一个应用（组件/模块）是否真的只需要这个类的一个实例呢？</p></li><li><p>Will every application ever need only one instance of this class? (keyword: ever &amp; one)<br>Should the clients of this class be unaware of the application they are part of? 对于这个类的客户端类来说，对他们自己是应用中的一部分这件事是否应该保持毫无察觉的状态呢？</p></li></ul><h1 id="Read-More"><a href="#Read-More" class="headerlink" title="Read More"></a>Read More</h1><p><a href="http://wuchong.me/blog/2014/08/28/how-to-correctly-write-singleton-pattern/#comments">如何正确地写出单例模式</a></p><p><a href="http://javarevisited.blogspot.sg/2014/05/double-checked-locking-on-singleton-in-java.html">Double Checked Locking on Singleton Class in Java</a></p><p><a href="http://javarevisited.blogspot.sg/2012/07/why-enum-singleton-are-better-in-java.html">Why Enum Singleton are better in Java</a></p><p><a href="http://javarevisited.blogspot.com/2012/12/how-to-create-thread-safe-singleton-in-java-example.html">How to create thread safe Singleton in Java</a></p><p><a href="http://javarevisited.blogspot.com/2011/03/10-interview-questions-on-singleton.html">10 Singleton Pattern Interview questions in Java</a></p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Program type already present: com.alibaba.android.arouter.routes.ARouter</title>
      <link href="/blog/2018/11/07/Program-type-already-present-com-alibaba-android-arouter-routes-ARouter/"/>
      <url>/blog/2018/11/07/Program-type-already-present-com-alibaba-android-arouter-routes-ARouter/</url>
      
        <content type="html"><![CDATA[<p>今天在写东西的时候报了一个错误，这个是使用 alibaba 的路由框架 <a href="https://github.com/alibaba/ARouter">ARouter</a>，进行模块间通信报才错。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Program type already present: com.alibaba.android.arouter.routes.ARouter</span><br></pre></td></tr></table></figure><p>意思是 Arouter 配置的路径的组路径已经存在了，举一个栗子：</p><p>我们在中配置模块 A 中 A1 类，可以配置路径为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public final static String REGIST_A_A1 &#x3D; &quot;&#x2F;A&#x2F;A1&quot;;</span><br></pre></td></tr></table></figure><p>这时候如果我们要配置模块 B 中的类，就不能使用 A 来作为组的路径了，要不然就会报错。在不同的模块中，配置的组路径不能一样，而在同一个模块中，自己的路径不能相同，就是上面 A1 位置不能相同。 </p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sqlite数据库使用笔记</title>
      <link href="/blog/2018/10/26/sqlite%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
      <url>/blog/2018/10/26/sqlite%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="sqlite的特点"><a href="#sqlite的特点" class="headerlink" title="sqlite的特点"></a>sqlite的特点</h1><p><a href="https://www.sqlite.org/index.html">sqlite</a>只支持库级锁，同时只能允许一个写操作。但SQLite尽量延迟申请X锁，直到数据块真正写盘时才申请X锁，非常巧妙而有效。</p><blockquote><p>注: 读锁(S锁）、写锁(X锁）</p></blockquote><p><a href="https://www.sqlite.org/faq.html#q6">Is SQLite threadsafe?</a>  SQLite官网上的最权威的解答,答案是sqlite是线程安全的。</p><h1 id="sqlite的线程模式"><a href="#sqlite的线程模式" class="headerlink" title="sqlite的线程模式"></a>sqlite的线程模式</h1><p>SQLite支持<a href="https://www.sqlite.org/threadsafe.html">3种线程模式</a></p><ol><li><p>单线程：禁用所有的mutex锁，并发使用时会出错。当SQLite编译时加了SQLITE_THREADSAFE=0参数，或者在初始化SQLite前调用sqlite3_config(SQLITE_CONFIG_SINGLETHREAD)时启用。</p></li><li><p>多线程：只要一个数据库连接不被多个线程同时使用就是安全的。源码中是启用bCoreMutex，禁用bFullMutex。实际上就是禁用数据库连接和prepared statement（准备好的语句）上的锁，因此不能在多个线程中并发使用同一个数据库连接或prepared statement。当SQLite编译时加了SQLITE_THREADSAFE=2参数时默认启用。若SQLITE_THREADSAFE不为0，可以在初始化SQLite前，调用sqlite3_config(SQLITE_CONFIG_MULTITHREAD)启用；或者在创建数据库连接时，设置SQLITE_OPEN_NOMUTEX flag。</p></li><li><p>串行：启用所有的锁，包括bCoreMutex和bFullMutex。因为数据库连接和prepared statement都已加锁，所以多线程使用这些对象时没法并发，也就变成串行了。当SQLite编译时加了SQLITE_THREADSAFE=1参数时默认启用。若SQLITE_THREADSAFE不为0，可以在初始化SQLite前，调用sqlite3_config(SQLITE_CONFIG_SERIALIZED)启用；或者在创建数据库连接时，设置SQLITE_OPEN_FULLMUTEX flag。</p></li></ol><h1 id="sqlite的事务"><a href="#sqlite的事务" class="headerlink" title="sqlite的事务"></a>sqlite的事务</h1><p><a href="https://www.sqlite.org/lang_transaction.html">事务</a>是和数据库连接相关的，每个数据库连接（使用pager来）维护自己的事务，且同时只能有一个事务（但是可以用SAVEPOINT来实现内嵌事务）。数据库只有在<a href="https://www.sqlite.org/lang_transaction.html">事务</a>中才能被更改。所有更改数据库的命令（除SELECT以外的所有SQL命令）都会自动开启一个新事务，并且当最后一个查询完成时自动提交。</p><p>下面用Android/Java来演示一下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Database.beginTransaction();  &#x2F;&#x2F;手动设置开始事务</span><br><span class="line">dosomething();</span><br><span class="line">userDatabase.setTransactionSuccessful();        &#x2F;&#x2F;设置事务处理成功，不设置会自动回滚不提交</span><br><span class="line">userDatabase.endTransaction();        &#x2F;&#x2F;处理完成</span><br></pre></td></tr></table></figure><p>事务在改写数据库文件时，会先生成一个rollback journal（回滚日志），记录初始状态（其实就是备份），所有改动都是在数据库文件上进行的。当事务需要回滚时，可以将备份文件的内容还原到数据库文件；提交成功时，默认的delete模式下会直接删除这个日志。这个日志也可以帮助解决事务执行过程中断电，导致数据库文件损坏的问题。但如果操作系统或文件系统有bug，或是磁盘损坏，则仍有可能无法恢复。</p><h1 id="sqlite的锁机制"><a href="#sqlite的锁机制" class="headerlink" title="sqlite的锁机制"></a>sqlite的锁机制</h1><p>SQLite基于锁来实现并发控制。SQLite的锁是粗粒度的，并不拥有PostgreSQL那样细粒度的行锁，这也使得SQLite较为轻量级。当一个连接要写数据库时，所有其它的连接都被锁住，直到写连接结束它的事务。</p><p>sqlite的数据库连接有5种锁状态:</p><table><thead><tr><th align="center">状态</th><th align="center">对应的锁</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">未加锁（unlock）</td><td align="center">—</td><td align="center">未和数据库建立连接、已建立连接但是还没访问数据库、已用BEGIN开始了一个事务但未开始读写数据库，处于这些情形时是未加锁状态。</td></tr><tr><td align="center">共享（shared）</td><td align="center">共享锁</td><td align="center">连接需要从数据库中读取数据时，需要申请获得一个共享锁，如果获得成功，则进入共享状态。</td></tr><tr><td align="center">预留（reserved）</td><td align="center">预留锁</td><td align="center">连接需要写数据库时，首先申请一个预留锁，一个数据库同时只能有一个预留锁，预留锁可以与共享锁共存。获得预留锁后进入预留状态，这时会先在缓冲区中进行需要的修改、更新操作，操作后的结果依然保存在缓冲区中，未真正写入数据库。</td></tr><tr><td align="center">未决（pending）</td><td align="center">未决锁</td><td align="center">连接从预留升为排它前，需要先升为未决，这时其它连接就不能获得共享锁了，但已经拥有共享锁的连接仍然可以继续正常读数据库，此时，拥有未决锁的连接等待其它拥有共享锁的连接完成工作并释放其共享锁后，提成到排它锁。</td></tr><tr><td align="center">排它（exclusive）</td><td align="center">排它锁</td><td align="center">连接需要提交修改时，需要将预留锁升为排它锁，这时其它连接都无法获得任何锁，直到当前连接的排它状态结束。</td></tr></tbody></table><ul><li>UNLOCKED：表示数据库此时并未被读写。</li><li>SHARED：表示数据库可以被读取。SHARED锁可以同时被多个线程拥有。一旦某个线程持有SHARED锁，就没有任何线程可以进行写操作。</li><li>RESERVED：表示准备写入数据库。RESERVED锁最多只能被一个线程拥有，此后它可以进入PENDING状态。</li><li>PENDING：表示即将写入数据库，正在等待其他读线程释放SHARED锁。一旦某个线程持有PENDING锁，其他线程就不能获取SHARED锁。这样一来，只要等所有读线程完成，释放SHARED锁后，它就可以进入EXCLUSIVE状态了。</li><li>EXCLUSIVE：表示它可以写入数据库了。进入这个状态后，其他任何线程都不能访问数据库文件。因此为了并发性，它的持有时间越短越好。</li></ul><p>一个线程只有在拥有低级别的锁的时候，才能获取更高一级的锁。SQLite就是靠这5种类型的锁，巧妙地实现了读写线程的互斥。同时也可看出，写操作必须进入EXCLUSIVE状态，此时并发数被降到1，这也是SQLite被认为并发插入性能不好的原因。<br>另外，read-uncommitted和WAL模式会影响这个锁的机制。在这2种模式下，读线程不会被写线程阻塞，即使写线程持有PENDING或EXCLUSIVE锁。</p><h1 id="sqlite的死锁"><a href="#sqlite的死锁" class="headerlink" title="sqlite的死锁"></a>sqlite的死锁</h1><p>在使用事务的情况下，SQLite的锁机制存在死锁的可能性。</p><p>举例说明死锁:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">连接1：BEGIN （UNLOCKED）</span><br><span class="line">连接1：SELECT ... （SHARED）</span><br><span class="line">连接1：INSERT ... （RESERVED）</span><br><span class="line">连接2：BEGIN （UNLOCKED）</span><br><span class="line">连接2：SELECT ... （SHARED）</span><br><span class="line">连接1：COMMIT （PENDING，尝试获取EXCLUSIVE锁，但还有SHARED锁未释放，返回SQLITE_BUSY）</span><br><span class="line">连接2：INSERT ... （尝试获取RESERVED锁，但已有PENDING锁未释放，返回SQLITE_BUSY）</span><br></pre></td></tr></table></figure><p>现在2个连接都在等待对方释放锁，于是就死锁了。当然，实际情况并没那么糟糕，任何一方选择不继续等待，回滚事务就行了。</p><p>不过要更好地解决这个问题，就必须更深入地了解事务了。<br>实际上BEGIN语句可以有3种起始状态：</p><ul><li>DEFERRED：默认值，开始事务时不获取任何锁。进行第一次读操作时获取。</li><li>SHARED锁，进行第一次写操作时获取RESERVED锁。</li><li>IMMEDIATE：开始事务时获取RESERVED锁。<br>EXCLUSIVE：开始事务时获取EXCLUSIVE锁。</li></ul><p>现在考虑2个事务在开始时都使用IMMEDIATE方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">连接1：BEGIN IMMEDIATE （RESERVED）</span><br><span class="line">连接1：SELECT ... （RESERVED）</span><br><span class="line">连接1：INSERT ... （RESERVED）</span><br><span class="line">连接2：BEGIN IMMEDIATE （尝试获取RESERVED锁，但已有RESERVED锁未释放，因此事务开始失败，返回SQLITE_BUSY，等待用户重试）</span><br><span class="line">连接1：COMMIT （EXCLUSIVE，写入完成后释放）</span><br><span class="line">连接2：BEGIN IMMEDIATE （RESERVED）</span><br><span class="line">连接2：SELECT ... （RESERVED）</span><br><span class="line">连接2：INSERT ... （RESERVED）</span><br><span class="line">连接2：COMMIT （EXCLUSIVE，写入完成后释放）</span><br></pre></td></tr></table></figure><p>这样死锁就被避免了。</p><p>而EXCLUSIVE方式则更为严苛，即使其他连接以DEFERRED方式开启事务也不会死锁：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">连接1：BEGIN EXCLUSIVE （EXCLUSIVE）</span><br><span class="line">连接1：SELECT ... （EXCLUSIVE）</span><br><span class="line">连接1：INSERT ... （EXCLUSIVE）</span><br><span class="line">连接2：BEGIN （UNLOCKED）</span><br><span class="line">连接2：SELECT ... （尝试获取SHARED锁，但已有EXCLUSIVE锁未释放，返回SQLITE_BUSY，等待用户重试）</span><br><span class="line">连接1：COMMIT （EXCLUSIVE，写入完成后释放）</span><br><span class="line">连接2：SELECT ... （SHARED）</span><br><span class="line">连接2：INSERT ... （RESERVED）</span><br><span class="line">连接2：COMMIT （EXCLUSIVE，写入完成后释放）</span><br></pre></td></tr></table></figure><p>不过在并非很高的情况下，直接获取EXCLUSIVE锁的难度比较大；而且为了避免EXCLUSIVE状态长期阻塞其他请求，最好的方式还是让所有写事务都以IMMEDIATE方式开始。<br>顺带一提，要实现重试的话，可以使用sqlite3_busy_timeout()或sqlite3_busy_handler()函数。</p><p>由此可见，要想保证线程安全的话，可以有这4种方式：</p><ol><li>SQLite使用单线程模式，用一个专门的线程访问数据库。</li><li>SQLite使用单线程模式，用一个线程队列来访问数据库，队列一次只允许一个线程执行，队列里的线程共用一个数据库连接。</li><li>SQLite使用多线程模式，每个线程创建自己的数据库连接。</li><li>SQLite使用串行模式，所有线程共用全局的数据库连接。</li></ol><p>第一种方式太过麻烦，需要线程间通信。<br>第二种方式可以用dispatch_queue_create()来创建一个serial queue，或者用一个maxConcurrentOperationCount为1的NSOperationQueue来实现。<br>这种方式的缺点就是事务必须在一个block或operation里完成，否则会乱序；而耗时较长的事务会阻塞队列。另外，没法利用多核CPU的优势。</p><h1 id="sqlite的WAL模式"><a href="#sqlite的WAL模式" class="headerlink" title="sqlite的WAL模式"></a>sqlite的WAL模式</h1><p>WAL的全称Write Ahead Log,修改并不直接写入到数据库文件中，而是写入到另外一个称为WAL的文件中；如果事务失败，WAL中的记录会被忽略，撤销修改；如果事务成功，它将在随后的某个时间被写回到数据库文件中，提交修改。</p><p>WAL使用检查点将修改写回数据库，默认情况下，当WAL文件发现有1000页修改时，将自动调用检查点。这个页数大小可以自行配置。</p><p>使用WAL的优势:</p><ul><li>读写操作不再互相阻塞，一定程度上解决了SQLite在处理高并发上的性能瓶颈</li><li>大多数场景中，带来很大的性能提升</li><li>磁盘I/O行为更容易被预测</li></ul><p>缺点:<br>除非数据达到GB级时，性能才会降低。</p><p>android中如何开启WAL模式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SQLiteDatabase db &#x3D; SQLiteDatabase.openDatabase(&quot;db_filename&quot;, </span><br><span class="line">cursorFactory,CREATE_IF_NECESSARY, myDatabaseErrorHandler);</span><br><span class="line">db.enableWriteAheadLogging();</span><br></pre></td></tr></table></figure><p>来看看SQLiteDatabase开启WAL的核心方法源码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">public boolean enableWriteAheadLogging() &#123;</span><br><span class="line">        &#x2F;&#x2F; make sure the database is not READONLY. WAL doesn&#39;t make sense for readonly-databases.</span><br><span class="line">        if (isReadOnly()) &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F; acquire lock - no that no other thread is enabling WAL at the same time</span><br><span class="line">        lock();</span><br><span class="line">        try &#123;</span><br><span class="line">            if (mConnectionPool !&#x3D; null) &#123;</span><br><span class="line">                &#x2F;&#x2F; already enabled</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">            if (mPath.equalsIgnoreCase(MEMORY_DB_PATH)) &#123;</span><br><span class="line">                Log.i(TAG, &quot;can&#39;t enable WAL for memory databases.&quot;);</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">            &#x2F;&#x2F; make sure this database has NO attached databases because sqlite&#39;s write-ahead-logging</span><br><span class="line">            &#x2F;&#x2F; doesn&#39;t work for databases with attached databases</span><br><span class="line">            if (mHasAttachedDbs) &#123;</span><br><span class="line">                if (Log.isLoggable(TAG, Log.DEBUG)) &#123;</span><br><span class="line">                    Log.d(TAG,</span><br><span class="line">                            &quot;this database: &quot; + mPath + &quot; has attached databases. can&#39;t  enable WAL.&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">            mConnectionPool &#x3D; new DatabaseConnectionPool(this);  &#x2F;&#x2F; 创建数据库连接池，由于要支持并发访问所以需要连接池的支持</span><br><span class="line">            setJournalMode(mPath, &quot;WAL&quot;); &#x2F;&#x2F; 调用setJournalMode设置模式为WAL</span><br><span class="line">            return true;</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>开启了WAL模式之后，事务的开始需要注意，在源码的注释是这样写到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Writers should use &#123;@link #beginTransactionNonExclusive()&#125; or</span><br><span class="line">     * &#123;@link #beginTransactionWithListenerNonExclusive(SQLiteTransactionListener)&#125;</span><br></pre></td></tr></table></figure><p>调用者需要使用beginTransactionNonExclusive或者beginTransactionWithListenerNonExclusive来开始事务，也就是执行：BEGIN IMMEDIATE; 支持多并发。</p><p>开启了WAL模式磁盘中是这样的文件格式:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xxx.db</span><br><span class="line">xxx.db-shm</span><br><span class="line">xxx.db-wal</span><br></pre></td></tr></table></figure><blockquote><p>-shm文件包含-wal文件的数据索引，-shm文件提升-wal文件的读性能<br>如果-shm文件被删除，下次数据库连接时会自动新建一个-shm文件<br>如果执行了checkpoint命令，-war文件可以删除。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动手实现一个微信小程序</title>
      <link href="/blog/2018/10/18/%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
      <url>/blog/2018/10/18/%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h1><ul><li>微信小程序开发者工具 v1.02.1809260</li><li>调试基础库 2.0.4</li></ul><h1 id="实现功能"><a href="#实现功能" class="headerlink" title="实现功能"></a>实现功能</h1><ul><li>上传一张图片检测图片中的人脸展示人脸属性信息，如年龄、性别、表情、美丑打分等。</li></ul><h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><ul><li>接口用到的百度AI开放平台的人脸检测与属性分析<br><a href="https://ai.baidu.com/docs#/Face-Detect-V3/top">接口文档</a></li></ul><h1 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h1><ol><li>本地选取一张图片</li><li>获取图片base64编码</li><li>获取百度开发api请求token</li><li>请求人脸检测接口 </li></ol><h1 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h1><p><img src="https://github.com/xmaihh/weixinxiaochengxu/raw/master/arts/baiduai_face.png" alt="效果图"></p><h1 id="python实现"><a href="#python实现" class="headerlink" title="python实现"></a>python实现</h1><p>先用python把接口调试一下，测试调通</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># encoding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_token</span>(<span class="params">host</span>):</span></span><br><span class="line">    header_dict = &#123;<span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko&#x27;</span>,</span><br><span class="line">                   <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span>&#125;</span><br><span class="line">    req = request.Request(url=host, headers=header_dict)</span><br><span class="line">    res = request.urlopen(req)</span><br><span class="line">    res = res.read()</span><br><span class="line">    res_json = json.loads(res.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    print(res_json)</span><br><span class="line">    <span class="keyword">return</span> res_json[<span class="string">&quot;access_token&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">进行post请求</span></span><br><span class="line"><span class="string">url:请求地址</span></span><br><span class="line"><span class="string">values:请求体</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_info_post_json_data</span>(<span class="params">url, value</span>):</span></span><br><span class="line">    header_dict = &#123;<span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko&#x27;</span>,</span><br><span class="line">                   <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span>&#125;</span><br><span class="line">    req = request.Request(url=url, data=value, headers=header_dict)</span><br><span class="line">    res = request.urlopen(req)</span><br><span class="line">    res = res.read()</span><br><span class="line">    <span class="keyword">return</span> (res.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">调用百度API,进行人脸探测</span></span><br><span class="line"><span class="string">imgPath: 图片地址</span></span><br><span class="line"><span class="string">access_token: 开发者token</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getBaiduFaceTech</span>(<span class="params">imgPath, access_token</span>):</span></span><br><span class="line">    request_url = <span class="string">&quot;https://aip.baidubce.com/rest/2.0/face/v3/detect&quot;</span></span><br><span class="line">    <span class="comment"># 二进制方式打开图片文件</span></span><br><span class="line">    f = <span class="built_in">open</span>(imgPath, <span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">    <span class="comment"># 图片转换成base64</span></span><br><span class="line">    img = base64.b64encode(f.read())</span><br><span class="line">    params = &#123;<span class="string">&quot;image&quot;</span>: img, <span class="string">&quot;image_type&quot;</span>: <span class="string">&quot;BASE64&quot;</span>, <span class="string">&quot;face_field&quot;</span>: <span class="string">&quot;age,beauty,expression,face_shape,gender,glasses,landmark,race,quality,face_type&quot;</span>&#125;</span><br><span class="line">    params = urllib.parse.urlencode(params).encode(encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    request_url = request_url + <span class="string">&quot;?access_token=&quot;</span> + access_token</span><br><span class="line">    <span class="comment"># 调用post其请求方法</span></span><br><span class="line">    face_info = get_info_post_json_data(request_url, params)</span><br><span class="line">    <span class="comment"># json字符串转为对象</span></span><br><span class="line">    face_json = json.loads(face_info)</span><br><span class="line">    <span class="keyword">if</span> face_json[<span class="string">&quot;error_code&quot;</span>] != <span class="number">0</span>:</span><br><span class="line">    <span class="comment"># 如果没有发现人像,会返回为空</span></span><br><span class="line">    <span class="keyword">elif</span> face_json[<span class="string">&quot;result&quot;</span>][<span class="string">&#x27;face_num&#x27;</span>] != <span class="number">0</span>:</span><br><span class="line">        <span class="comment"># 把想要的部分提取存入字典中</span></span><br><span class="line">        result = face_json[<span class="string">&#x27;result&#x27;</span>][<span class="string">&#x27;face_list&#x27;</span>][<span class="number">0</span>]</span><br><span class="line">        print(<span class="string">&quot;分值:&quot;</span> + <span class="built_in">str</span>(result[<span class="string">&#x27;beauty&#x27;</span>]))</span><br><span class="line">        print(<span class="string">&quot;年龄:&quot;</span> + <span class="built_in">str</span>(result[<span class="string">&#x27;age&#x27;</span>]))</span><br><span class="line">        print(<span class="string">&quot;性别:&quot;</span> + result[<span class="string">&#x27;gender&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] + <span class="string">&quot;\n可能性:&quot;</span> + <span class="built_in">str</span>(result[<span class="string">&#x27;gender&#x27;</span>][<span class="string">&#x27;probability&#x27;</span>]))</span><br><span class="line">        gender = result[<span class="string">&#x27;gender&#x27;</span>][<span class="string">&#x27;type&#x27;</span>]</span><br><span class="line">        age = <span class="built_in">str</span>(result[<span class="string">&#x27;age&#x27;</span>])</span><br><span class="line">        beauty = <span class="built_in">str</span>(result[<span class="string">&#x27;beauty&#x27;</span>])</span><br><span class="line">        probability = <span class="built_in">str</span>(result[<span class="string">&#x27;gender&#x27;</span>][<span class="string">&#x27;probability&#x27;</span>])</span><br><span class="line">        face_dict = &#123;<span class="string">&quot;gender&quot;</span>: gender, <span class="string">&quot;age&quot;</span>: age, <span class="string">&quot;probability&quot;</span>: probability, <span class="string">&quot;beauty&quot;</span>: beauty&#125;</span><br><span class="line">        <span class="keyword">return</span> face_dict</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">if __name__ == &#x27;__main__&#x27;:</span></span><br><span class="line"><span class="string">    # client_id 为官网获取的AK， client_secret 为官网获取的SK</span></span><br><span class="line"><span class="string">    host = &#x27;https://aip.baidubce.com/oauth/2.0/token?grant_type=client_credentials&amp;client_id=【百度云应用的AK】&amp;client_secret=【百度云应用的SK】&#x27;</span></span><br><span class="line"><span class="string">    token = get_token(host)</span></span><br><span class="line"><span class="string">    # 调用百度人脸识别API</span></span><br><span class="line"><span class="string">    face_dict = getBaiduFaceTech(&quot;face.jpg&quot;, token)</span></span><br></pre></td></tr></table></figure><h2 id="步骤1-本地选取一张图片"><a href="#步骤1-本地选取一张图片" class="headerlink" title="步骤1:本地选取一张图片"></a>步骤1:本地选取一张图片</h2><p>直接调用小程序wx.chooseImage(Object object)从本地相册选择图片或使用相机拍照<br><a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.chooseImage.html">https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.chooseImage.html</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">wx.chooseImage(&#123;</span><br><span class="line">      count: <span class="number">1</span>, <span class="comment">// 默认9</span></span><br><span class="line">      sizeType: [<span class="string">&#x27;compressed&#x27;</span>], <span class="comment">// 可以指定是原图还是压缩图，默认二者都有</span></span><br><span class="line">      sourceType: [<span class="string">&#x27;album&#x27;</span>, <span class="string">&#x27;camera&#x27;</span>], <span class="comment">// 可以指定来源是相册还是相机，默认二者都有</span></span><br><span class="line">      success: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 返回选中照片的本地文件路径列表,tempFilePath可以作为img标签的src属性显示图片</span></span><br><span class="line">        <span class="keyword">var</span> tempFilePaths = res.tempFilePaths;</span><br><span class="line">        _this.setData(&#123;</span><br><span class="line">          img: tempFilePaths[<span class="number">0</span>],</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;)</span><br></pre></td></tr></table></figure><h2 id="步骤2"><a href="#步骤2" class="headerlink" title="步骤2:"></a>步骤2:</h2><p>早期在微信小程序中将图片base64化需要借助微信原生的 wx.canvasGetImageData 得到图片的像素信息，再通过开源库<a href="https://github.com/photopea/UPNG.js">UPNG</a>将像素信息编码，最后通过wx.arrayBufferToBase64转化为base64数据,看起来就挺麻烦的,我使用的调试基础库2.0.4,小程序有新接口获取图片base64编码，wx.getFileSystemManager() 注意版本库要在1.9.9以后的版本才支持<br><a href="https://developers.weixin.qq.com/miniprogram/dev/api/file/wx.getFileSystemManager.html">https://developers.weixin.qq.com/miniprogram/dev/api/file/wx.getFileSystemManager.html</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">wx.getFileSystemManager().readFile(&#123;</span><br><span class="line">           filePath: _this.data.img, <span class="comment">// 选择图片返回的相对路径</span></span><br><span class="line">           encoding: <span class="string">&#x27;base64&#x27;</span>, <span class="comment">//编码格式</span></span><br><span class="line">           success: <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">             <span class="comment">// console.log(&#x27;data:image/png;base64,&#x27; + res.data)</span></span><br><span class="line">             _this.setData(&#123;</span><br><span class="line">               base64: res.data,</span><br><span class="line">             &#125;)</span><br><span class="line">             <span class="comment">//   &#125;</span></span><br><span class="line">             <span class="comment">// &#125;)</span></span><br></pre></td></tr></table></figure><h2 id="步骤3"><a href="#步骤3" class="headerlink" title="步骤3:"></a>步骤3:</h2><p>百度的api要求向API服务地址使用POST发送请求，必须在URL中带上参数access_token，没得办法要用人家的服务就得按规矩来,直接使用wx.request()发起一个网络请求<br><a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/request/wx.request.html">https://developers.weixin.qq.com/miniprogram/dev/api/network/request/wx.request.html</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">wx.request(&#123;</span><br><span class="line">     url: &#39;https:&#x2F;&#x2F;aip.baidubce.com&#x2F;oauth&#x2F;2.0&#x2F;token?grant_type&#x3D;client_credentials&amp;client_id&#x3D;【百度云应用的AK】&amp;client_secret&#x3D;【百度云应用的SK】&#39;,</span><br><span class="line">     header: &#123;</span><br><span class="line">       &#39;content-type&#39;: &#39;application&#x2F;json&#39;</span><br><span class="line">     &#125;,</span><br><span class="line">     method: &quot;POST&quot;,</span><br><span class="line">     success(res) &#123;</span><br><span class="line">       _this.setData(&#123;</span><br><span class="line">         access_token: res.data.access_token,</span><br><span class="line">       &#125;)</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure><h2 id="步骤4"><a href="#步骤4" class="headerlink" title="步骤4:"></a>步骤4:</h2><p>带上access_token和图片base64编码请求人脸检测接口,还是一个wx.request()发起一个网络请求<br><a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/request/wx.request.html">https://developers.weixin.qq.com/miniprogram/dev/api/network/request/wx.request.html</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">wx.request(&#123;</span><br><span class="line">               url: <span class="string">&#x27;https://aip.baidubce.com/rest/2.0/face/v3/detect&#x27;</span> + <span class="string">&#x27;?access_token=&#x27;</span> + _this.data.access_token,</span><br><span class="line">               data: &#123;</span><br><span class="line">                 <span class="comment">// image: _this.data.img,</span></span><br><span class="line">                 image: _this.data.base64,</span><br><span class="line">                 image_type: <span class="string">&#x27;BASE64&#x27;</span>,</span><br><span class="line">                 <span class="comment">// image_type:&#x27;URL&#x27;,</span></span><br><span class="line">                 face_field: <span class="string">&#x27;age,beauty,expression,face_shape,gender,glasses,landmark,race,quality,face_type&#x27;</span>,</span><br><span class="line">               &#125;,</span><br><span class="line">               header: &#123;</span><br><span class="line">                 <span class="string">&#x27;content-type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">               &#125;,</span><br><span class="line">               method: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">               <span class="function"><span class="title">success</span>(<span class="params">res</span>)</span> &#123;</span><br><span class="line">                 wx.hideLoading();</span><br><span class="line">                 <span class="comment">// console.log(res.data);</span></span><br><span class="line">                 <span class="keyword">var</span> data = res.data;</span><br><span class="line">               &#125;</span><br><span class="line">       &#125;)</span><br></pre></td></tr></table></figure><p>完整参考代码 <a href="https://github.com/xmaihh/weixinxiaochengxu">weixinxiaochengxu</a></p><blockquote><blockquote><p>参考链接</p></blockquote></blockquote><p>[微信小程序图片压缩及base64化上传]<a href="https://zhuanlan.zhihu.com/p/37440710">https://zhuanlan.zhihu.com/p/37440710</a></p><p>[小程序选择相册后转为base64编码的方法]<a href="https://www.jianshu.com/p/5d99db6b6901">https://www.jianshu.com/p/5d99db6b6901</a></p><p>[小程序图片转Base64，方法总结]<a href="https://blog.csdn.net/qq_36875339/article/details/81086205">https://blog.csdn.net/qq_36875339/article/details/81086205</a></p>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>pip Import Error:cannot import name main解决方案</title>
      <link href="/blog/2018/10/13/Pip-Import-Error-cannot-import-name-main%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>/blog/2018/10/13/Pip-Import-Error-cannot-import-name-main%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<p>在使用pip来进行安装操作时碰到这样的问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">xmaihh@ubuntu:~$ pip install jrnl</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&#x2F;usr&#x2F;bin&#x2F;pip&quot;, line 9, in &lt;module&gt;</span><br><span class="line">    from pip import main</span><br><span class="line">ImportError: cannot import name main</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>是因为将pip更新为10.0.0后库里面的函数有所变动造成这个问题<br>解决方案：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi &#x2F;usr&#x2F;bin&#x2F;pip</span><br></pre></td></tr></table></figure><p>将原来的:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from pip import main</span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    sys.exit(main())</span><br></pre></td></tr></table></figure><p>改成:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from pip import __main__</span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    sys.exit(__main__._main())</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ArchLinux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android事件分发机制</title>
      <link href="/blog/2018/10/12/Android%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%E6%9C%BA%E5%88%B6/"/>
      <url>/blog/2018/10/12/Android%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h1><ol><li>-&gt; dispatchTouchEvent()<br>-&gt; onInterceptTouchEvent()<br>-&gt; onTouchEvent()</li><li>requestDisallowInterceptTouchEvent(boolean)</li><li>onTouchEvent() –&gt; onTouchListener –&gt; onClickListener的先后顺序<h1 id="什么是事件分发"><a href="#什么是事件分发" class="headerlink" title="什么是事件分发"></a>什么是事件分发</h1>Android中的视图是由一个个View嵌套构成的层级视图，即一个View里包含有子View，而这个子View里面又可以再添加View。当用户触摸屏幕产生一系列事件时，事件会由高到低，由外向内依次传递，最终把事件交到一个具体的View手上处理，这个传递的过程就叫做事件分发。</li></ol><blockquote><p>Android将触摸事件统一封装成MontionEvent类，以Down事件开始，Up事件结束。</p></blockquote><h1 id="事件传递流程"><a href="#事件传递流程" class="headerlink" title="事件传递流程"></a>事件传递流程</h1><p>Android中事件传递是由最终的view的接收到,传递过程是从父布局到子布局,也就是从Activity到ViewGroup到View的过程。</p><p>View里,有两个回调函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">public boolean dispatchTouchEvent(MotionEvent ev);  </span><br><span class="line">public boolean onTouchEvent(MotionEvent ev);</span><br></pre></td></tr></table></figure><p>ViewGroup里,有三个回调函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public boolean dispatchTouchEvent(MotionEvent ev); </span><br><span class="line">public boolean onInterceptTouchEvent(MotionEvent ev);  </span><br><span class="line">public boolean onTouchEvent(MotionEvent ev);</span><br></pre></td></tr></table></figure><p>Activity里，有两个回调函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">public boolean dispatchTouchEvent(MotionEvent ev);  </span><br><span class="line">public boolean onTouchEvent(MotionEvent ev);  </span><br></pre></td></tr></table></figure><blockquote><p><code>dispatchTouchEvent</code>是处理触摸事件分发,事件(多数情况)是从Activity的<code>dispatchTouchEvent</code>开始的。执行<code>super.dispatchTouchEvent(ev)</code>,事件向下分发。<code>onInterceptTouchEvent</code>是ViewGroup提供的方法,默认返回false,返回true表示拦截。<code>onTouchEvent</code>是View中提供的方法,ViewGroup也有这个方法,view中不提供onInterceptTouchEvent。view中默认返回true,表示消费了这个事件.</p></blockquote><p><img src="https://github.com/xmaihh/xmaihh.github.io/raw/master/asset/Android-dispatch-touch-event.jpg" alt="Android事件分发"></p><p>(1) 事件从 Activity.dispatchTouchEvent()开始传递，只要没有被停止或拦截，从最上层的 View(ViewGroup)开始一直往下(子 View)传递。子 View 可以通过 onTouchEvent()对事件进行处理。</p><p>(2) 事件由父 View(ViewGroup)传递给子 View，ViewGroup 可以通过 onInterceptTouchEvent()对事件做拦截，停止其往下传递。</p><p>(3) 如果事件从上往下传递过程中一直没有被停止，且最底层子 View 没有消费事件，事件会反向往上传递，这时父 View(ViewGroup)可以进行消费，如果还是没有被消费的话，最后会到 Activity 的 onTouchEvent()函数。</p><p>(4) 如果 View 没有对 ACTION_DOWN 进行消费，之后的其他事件不会传递过来。</p><p>(5) OnTouchListener 优先于 onTouchEvent()对事件进行消费。<br>上面的消费即表示相应函数返回值为 true。</p><h1 id="requestDisallowInterceptTouchEvent-boolean"><a href="#requestDisallowInterceptTouchEvent-boolean" class="headerlink" title="requestDisallowInterceptTouchEvent(boolean)"></a>requestDisallowInterceptTouchEvent(boolean)</h1><p>对于底层的View来说，有一种方法可以阻止父层的View截获touch事件,就是调用<code>getParent().requestDisallowInterceptTouchEvent(true);</code>方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">    public boolean onTouchEvent(MotionEvent event) &#123;</span><br><span class="line">        switch (event.getAction())&#123;</span><br><span class="line">            case MotionEvent.ACTION_DOWN:</span><br><span class="line">                getParent().requestDisallowInterceptTouchEvent(true);</span><br><span class="line">                Log.d(&quot;TAG&quot;, &quot;down&quot;);</span><br><span class="line">                break;</span><br><span class="line">            case MotionEvent.ACTION_UP:</span><br><span class="line">                Log.d(&quot;TAG&quot;, &quot;up&quot;);</span><br><span class="line">                break;</span><br><span class="line">            case MotionEvent.ACTION_MOVE:</span><br><span class="line">                Log.d(&quot;TAG&quot;, &quot;move&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>一旦底层View收到onTouchEvent的action后调用<code>getParent().requestDisallowInterceptTouchEvent(true)</code>那么父层View就不会再调用onInterceptTouchEvent了,典型应用就是在处理滑动冲突的时候使用。</p><h1 id="onTouchEvent-–-gt-onTouchListener-–-gt-onClickListener的先后顺序"><a href="#onTouchEvent-–-gt-onTouchListener-–-gt-onClickListener的先后顺序" class="headerlink" title="onTouchEvent() –&gt; onTouchListener –&gt; onClickListener的先后顺序"></a>onTouchEvent() –&gt; onTouchListener –&gt; onClickListener的先后顺序</h1><p>View的dispatchTouchEvent()方法，意味将准备开始处理事件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public boolean dispatchTouchEvent(MontionEvent event)&#123;</span><br><span class="line">    &#x2F;&#x2F;.....</span><br><span class="line">    ListenerInfo li &#x3D; mListenerInfo;</span><br><span class="line">    if (li !&#x3D; null &amp;&amp; li.mOnTouchListener !&#x3D; null</span><br><span class="line">            &amp;&amp; (mViewFlags &amp; ENABLED_MASK) &#x3D;&#x3D; ENABLED</span><br><span class="line">            &amp;&amp; li.mOnTouchListener.onTouch(this, event)) &#123;</span><br><span class="line">        result &#x3D; true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (!result &amp;&amp; onTouchEvent(event)) &#123;</span><br><span class="line">        result &#x3D; true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果我们给View设置了onTouchListener监听器，则优先会回调Listener的onTouch()方法。如果onTouch()方法返回了false,则还是会执行onTouchEvent()方法。通常我们给View设置的onClickListener，就是在onTouchEvent()方法中的Up事件处理的。所以onTouchListener优先级大于onClickListener</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">switch (action) &#123;</span><br><span class="line">    case MotionEvent.ACTION_UP:</span><br><span class="line">    </span><br><span class="line">    if (!post(mPerformClick)) &#123;</span><br><span class="line">    &#x2F;&#x2F;该方法里会回调onClick()</span><br><span class="line">    performClick();</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>View的CLICKABLE属性要为ture，View才能消费上事件。不然onTouchEvent()会执行结束返回false，没有机会消费事件。当我们给View设置监听器后，就会将CLICKABLE属性设为true。(Button默认为ture)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">public boolean onTouchEvent(MotionEvent event) &#123;</span><br><span class="line"></span><br><span class="line">    final boolean clickable &#x3D; ((viewFlags &amp; CLICKABLE) &#x3D;&#x3D; CLICKABLE</span><br><span class="line">            || (viewFlags &amp; LONG_CLICKABLE) &#x3D;&#x3D; LONG_CLICKABLE)</span><br><span class="line">            || (viewFlags &amp; CONTEXT_CLICKABLE) &#x3D;&#x3D; CONTEXT_CLICKABLE;</span><br><span class="line">    &#x2F;&#x2F;View,setEnable()后还是能处理事件。如果我们有给View设置监听器，该事件被消费。</span><br><span class="line">    if ((viewFlags &amp; ENABLED_MASK) &#x3D;&#x3D; DISABLED) &#123;</span><br><span class="line">        if (action &#x3D;&#x3D; MotionEvent.ACTION_UP &amp;&amp; (mPrivateFlags &amp; PFLAG_PRESSED) !&#x3D; 0) &#123;</span><br><span class="line">            setPressed(false);</span><br><span class="line">        &#125;</span><br><span class="line">        mPrivateFlags3 &amp;&#x3D; ~PFLAG3_FINGER_DOWN;</span><br><span class="line">        return clickable;</span><br><span class="line">    &#125;</span><br><span class="line">    if (clickable || (viewFlags &amp; TOOLTIP) &#x3D;&#x3D; TOOLTIP) &#123;</span><br><span class="line">    </span><br><span class="line">        switch (action) &#123;</span><br><span class="line">            case MotionEvent.ACTION_UP:</span><br><span class="line">            </span><br><span class="line">            case MotionEvent.ACTION_DOWN:</span><br><span class="line">            </span><br><span class="line">            case MotionEvent.ACTION_MOVE:</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以按照 onTouchEvent() –&gt; onTouchListener –&gt; onClickListener的先后顺序来执行的。</p>]]></content>
      
      
      <categories>
          
          <category> Android Framework </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通讯帧格式之CRC校验</title>
      <link href="/blog/2018/10/10/%E9%80%9A%E8%AE%AF%E5%B8%A7%E6%A0%BC%E5%BC%8F%E4%B9%8BCRC%E6%A0%A1%E9%AA%8C/"/>
      <url>/blog/2018/10/10/%E9%80%9A%E8%AE%AF%E5%B8%A7%E6%A0%BC%E5%BC%8F%E4%B9%8BCRC%E6%A0%A1%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<p>CRC即循环冗余校验码（Cyclic Redundancy Check <a href="https://baike.baidu.com/item/crc%E6%A0%A1%E9%AA%8C">1</a>  ）：是数据通信领域中最常用的一种查错校验码，其特征是信息字段和校验字段的长度可以任意选定。循环冗余检查（CRC）是一种数据传输检错功能，对数据进行多项式计算，并将得到的结果附在帧的后面，接收设备也执行类似的算法，以保证数据传输的正确性和完整性。<br>CRC校验的原理即通信双方规定一个二进制除数，传输帧必须能够被其整除，否则说明出错。</p><table><thead><tr><th></th><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>Had</td><td>Length</td><td>Address</td><td>Command</td><td>CRC1</td><td>Data</td><td>CRC2</td></tr><tr><td>0xaa 0x55</td><td>1 byte</td><td>address</td><td>CMD</td><td>1 byte</td><td>n bytes</td><td>1 byte</td></tr></tbody></table><ul><li>Head： 2个字节，默认0xaa, 0x55，代表帧头，是大端模块式。0x55, 0xaa，代表小端模式。不同模式的数据在系统内的排列方式。例如：数据为0x1234，在大端模式时数据排列方式为0x12，0x34，MSB字节在低地址。小端模式时数据排列方式为0x34，0x12，MSB字节在高地址。大端模式应答帧的帧头为0xa5, 0x5a，小端模式的应答帧头为：0x5a, 0xa5。</li><li>Length： 1个字节，是此通讯帧的长度。范围6-255，Length 为所有字节的长度，包括HEAD,Length,Command,CRC1,Data,CRC2。</li><li>Address：1个字节，此为各个从机模块的地址。</li><li>Command：1个字节，是主/从机通讯的命令，即主机要求从机进行操作的操作码。命令范围是0X01~0x7f。</li><li>CRC1： 1个字节，是head, length, command这4个字节的CRC校验码。因为数据的长度异常重要，一旦此数据出错误，程序处理不当，将会带来灾难性的后果。所以单独对长度和操作码做了一次CRC校验。如果是命令帧，该校验字段就会与后面的CRC2合并。</li><li>Data：N个字节，是通讯的数据包，根据协议版本及操作码的不同，数据内容有所不同。</li><li>CRC2： 1个字节，是所有字段的CRC校验码。</li></ul><p>CRC8的校验方式，具体如下表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">const uint8_t nCrc8Tab[] &#x3D;</span><br><span class="line">&#123;</span><br><span class="line">    0x00,0x5e,0xbc,0xe2,0x61,0x3f,0xdd,0x83,0xc2,0x9c,0x7e,0x20,0xa3,0xfd,0x1f,0x41,</span><br><span class="line">    0x9d,0xc3,0x21,0x7f,0xfc,0xa2,0x40,0x1e,0x5f,0x01,0xe3,0xbd,0x3e,0x60,0x82,0xdc,</span><br><span class="line">    0x23,0x7d,0x9f,0xc1,0x42,0x1c,0xfe,0xa0,0xe1,0xbf,0x5d,0x03,0x80,0xde,0x3c,0x62,</span><br><span class="line">    0xbe,0xe0,0x02,0x5c,0xdf,0x81,0x63,0x3d,0x7c,0x22,0xc0,0x9e,0x1d,0x43,0xa1,0xff,</span><br><span class="line">    0x46,0x18,0xfa,0xa4,0x27,0x79,0x9b,0xc5,0x84,0xda,0x38,0x66,0xe5,0xbb,0x59,0x07,</span><br><span class="line">    0xdb,0x85,0x67,0x39,0xba,0xe4,0x06,0x58,0x19,0x47,0xa5,0xfb,0x78,0x26,0xc4,0x9a,</span><br><span class="line">    0x65,0x3b,0xd9,0x87,0x04,0x5a,0xb8,0xe6,0xa7,0xf9,0x1b,0x45,0xc6,0x98,0x7a,0x24,</span><br><span class="line">    0xf8,0xa6,0x44,0x1a,0x99,0xc7,0x25,0x7b,0x3a,0x64,0x86,0xd8,0x5b,0x05,0xe7,0xb9,</span><br><span class="line">    0x8c,0xd2,0x30,0x6e,0xed,0xb3,0x51,0x0f,0x4e,0x10,0xf2,0xac,0x2f,0x71,0x93,0xcd,</span><br><span class="line">    0x11,0x4f,0xad,0xf3,0x70,0x2e,0xcc,0x92,0xd3,0x8d,0x6f,0x31,0xb2,0xec,0x0e,0x50,</span><br><span class="line">    0xaf,0xf1,0x13,0x4d,0xce,0x90,0x72,0x2c,0x6d,0x33,0xd1,0x8f,0x0c,0x52,0xb0,0xee,</span><br><span class="line">    0x32,0x6c,0x8e,0xd0,0x53,0x0d,0xef,0xb1,0xf0,0xae,0x4c,0x12,0x91,0xcf,0x2d,0x73,</span><br><span class="line">    0xca,0x94,0x76,0x28,0xab,0xf5,0x17,0x49,0x08,0x56,0xb4,0xea,0x69,0x37,0xd5,0x8b,</span><br><span class="line">    0x57,0x09,0xeb,0xb5,0x36,0x68,0x8a,0xd4,0x95,0xcb,0x29,0x77,0xf4,0xaa,0x48,0x16,</span><br><span class="line">    0xe9,0xb7,0x55,0x0b,0x88,0xd6,0x34,0x6a,0x2b,0x75,0x97,0xc9,0x4a,0x14,0xf6,0xa8,</span><br><span class="line">    0x74,0x2a,0xc8,0x96,0x15,0x4b,0xa9,0xf7,0xb6,0xe8,0x0a,0x54,0xd7,0x89,0x6b,0x35,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>  CRC8计算函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">uint8_t  CalCrc8(uint8_t *pBuf,uint8_t nBufLen)</span><br><span class="line">&#123;</span><br><span class="line">    uint8_t  nCrcVal &#x3D; 0x00;</span><br><span class="line">    uint8_t  i;</span><br><span class="line">    uint8_t  nTabIdx;</span><br><span class="line">    </span><br><span class="line">    if (pBuf &amp;&amp; (nBufLen &gt; 0))</span><br><span class="line">    &#123;</span><br><span class="line">      for (i &#x3D; 0; i &lt; nBufLen; i ++)</span><br><span class="line">      &#123;</span><br><span class="line">        nTabIdx &#x3D; (*(pBuf+i)) ^ nCrcVal;</span><br><span class="line">        nCrcVal &#x3D; nCrc8Tab[nTabIdx];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">return nCrcVal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>附上java版本:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">package bp.comm.project.util;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * CRC8相关计算</span><br><span class="line"> * CRC-8  X8+X5+X4+1       100110001</span><br><span class="line"> * encode: utf-8</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class CRC8 &#123;</span><br><span class="line">    static byte[] crc8_tab &#x3D; &#123;</span><br><span class="line">            (byte) 0x00, (byte) 0x5e, (byte) 0xbc, (byte) 0xe2, (byte) 0x61, (byte) 0x3f, (byte) 0xdd,</span><br><span class="line">            (byte) 0x83, (byte) 0xc2, (byte) 0x9c, (byte) 0x7e, (byte) 0x20, (byte) 0xa3, (byte) 0xfd,</span><br><span class="line">            (byte) 0x1f, (byte) 0x41, (byte) 0x9d, (byte) 0xc3, (byte) 0x21, (byte) 0x7f, (byte) 0xfc,</span><br><span class="line">            (byte) 0xa2, (byte) 0x40, (byte) 0x1e, (byte) 0x5f, (byte) 0x01, (byte) 0xe3, (byte) 0xbd,</span><br><span class="line">            (byte) 0x3e, (byte) 0x60, (byte) 0x82, (byte) 0xdc, (byte) 0x23, (byte) 0x7d, (byte) 0x9f,</span><br><span class="line">            (byte) 0xc1, (byte) 0x42, (byte) 0x1c, (byte) 0xfe, (byte) 0xa0, (byte) 0xe1, (byte) 0xbf,</span><br><span class="line">            (byte) 0x5d, (byte) 0x03, (byte) 0x80, (byte) 0xde, (byte) 0x3c, (byte) 0x62, (byte) 0xbe,</span><br><span class="line">            (byte) 0xe0, (byte) 0x02, (byte) 0x5c, (byte) 0xdf, (byte) 0x81, (byte) 0x63, (byte) 0x3d,</span><br><span class="line">            (byte) 0x7c, (byte) 0x22, (byte) 0xc0, (byte) 0x9e, (byte) 0x1d, (byte) 0x43, (byte) 0xa1,</span><br><span class="line">            (byte) 0xff, (byte) 0x46, (byte) 0x18, (byte) 0xfa, (byte) 0xa4, (byte) 0x27, (byte) 0x79,</span><br><span class="line">            (byte) 0x9b, (byte) 0xc5, (byte) 0x84, (byte) 0xda, (byte) 0x38, (byte) 0x66, (byte) 0xe5,</span><br><span class="line">            (byte) 0xbb, (byte) 0x59, (byte) 0x07, (byte) 0xdb, (byte) 0x85, (byte) 0x67, (byte) 0x39,</span><br><span class="line">            (byte) 0xba, (byte) 0xe4, (byte) 0x06, (byte) 0x58, (byte) 0x19, (byte) 0x47, (byte) 0xa5,</span><br><span class="line">            (byte) 0xfb, (byte) 0x78, (byte) 0x26, (byte) 0xc4, (byte) 0x9a, (byte) 0x65, (byte) 0x3b,</span><br><span class="line">            (byte) 0xd9, (byte) 0x87, (byte) 0x04, (byte) 0x5a, (byte) 0xb8, (byte) 0xe6, (byte) 0xa7,</span><br><span class="line">            (byte) 0xf9, (byte) 0x1b, (byte) 0x45, (byte) 0xc6, (byte) 0x98, (byte) 0x7a, (byte) 0x24,</span><br><span class="line">            (byte) 0xf8, (byte) 0xa6, (byte) 0x44, (byte) 0x1a, (byte) 0x99, (byte) 0xc7, (byte) 0x25,</span><br><span class="line">            (byte) 0x7b, (byte) 0x3a, (byte) 0x64, (byte) 0x86, (byte) 0xd8, (byte) 0x5b, (byte) 0x05,</span><br><span class="line">            (byte) 0xe7, (byte) 0xb9, (byte) 0x8c, (byte) 0xd2, (byte) 0x30, (byte) 0x6e, (byte) 0xed,</span><br><span class="line">            (byte) 0xb3, (byte) 0x51, (byte) 0x0f, (byte) 0x4e, (byte) 0x10, (byte) 0xf2, (byte) 0xac,</span><br><span class="line">            (byte) 0x2f, (byte) 0x71, (byte) 0x93, (byte) 0xcd, (byte) 0x11, (byte) 0x4f, (byte) 0xad,</span><br><span class="line">            (byte) 0xf3, (byte) 0x70, (byte) 0x2e, (byte) 0xcc, (byte) 0x92, (byte) 0xd3, (byte) 0x8d,</span><br><span class="line">            (byte) 0x6f, (byte) 0x31, (byte) 0xb2, (byte) 0xec, (byte) 0x0e, (byte) 0x50, (byte) 0xaf,</span><br><span class="line">            (byte) 0xf1, (byte) 0x13, (byte) 0x4d, (byte) 0xce, (byte) 0x90, (byte) 0x72, (byte) 0x2c,</span><br><span class="line">            (byte) 0x6d, (byte) 0x33, (byte) 0xd1, (byte) 0x8f, (byte) 0x0c, (byte) 0x52, (byte) 0xb0,</span><br><span class="line">            (byte) 0xee, (byte) 0x32, (byte) 0x6c, (byte) 0x8e, (byte) 0xd0, (byte) 0x53, (byte) 0x0d,</span><br><span class="line">            (byte) 0xef, (byte) 0xb1, (byte) 0xf0, (byte) 0xae, (byte) 0x4c, (byte) 0x12, (byte) 0x91,</span><br><span class="line">            (byte) 0xcf, (byte) 0x2d, (byte) 0x73, (byte) 0xca, (byte) 0x94, (byte) 0x76, (byte) 0x28,</span><br><span class="line">            (byte) 0xab, (byte) 0xf5, (byte) 0x17, (byte) 0x49, (byte) 0x08, (byte) 0x56, (byte) 0xb4,</span><br><span class="line">            (byte) 0xea, (byte) 0x69, (byte) 0x37, (byte) 0xd5, (byte) 0x8b, (byte) 0x57, (byte) 0x09,</span><br><span class="line">            (byte) 0xeb, (byte) 0xb5, (byte) 0x36, (byte) 0x68, (byte) 0x8a, (byte) 0xd4, (byte) 0x95,</span><br><span class="line">            (byte) 0xcb, (byte) 0x29, (byte) 0x77, (byte) 0xf4, (byte) 0xaa, (byte) 0x48, (byte) 0x16,</span><br><span class="line">            (byte) 0xe9, (byte) 0xb7, (byte) 0x55, (byte) 0x0b, (byte) 0x88, (byte) 0xd6, (byte) 0x34,</span><br><span class="line">            (byte) 0x6a, (byte) 0x2b, (byte) 0x75, (byte) 0x97, (byte) 0xc9, (byte) 0x4a, (byte) 0x14,</span><br><span class="line">            (byte) 0xf6, (byte) 0xa8, (byte) 0x74, (byte) 0x2a, (byte) 0xc8, (byte) 0x96, (byte) 0x15,</span><br><span class="line">            (byte) 0x4b, (byte) 0xa9, (byte) 0xf7, (byte) 0xb6, (byte) 0xe8, (byte) 0x0a, (byte) 0x54,</span><br><span class="line">            (byte) 0xd7, (byte) 0x89, (byte) 0x6b, (byte) 0x35,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 计算数组的CRC8校验值</span><br><span class="line">     *</span><br><span class="line">     * @param data 需要计算的数组</span><br><span class="line">     * @return CRC8校验值</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public static byte calcCrc(byte[] data) &#123;</span><br><span class="line">        return calcCrc8(data, 0, data.length, (byte) 0);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 计算CRC8校验值</span><br><span class="line">     *</span><br><span class="line">     * @param data   数据</span><br><span class="line">     * @param offset 起始位置</span><br><span class="line">     * @param len    长度</span><br><span class="line">     * @return 校验值</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public static byte calcCrc8(byte[] data, int offset, int len) &#123;</span><br><span class="line">        return calcCrc8(data, offset, len, (byte) 0);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 计算CRC8校验值</span><br><span class="line">     *</span><br><span class="line">     * @param data   数据</span><br><span class="line">     * @param offset 起始位置</span><br><span class="line">     * @param len    长度</span><br><span class="line">     * @param preval 之前的校验值</span><br><span class="line">     * @return 校验值</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public static byte calcCrc8(byte[] data, int offset, int len, byte preval) &#123;</span><br><span class="line">        byte ret &#x3D; preval;</span><br><span class="line">        for (int i &#x3D; offset; i &lt; (offset + len); ++i) &#123;</span><br><span class="line">            ret &#x3D; crc8_tab[(0x00ff &amp; (ret ^ data[i]))];</span><br><span class="line">        &#125;</span><br><span class="line">        return ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jni </tag>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C-数据类型uint8_t、uint16_t、uint32_t、uint64_t、size_t、ssize_t</title>
      <link href="/blog/2018/10/08/C-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8Buint8-t%E3%80%81uint16-t%E3%80%81uint32-t%E3%80%81uint64-t%E3%80%81size-t-ssize-t/"/>
      <url>/blog/2018/10/08/C-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8Buint8-t%E3%80%81uint16-t%E3%80%81uint32-t%E3%80%81uint64-t%E3%80%81size-t-ssize-t/</url>
      
        <content type="html"><![CDATA[<h2 id="C语言6种基本数据类型"><a href="#C语言6种基本数据类型" class="headerlink" title="C语言6种基本数据类型"></a>C语言6种基本数据类型</h2><ol><li>整型：short、int、long</li><li>浮点型：float、double</li><li>字符类型：char</li></ol><p>typedef用来定义关键字或标识符的别名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">typedef double wages;</span><br><span class="line">typedef wages salary;</span><br></pre></td></tr></table></figure><p>一般整形对应的*_t类型为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1字节     uint8_t</span><br><span class="line">2字节     uint16_t</span><br><span class="line">4字节     uint32_t</span><br><span class="line">8字节     uint64_t</span><br></pre></td></tr></table></figure><p>ssize_t是signed size_t，<br>size_t是标准C库中定义的，应为unsigned int。定义为typedef int ssize_t。<br>而ssize_t:这个数据类型用来表示可以被执行读写操作的数据块的大小.它和size_t类似,但必需是signed.意即：它表示的是sign size_t类型的。<br>size_t是一些C/C++标准在stddef.h中定义的。这个类型足以用来表示对象的大小。<br>size_t的真实类型与操作系统有关，在32位架构中被普遍定义为：<br>typedef   unsigned int size_t;<br>而在64位架构中被定义为：<br>typedef  unsigned long size_t;<br>size_t在32位架构上是4字节，在64位架构上是8字节，在不同架构上进行编译时需要注意这个问题。<br>而int在不同架构下都是4字节，与size_t不同；且int为带符号数，size_t为无符号数</p><p>附：C99标准中inttypes.h的内容<br>在C99标准中定义了这些数据类型，具体定义在：/usr/include/stdint.h    ISO C99: 7.18 Integer types</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#ifndef __int8_t_defined  </span><br><span class="line"># define __int8_t_defined  </span><br><span class="line">typedef signed char             int8_t;   </span><br><span class="line">typedef short int               int16_t;  </span><br><span class="line">typedef int                     int32_t;  </span><br><span class="line"># if __WORDSIZE &#x3D;&#x3D; 64  </span><br><span class="line">typedef long int                int64_t;  </span><br><span class="line"># else  </span><br><span class="line">__extension__  </span><br><span class="line">typedef long long int           int64_t;  </span><br><span class="line"># endif  </span><br><span class="line">#endif      </span><br><span class="line"></span><br><span class="line">typedef unsigned char           uint8_t;  </span><br><span class="line">typedef unsigned short int      uint16_t;  </span><br><span class="line">#ifndef __uint32_t_defined  </span><br><span class="line">typedef unsigned int            uint32_t;  </span><br><span class="line"># define __uint32_t_defined  </span><br><span class="line">#endif  </span><br><span class="line">#if __WORDSIZE &#x3D;&#x3D; 64  </span><br><span class="line">typedef unsigned long int       uint64_t;  </span><br><span class="line">#else  </span><br><span class="line">__extension__  </span><br><span class="line">typedef unsigned long long int  uint64_t;  </span><br><span class="line">#endif </span><br></pre></td></tr></table></figure><h2 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">uint16_t %hu</span><br><span class="line">uint32_t %u</span><br><span class="line">uint64_t %llu</span><br></pre></td></tr></table></figure><h2 id="uint8-t类型的输出"><a href="#uint8-t类型的输出" class="headerlink" title="uint8_t类型的输出"></a>uint8_t类型的输出</h2><p>注意uint8_t的定义为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">typedef unsigned char           uint8_t;</span><br></pre></td></tr></table></figure><p>uint8_t实际上是一个char。所以输出uint8_t类型的变量实际上输出其对应的字符，而不是数值。例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">uint8_t num &#x3D; 67;</span><br><span class="line">cout &lt;&lt; num &lt;&lt; endl;</span><br></pre></td></tr></table></figure><p>输出结果：C</p>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android视图Activiy、PhoneWindow、DecorView和ViewRoot</title>
      <link href="/blog/2018/10/06/Android%E8%A7%86%E5%9B%BEActiviy%E3%80%81PhoneWindow%E3%80%81DecorView%E5%92%8CViewRoot/"/>
      <url>/blog/2018/10/06/Android%E8%A7%86%E5%9B%BEActiviy%E3%80%81PhoneWindow%E3%80%81DecorView%E5%92%8CViewRoot/</url>
      
        <content type="html"><![CDATA[<h2 id="概念简介"><a href="#概念简介" class="headerlink" title="概念简介"></a>概念简介</h2><ul><li>Activity : 控制生命周期和处理事件</li><li>Window : 视图承载器</li><li>DecorView : Android视图树的根节点视图,顶级View</li><li>ViewRoot : 执行或传递所有View的绘制以及事件分发等交互<br><img src="https://github.com/xmaihh/xmaihh.github.io/raw/master/asset/Activity-PhoneWindo-DecorView-ViewRoot.webp" alt="Android视图结构"><br><img src="https://i.loli.net/2018/12/17/5c16fe0012986.png"><br>Activity并不负责视图控制，它只是控制生命周期和处理事件，真正控制视图的是Window。一个Activity包含了一个Window，Window才是真正代表一个窗口，也就是说Activity没有Window，那就相当于是Service了。<br>Activity和Window是通过ActivityThread调用Activity的attach()函数联系起来的<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;[window]:通过PolicyManager创建window,实现callback函数,所以,当window接收到</span><br><span class="line">&#x2F;&#x2F;外界状态改变时,会调用activity的方法,</span><br><span class="line">final void attach(Context context, ActivityThread aThread,</span><br><span class="line">        Instrumentation instr, IBinder token, int ident,</span><br><span class="line">        Application application, Intent intent, ActivityInfo info,</span><br><span class="line">        CharSequence title, Activity parent, String id,</span><br><span class="line">        NonConfigurationInstances lastNonConfigurationInstances,</span><br><span class="line">        Configuration config, String referrer, IVoiceInteractor voiceInteractor) &#123;</span><br><span class="line">    ....</span><br><span class="line">    mWindow &#x3D; PolicyManager.makeNewWindow(this);</span><br><span class="line">    &#x2F;&#x2F;当window接收系统发送给它的IO输入事件时,例如键盘和触摸屏事件,就可以转发给相应的Activity</span><br><span class="line">    mWindow.setCallback(this);</span><br><span class="line">    .....</span><br><span class="line">    &#x2F;&#x2F;设置本地窗口管理器</span><br><span class="line">    mWindow.setWindowManager(</span><br><span class="line">            (WindowManager)context.getSystemService(Context.WINDOW_SERVICE),</span><br><span class="line">            mToken, mComponent.flattenToString(),</span><br><span class="line">            (info.flags &amp; ActivityInfo.FLAG_HARDWARE_ACCELERATED) !&#x3D; 0);</span><br><span class="line">    .....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>Window是视图的承载器，内部持有一个 DecorView，而这个DecorView才是 view 的根布局。Window是一个抽象类，实际在Activity中持有的是其子类PhoneWindow。PhoneWindow中有个内部类DecorView，通过创建DecorView来加载Activity中设置的布局setContentView(R.layout.activity_main)<br>Window 通过WindowManager将DecorView加载其中，并将DecorView交给ViewRoot，进行视图绘制以及其他交互</li></ul><p>DecorView是FrameLayout的子类，它可以被认为是Android视图树的根节点视图。DecorView作为顶级View，一般情况下它内部包含一个竖直方向的LinearLayout，在这个LinearLayout里面有上下三个部分，上面是个ViewStub,延迟加载的视图（根据Theme设置设置ActionBar），中间的是标题栏(根据Theme设置，有的布局没有)，下面的是内容栏。具体情况和Android版本及Theme有关</p><p>ViewRoot对应ViewRootImpl类，它是连接WindowManagerService和DecorView的纽带，View的三大流程(测量（measure），布局（layout），绘制（draw）)均通过ViewRoot来完成。ViewRoot并不属于View树的一份子。从源码实现上来看，它既非View的子类，也非View的父类，但是，它实现了ViewParent接口，这让它可以作为View的名义上的父视图。ViewRoot继承了Handler类，可以接收事件并分发，Android的所有触屏事件、按键事件、界面刷新等事件都是通过ViewRoot进行分发的</p><h2 id="视图创建过程"><a href="#视图创建过程" class="headerlink" title="视图创建过程"></a>视图创建过程</h2><p>接着跟着源码分析界面的显示过程来引入Activity中Window的创建,以及View的加载显示过程<br>在ActivityThread.performLaunchActivity中,创建Activity的实例,接着会调用Activity.attach()来初始化一些内容,而Window对象就是在attach里进行创建初始化赋值的<br>Activity.attach:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">final void attach（...） &#123; </span><br><span class="line">    ...    </span><br><span class="line">    mWindow &#x3D; new PhoneWindow(this);    </span><br><span class="line">    mWindow.setWindowManager((WindowManager)context.getSystemService(Context.WINDOW_SERVICE), </span><br><span class="line">        mToken, mComponent.flattenToString(),</span><br><span class="line">        (info.flags &amp; ActivityInfo.FLAG_HARDWARE_ACCELERATED) !&#x3D; 0);   </span><br><span class="line">    if (mParent !&#x3D; null) &#123;            </span><br><span class="line">        mWindow.setContainer(mParent.getWindow());        </span><br><span class="line">    &#125;</span><br><span class="line">    mWindowManager &#x3D; mWindow.getWindowManager();    </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Window.setWindowManager:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public void setWindowManager(WindowManager wm, IBinder appToken, String appName,boolean hardwareAccelerated) &#123; </span><br><span class="line">    ...    </span><br><span class="line">    mWindowManager &#x3D; ((WindowManagerImpl)wm).createLocalWindowManager(this);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Activity里新建一个PhoneWindow对象。在Android中,Window是个抽象的概念,Android中Window的具体实现类是PhoneWindow,Activity和Dialog中的Window对象都是PhoneWindow。</p><p>同时得到一个WindowManager对象,WindowManager是一个抽象类,这个WindowManager的具体实现实在WindowManagerImpl中,对比Context和ContextImpl。</p><p>每个Activity会有一个WindowManager对象,这个mWindowManager就是和WindowManagerService(WMS)进行通信,也是WMS识别View具体属于那个Activity的关键,创建时传入IBinder 类型的mToken。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mWindow.setWindowManager(...,mToken, ...,...)</span><br></pre></td></tr></table></figure><p>这个Activity的mToken,这个mToken是一个IBinder,WMS就是通过这个IBinder来管理Activity里的View</p><p>接着在onCreate的setContentView中,</p><p>Activity.setContentView():</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public void setContentView(@LayoutRes int layoutResID) &#123;</span><br><span class="line">    getWindow().setContentView(layoutResID);</span><br><span class="line">    initWindowDecorActionBar();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PhoneWindow.setContentView():</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public void setContentView(int layoutResID) &#123;</span><br><span class="line">    ...</span><br><span class="line">    installDecor();</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PhoneWindow.installDecor:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">private void installDecor() &#123;</span><br><span class="line">&#x2F;&#x2F;根据不同的Theme,创建不同的DecorView,DecorView是一个FrameLayout </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时只是创建了PhoneWindow,和DecorView,但目前二者也没有任何关系,产生利息的时刻是在ActivityThread.performResumeActivity中,再调用r.activity.performResume()，调用r.activity.makeVisible,将DecorView添加到当前的Window上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">void makeVisible() &#123;</span><br><span class="line">    if (!mWindowAdded) &#123;</span><br><span class="line">        ViewManager wm &#x3D; getWindowManager();</span><br><span class="line">        wm.addView(mDecor, getWindow().getAttributes());</span><br><span class="line">        mWindowAdded &#x3D; true;</span><br><span class="line">    &#125;</span><br><span class="line">    mDecor.setVisibility(View.VISIBLE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>WindowManager的addView的具体实现在WindowManagerImpl中,而WindowManagerImpl的addView又会调用WindowManagerGlobal.addView。</p><p>WindowManagerGlobal.addView:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public void addView(View view, ViewGroup.LayoutParams params,Display display, Window parentWindow) &#123;</span><br><span class="line">    ...</span><br><span class="line">    ViewRootImpl root &#x3D; new ViewRootImpl(view.getContext(), display);</span><br><span class="line">    view.setLayoutParams(wparams);</span><br><span class="line">    mViews.add(view);</span><br><span class="line">    mRoots.add(root);</span><br><span class="line">    mParams.add(wparams);</span><br><span class="line">    root.setView(view, wparams, panelParentView);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个过程创建一个ViewRootImpl,并将之前创建的DecoView作为参数闯入,以后DecoView的事件都由ViewRootImpl来管理了,比如DecoView上添加View,删除View。ViewRootImpl实现了ViewParent这个接口,这个接口最常见的一个方法是requestLayout()</p><p>ViewRootImpl是个ViewParent，在DecoView添加的View时,就会将View中的ViewParent设为DecoView所在的ViewRootImpl,View的ViewParent相同时,理解为这些View在一个View链上。所以每当调用View的requestLayout()时,其实是调用到ViewRootImpl，ViewRootImpl会控制整个事件的流程。可以看出一个ViewRootImpl对添加到DecoView的所有View进行事件管理</p>]]></content>
      
      
      <categories>
          
          <category> Android Framework </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用RecyclerView和ViewPager实现GalleryView可无限左滑右滑</title>
      <link href="/blog/2018/09/30/%E7%94%A8RecyclerView%E5%92%8CViewPager%E5%AE%9E%E7%8E%B0GalleryView%E5%8F%AF%E6%97%A0%E9%99%90%E5%B7%A6%E6%BB%91%E5%8F%B3%E6%BB%91/"/>
      <url>/blog/2018/09/30/%E7%94%A8RecyclerView%E5%92%8CViewPager%E5%AE%9E%E7%8E%B0GalleryView%E5%8F%AF%E6%97%A0%E9%99%90%E5%B7%A6%E6%BB%91%E5%8F%B3%E6%BB%91/</url>
      
        <content type="html"><![CDATA[<h1 id="GalleryViewDemo"><a href="#GalleryViewDemo" class="headerlink" title="GalleryViewDemo"></a>GalleryViewDemo</h1><ul><li><a href="https://github.com/xmaihh/GalleryViewDemo#recyclerview%E5%AE%9E%E7%8E%B0galleryview%E6%95%88%E6%9E%9C%E5%8F%AF%E4%BC%AA%E6%97%A0%E9%99%90%E6%97%A0%E9%99%90%E5%B7%A6%E6%BB%91%E5%8F%B3%E6%BB%91">RecyclerView实现GalleryView</a></li><li><a href="https://github.com/xmaihh/GalleryViewDemo#viewpager%E5%AE%9E%E7%8E%B0galleryview%E6%95%88%E6%9E%9C%E5%8F%AF%E6%97%A0%E9%99%90%E5%B7%A6%E6%BB%91%E5%8F%B3%E6%BB%91">ViewPager实现GalleryView</a></li></ul><ol><li>导包<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">implementation &#39;com.android.support:design:28.0.0&#39;</span><br><span class="line">implementation &#39;com.android.support:recyclerview-v7:28.0.0&#39;</span><br></pre></td></tr></table></figure>一个是ViewPager所在包,另一个是RecyclerView所在包</li></ol><h2 id="RecyclerView实现GalleryView效果可-伪无限-无限左滑右滑"><a href="#RecyclerView实现GalleryView效果可-伪无限-无限左滑右滑" class="headerlink" title="RecyclerView实现GalleryView效果可(伪无限)无限左滑右滑"></a>RecyclerView实现GalleryView效果可(伪无限)无限左滑右滑</h2><p>先上效果图</p><p><img src="https://github.com/xmaihh/GalleryViewDemo/raw/master/app/arts/recyclerviewgallery.gif" alt="RecyclerView实现的GalleryView效果"><br><img src="https://github.com/xmaihh/GalleryViewDemo/raw/master/app/arts/viewpagergallery.gif" alt="ViewPager实现的GalleryView效果"></p><p>要点：</p><ol><li>在有限的数据里面, 实现无限个Item,也就是可循环</li><li>在第一次显示的时候, 就可以左滑</li><li>滑动Item被放大</li></ol><p>用RecyclerView实现GalleryView效果已经有BCsl大神的<a href="https://github.com/BCsl/GalleryLayoutManager">BCsl/GalleryLayoutManager</a>使用自定义 LayoutManager 实现 Android 中 Gallery 或者 ViewPager 控件的效果<br>美滋滋:-P<br><a href="https://github.com/BCsl/GalleryLayoutManager">传送门在这里</a><br>支持垂直和水平两个方向，支持 RecycleView 的试图回收机制</p><h3 id="在有限的数据里面-实现无限个Item"><a href="#在有限的数据里面-实现无限个Item" class="headerlink" title="在有限的数据里面,实现无限个Item"></a>在有限的数据里面,实现无限个Item</h3><p>在RecyclerView.Adapter的方法中:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public int getItemCount() &#123;</span><br><span class="line">    return Integer.MAX_VALUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Integer.MAX_VALUE，即2147483647(2^32-1),距离真正的无限大还是有点差距的，不过效果也可以</p><h3 id="第一次显示的时候实现左滑"><a href="#第一次显示的时候实现左滑" class="headerlink" title="第一次显示的时候实现左滑"></a>第一次显示的时候实现左滑</h3><p>只需要在一开始的时候,产生一定的偏移量就可以左滑了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void setAdapter(Adapter adapter) &#123;</span><br><span class="line">    super.setAdapter(adapter);</span><br><span class="line">    scrollToPosition(getAdapter().getItemRawCount() * 10000);&#x2F;&#x2F;开始时的偏移量</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RecyclerView有4个滑动方法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">scrollBy(x,y)</span><br><span class="line">scrollToPosition(int position)</span><br><span class="line">smoothScrollToPosition(int position)</span><br><span class="line">scrollToPositionWithOffset(position,0)</span><br></pre></td></tr></table></figure><p>smoothScrollToPosition 其实可以理解成一个模拟的滑动操作，会回调那个滑动监听的回调方法,有滑动效果。而 scrollToPosition 相当于直接把你想要的东西再重绘到界面上，不带滑动效果。<br>smoothScrollToPosition(position)和scrollToPosition(position)效果基本相似，也是把你想显示的项显示出来，只要那一项现在看得到了，那它就罢工了，<br>不同的是smoothScrollToPosition是平滑到你想显示的项，而scrollToPosition是直接定位显示。<br>scrollToPositionWithOffset(position,0)可以定位到指定项如果该项可以置顶就将其置顶显示，第二个参数可以决定 距离顶部的offset 偏移量<br>scrollBy(x, y)这个方法是自己去控制移动的距离，单位是像素,所以在使用scrollBy(x, y)需要自己去计算移动的高度或宽度</p><p>如果使用BCsl大BCsl/GalleryLayoutManager的自定义 LayoutManager 实现的 Gallery 可使用以下方法初始化偏移量:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GalleryLayoutManager manager &#x3D; new GalleryLayoutManager(GalleryLayoutManager.HORIZONTAL);</span><br><span class="line">manager.attach(recyclerView, 1000000);</span><br></pre></td></tr></table></figure><h3 id="滑动Item放大"><a href="#滑动Item放大" class="headerlink" title="滑动Item放大"></a>滑动Item放大</h3><p>实现GalleryLayoutManager.ItemTransformer的方法重写即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void transformItem(GalleryLayoutManager layoutManager, View item, float fraction) &#123;</span><br><span class="line">    &#x2F;&#x2F;以圆心进行缩放</span><br><span class="line">    item.setPivotX(item.getWidth() &#x2F; 2.0f);</span><br><span class="line">    item.setPivotY(item.getHeight() &#x2F; 2.0f);</span><br><span class="line">    float scale &#x3D; 1 - 0.433f * Math.abs(fraction); &#x2F;&#x2F; 0.433f是放大的View面积和缩小的View面积的比值</span><br><span class="line">    item.setScaleX(scale);</span><br><span class="line">    item.setScaleY(scale);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ViewPager-实现GalleryView效果"><a href="#ViewPager-实现GalleryView效果" class="headerlink" title="ViewPager 实现GalleryView效果"></a>ViewPager 实现GalleryView效果</h2><p>继承JakeWharton/salvage大封装的可用于复用的PagerAdapter<a href="https://github.com/JakeWharton/salvage/blob/master/salvage/src/main/java/com/jakewharton/salvage/RecyclingPagerAdapter.java">RecyclingPagerAdapter</a><br>支持View回收,美滋滋:-P</p><h2 id="ViewPager实现GalleryView效果可无限左滑右滑"><a href="#ViewPager实现GalleryView效果可无限左滑右滑" class="headerlink" title="ViewPager实现GalleryView效果可无限左滑右滑"></a>ViewPager实现GalleryView效果可无限左滑右滑</h2><p>要点：</p><ol><li>在有限的数据里面, 实现无限个Item,也就是可循环</li><li>在第一次显示的时候, 就可以左滑</li><li>滑动的Item被放大<br>ViewPager这里用到JakeWharton大实现的支持view的回收机制PagerAdapter <a href="https://github.com/JakeWharton/salvage/blob/master/salvage/src/main/java/com/jakewharton/salvage/RecyclingPagerAdapter.java">RecyclingPagerAdapter</a>继承这个PagerAdapter就可以实现类似RecyclerView的回收机制了<h3 id="在有限的数据-实现循环"><a href="#在有限的数据-实现循环" class="headerlink" title="在有限的数据,实现循环"></a>在有限的数据,实现循环</h3><img src="https://github.com/xmaihh/GalleryViewDemo/raw/master/app/arts/viewpagergallery.png" alt="viewpagergallery.png"></li><li>在 ViewPager 的首尾多添加一个 View，监听 ViewPager 滚动事件，当滑到边界时，设置当前 position 为中间的某个 item，不过这种方式容易出现页面闪动导致滑动不连贯，这是因为 ViewPager#setCurrentItem(item)是需要时间来完成测量及绘制的</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">mViewPager.addOnPageChangeListener(new ViewPager.OnPageChangeListener() &#123;</span><br><span class="line">           @Override</span><br><span class="line">           public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) &#123;</span><br><span class="line"></span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           @Override</span><br><span class="line">           public void onPageSelected(int position) &#123;</span><br><span class="line">               if (position &lt; 1) &#123;</span><br><span class="line">                   &#x2F;&#x2F;如果item位置小于1，也就是滑动到第0个item的位置时，则直接跳转到倒数第二个view处，并关闭跳转动画</span><br><span class="line">                   mViewPager.setCurrentItem(mPagerAdapter.getCount() - 2, false);</span><br><span class="line">               &#125; else if (position &gt; mPagerAdapter.getCount() - 2) &#123;</span><br><span class="line"></span><br><span class="line">                   &#x2F;&#x2F;同理如果item位置大于倒数第二个view的位置，也就是滑动到最后一个item的位置时，则直接跳转到第二个view处，并关闭跳转动画</span><br><span class="line">                   mViewPager.setCurrentItem(1, false);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           @Override</span><br><span class="line">           public void onPageScrollStateChanged(int state) &#123;</span><br><span class="line"></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br></pre></td></tr></table></figure><ol start="2"><li><p>在ViewPagerAdapter的方法中:<br>实现起来较为简单。需要注意的是，我们需要设置 ViewPager 的初始 position</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public int getItemCount() &#123;</span><br><span class="line">    return Integer.MAX_VALUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在第一次显示的时候-就可以左滑"><a href="#在第一次显示的时候-就可以左滑" class="headerlink" title="在第一次显示的时候, 就可以左滑"></a>在第一次显示的时候, 就可以左滑</h3><p>这个简单只需要在一开始的时候,产生一定的偏移量就可以左滑了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**这里需要将setOffscreenPageLimit的值设置成数据源的总个数，设置ViewPager缓存页面数量,最小可设置成屏幕可见的个数**&#x2F;</span><br><span class="line">mViewPager.setOffscreenPageLimit(mPagerAdapter.getCount());</span><br><span class="line">&#x2F;**设置ViewPager位置**&#x2F;</span><br><span class="line">mViewPager.setCurrentItem(1);</span><br></pre></td></tr></table></figure><h3 id="滑动的Item被放大"><a href="#滑动的Item被放大" class="headerlink" title="滑动的Item被放大"></a>滑动的Item被放大</h3></li><li><p>需在根节点设置android:clipChildren为false即可，默认为true<br>可以通过android:layout_gravity控制超出的部分如何显示。<br>android:clipChildren的意思：是否限制子View在其范围内<br>需要在父节点和ViewPager界面设置android:clipChildren属性</p></li><li><p>setPageTransformer(boolean reverseDrawingOrder, PageTransformer transformer))方法<br>通过创建一个类实现ViewPager.PageTransformer然后重写transformPage方法来实现切换效果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">    &#x2F;**</span><br><span class="line">     * 核心就是实现transformPage(View page, float position)这个方法</span><br><span class="line">     **&#x2F;</span><br><span class="line">    @Override</span><br><span class="line">    public void transformPage(View page, float position) &#123;</span><br><span class="line">        &#x2F;&#x2F;以圆心进行缩放</span><br><span class="line">        page.setPivotX(page.getWidth() &#x2F; 2.0f);</span><br><span class="line">        page.setPivotY(page.getHeight() &#x2F; 2.0f);</span><br><span class="line">        float scale &#x3D; 1 - 0.433f * Math.abs(position);</span><br><span class="line">        page.setScaleX(scale);</span><br><span class="line">        page.setScaleY(scale);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        if (Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.KITKAT) &#123;</span><br><span class="line">            page.getParent().requestLayout();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> AndroidStudio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android经典蓝牙开发简介</title>
      <link href="/blog/2018/09/19/Android%E7%BB%8F%E5%85%B8%E8%93%9D%E7%89%99%E5%BC%80%E5%8F%91%E7%AE%80%E4%BB%8B/"/>
      <url>/blog/2018/09/19/Android%E7%BB%8F%E5%85%B8%E8%93%9D%E7%89%99%E5%BC%80%E5%8F%91%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<p><a href="https://developer.android.com/guide/topics/connectivity/bluetooth?hl=zh-cn">官方文档</a></p><p>使用 Bluetooth API，Android 应用可执行以下操作：</p><ul><li>扫描其他蓝牙设备</li><li>查询本地蓝牙适配器的配对蓝牙设备</li><li>建立 RFCOMM 通道</li><li>通过服务发现连接到其他设备</li><li>与其他设备进行双向数据传输</li><li>管理多个连接</li></ul><p>接下来简单介绍经典蓝牙(Classic Bluetooth)的点对点蓝牙设备的数据交换技术，经典蓝牙（以下简称蓝牙）开发所用到的API都来自于android.bluetooth包中</p><h2 id="基础介绍"><a href="#基础介绍" class="headerlink" title="基础介绍"></a>基础介绍</h2><h3 id="BluetoothAdapter"><a href="#BluetoothAdapter" class="headerlink" title="BluetoothAdapter"></a>BluetoothAdapter</h3><p>BluetoothAdapter类的对象代表本地的蓝牙适配器。BluetoothAdapter是所有蓝牙交互操作的入口点，通过使用该类的对象，可以完成以下操作：</p><ul><li>发现其他蓝牙设备</li><li>查询已配对的设备</li><li>通过已知的MAC地址实例化远程蓝牙设备</li><li>创建BluetoothServerSocket类对象监听与其他蓝牙设备的通信<h3 id="BluetoothDevice"><a href="#BluetoothDevice" class="headerlink" title="BluetoothDevice"></a>BluetoothDevice</h3>表示远程的蓝牙设备。使用该类对象可进行远程蓝牙设备的连接请求，以及查询该蓝牙设备的信息，例如名称，地址等。</li></ul><h3 id="BluetoothSocket"><a href="#BluetoothSocket" class="headerlink" title="BluetoothSocket"></a>BluetoothSocket</h3><p>表示蓝牙socket的接口（与TCP Socket类似）。该类的对象作为应用中数据传输的连接点。</p><h3 id="BluetoothServerSocket"><a href="#BluetoothServerSocket" class="headerlink" title="BluetoothServerSocket"></a>BluetoothServerSocket</h3><p>表示服务器socket，用来监听未来的请求（和TCP ServerSocket类似）。为了能使两个蓝牙设备进行连接，一个设备必须使用该类开启服务器socket，当远程的蓝牙设备请求该服务端设备时，如果连接被接受，BluetoothServerSocket将会返回一个已连接的BluetoothSocket类对象。</p><h3 id="BluetoothClass"><a href="#BluetoothClass" class="headerlink" title="BluetoothClass"></a>BluetoothClass</h3><p>描述蓝牙设备的主要特征。BluetoothClass的类对象是一个只读的蓝牙设备的属性集。尽管该类对象并不能可靠地描述BluetoothProfile的所有内容以及该设备支持的所有服务信息，但是该类对象仍然有助于对该设备的类型进行提示。</p><h3 id="BluetoothProfile"><a href="#BluetoothProfile" class="headerlink" title="BluetoothProfile"></a>BluetoothProfile</h3><p>表示蓝牙规范，蓝牙规范是两个基于蓝牙设备通信的标准。</p><h2 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h2><h3 id="android-permission-BLUETOOTH"><a href="#android-permission-BLUETOOTH" class="headerlink" title="android.permission.BLUETOOTH"></a>android.permission.BLUETOOTH</h3><p>为了能够在你开发的应用设备中使用蓝牙功能，必须声明蓝牙的权限”BLUETOOTH”。在进行蓝牙的通信，例如请求连接，接受连接以及交换数据中，需要用到该权限。该权限用于允许应用程序连接已经配对的蓝牙设备，并不包括对未配对设备的连接请求</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;manifest ... &gt;</span><br><span class="line">  &lt;uses-permission android:name&#x3D;&quot;android.permission.BLUETOOTH&quot; &#x2F;&gt;</span><br><span class="line">  ...</span><br><span class="line">&lt;&#x2F;manifest&gt;</span><br></pre></td></tr></table></figure><h3 id="android-permission-BLUETOOTH-ADMIN"><a href="#android-permission-BLUETOOTH-ADMIN" class="headerlink" title="android.permission.BLUETOOTH_ADMIN"></a>android.permission.BLUETOOTH_ADMIN</h3><p>如果你的应用程序需要实例化蓝牙设备的搜索或者对蓝牙的设置进行操作，那么必须声明BLUETOOTH_ADMIN权限。大多数应用需要该权限对本地的蓝牙设备进行搜索。该权限的其他能力并不应当被使用，除非你的应用是一个电源管理的应用，需要对蓝牙的设置进行修改。该权限用于发现并配对蓝牙设备。<br>注：如果使用BLUETOOTH_ADMIN权限，则必须同时声明BLUETOOTH权限。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;manifest ... &gt;</span><br><span class="line">  &lt;uses-permission android:name&#x3D;&quot;android.permission.BLUETOOTH_ADMIN&quot; &#x2F;&gt;</span><br><span class="line">  ...</span><br><span class="line">&lt;&#x2F;manifest&gt;</span><br></pre></td></tr></table></figure><h3 id="android-permission-ACCESS-COARSE-LOCATION"><a href="#android-permission-ACCESS-COARSE-LOCATION" class="headerlink" title="android.permission.ACCESS_COARSE_LOCATION"></a>android.permission.ACCESS_COARSE_LOCATION</h3><p> 在Android 6.0，原来的蓝牙功能，发现扫描蓝牙设备时，无法获取到蓝牙设备；因为在6.0后，蓝牙这块增加一个动态权限；需要在程序中动态申请。 6.0及后续版本，使用蓝牙扫描，来需要添加如下的权限，且该权限还需要在使用时动态申请。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;manifest ... &gt;</span><br><span class="line">&lt;!-- Android6.0 蓝牙扫描才需要--&gt;</span><br><span class="line">&lt;uses-permission-sdk-23 android:name&#x3D;&quot;android.permission.ACCESS_COARSE_LOCATION&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;manifest&gt;</span><br></pre></td></tr></table></figure><h2 id="开启蓝牙"><a href="#开启蓝牙" class="headerlink" title="开启蓝牙"></a>开启蓝牙</h2><p>在你的应用程序能够使用蓝牙进行通信之前，你需要进行确认蓝牙设备是否被当前设备所支持。如果当前设备支持蓝牙，则需要请求开启蓝牙设备。该部分可使用BluetoothAdapter通过两步完成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">BluetoothAdapter mBluetoothAdapter &#x3D; BluetoothAdapter.getDefaultAdapter();</span><br><span class="line">if (mBluetoothAdapter &#x3D;&#x3D; null) &#123;</span><br><span class="line">    &#x2F;&#x2F; Device does not support Bluetooth</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，你需要确保蓝牙处于开启的状态。调用isEnabled()方法来检查蓝牙目前是否可用。如果该方法返回false，那么蓝牙处于不可用的状态。为了请求蓝牙设备的开启，使用ACTION_REQUEST_ENABLE的Intent，并调用startActivityForResult()方法。这将会通过系统设置开启你的蓝牙，例如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if (!mBluetoothAdapter.isEnabled()) &#123;</span><br><span class="line">    Intent enableBtIntent &#x3D; new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);</span><br><span class="line">    startActivityForResult(enableBtIntent, REQUEST_ENABLE_BT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>常量REQUEST_ENABLE_BT是本地定义的整型（需要大于0），当系统通过onActivityResult() 返回至你的应用程序时，将作为requestCode的参数。<br>如果成功开启了蓝牙，你的Activity将收到RESULT_OK作为resultCode。如果蓝牙不能成功开启（例如用户选择“取消”），则resultCode为RESULT_CANCELED。<br>可选择的是，你的应用也可以监听”ACTION_STATE_CHANGED”的广播Intent(不再赘述广播机制。新手请查阅文档或留言)。当蓝牙的状态发生变化时，系统将会进行广播。该广播包含两个额外的域，分别是：EXTRA_STATE和EXTRA_PREVIOUS_STATE，分别包含蓝牙的新旧状态。可能的值为：STATE_TURNING_ON（开启中），STATE_ON（已开启）， STATE_TURNING_OFF（关闭中）以及 STATE_OFF（已关闭）。</p><h2 id="查找设备"><a href="#查找设备" class="headerlink" title="查找设备"></a>查找设备</h2><p>使用BluetoothAdapter，通过搜索设备或查询配对设备列表可以找到远程蓝牙设备。</p><p>设备搜索(Device Discovery)是一个扫描的过程，用来搜索本地开启蓝牙的设备，在此之后请求每一个扫描到设备的信息。然而，一个蓝牙设备只有处于可见状态下才会返回设备信息，例如设备名称，MAC地址等。使用该信息，设备能够实例化和该设备的蓝牙连接。</p><p>当第一次和远程蓝牙设备进行连接时，一个配对的请求将会自动呈现在用户面前。当设备配对时，设备的基础信息将会被保存并能够使用蓝牙的API进行读取。使用远程蓝牙设备的MAC地址，介于蓝牙设备间的连接将能够在任意时刻实例化，而不需要进行搜索操作（假定设备在蓝牙的通信范围内）[4]。</p><p>请记住配对(paired)和连接(connected)是不同的。配对意味着两个蓝牙设备知道彼此的存在，并有一个共享的key用于验证，并且能够彼此建立加密的链接。连接则意味着设备当前共享同一个RFCOMM通道，并能够彼此交换数据。当前的蓝牙API要求在建立RFCOMM通道之前进行配对。</p><h3 id="发现设备"><a href="#发现设备" class="headerlink" title="发现设备"></a>发现设备</h3><p>执行发现设备的操作，仅仅需要执行startDiscovery()方法。该过程是异步的，该方法将会立刻返回一个布尔值表明搜索是否已经开始。通常情况下，该搜索的过程调用12秒钟的查询，随后返回找到的设备。</p><p>你的应用程序必须使用ACTION_FOUNDd的Intent注册一个BroadastReceiver。该Intent用来接受每一个查找到设备的信息。对于每一个设备，系统将会广播ACTION_FOUND。该Intent包含两个额外域，EXTRA_DEVICE 和 EXTRA_CLASS。分别包含一个BluetoothDevice类对象和BluetoothClass类对象。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Create a BroadcastReceiver for ACTION_FOUND</span><br><span class="line">private final BroadcastReceiver mReceiver &#x3D; new BroadcastReceiver() &#123;</span><br><span class="line">    public void onReceive(Context context, Intent intent) &#123;</span><br><span class="line">        String action &#x3D; intent.getAction();</span><br><span class="line">        &#x2F;&#x2F; When discovery finds a device</span><br><span class="line">        if (BluetoothDevice.ACTION_FOUND.equals(action)) &#123;</span><br><span class="line">            &#x2F;&#x2F; Get the BluetoothDevice object from the Intent</span><br><span class="line">            BluetoothDevice device &#x3D; intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);</span><br><span class="line">            &#x2F;&#x2F; Add the name and address to an array adapter to show in a ListView</span><br><span class="line">            mArrayAdapter.add(device.getName() + &quot;\n&quot; + device.getAddress());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#x2F;&#x2F; Register the BroadcastReceiver</span><br><span class="line">IntentFilter filter &#x3D; new IntentFilter(BluetoothDevice.ACTION_FOUND);</span><br><span class="line">registerReceiver(mReceiver, filter); &#x2F;&#x2F; Don&#39;t forget to unregister during onDestroy</span><br></pre></td></tr></table></figure><p>执行设备搜索的操作是一项很繁重的任务，会消耗大量的资源。一旦你找到了一个设备并要进行连接，请务必确认是否停止搜索设备的操作。如果已经进行了连接，那么搜索操作将会显著地降低连接的速率，因此你应当在连接时停止搜索。可通过cancelDiscovery()方法停止搜索。</p><h4 id="蓝牙设备可见性"><a href="#蓝牙设备可见性" class="headerlink" title="蓝牙设备可见性"></a>蓝牙设备可见性</h4><p>Android设备默认情况下蓝牙是不可见的。用户可以使蓝牙在有限的时间内可见，或者应用可以在用户界面内请求用户开启可见性。如果想要使自己的蓝牙设备可见，使用ACTION_REQUEST_DISCOVERABLE的Intent，调用startActivityForResult(Intent, int)方法即可。这将会通过系统设置请求开启搜索模式。默认情况下，设备将在120秒内可见。你可以定义不同的时间长度，通过添加Intent的extra： EXTRA_DISCOVERABLE_DURATION即可。该时长最大为3600秒，最小为0，超出该范围的值都会被设为120秒。其中，0表示设备始终处于可见状态。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Intent discoverableIntent &#x3D; new</span><br><span class="line">Intent(BluetoothAdapter.ACTION_REQUEST_DISCOVERABLE);</span><br><span class="line">discoverableIntent.putExtra(BluetoothAdapter.EXTRA_DISCOVERABLE_DURATION, 300);</span><br><span class="line">startActivity(discoverableIntent);</span><br></pre></td></tr></table></figure><p>一个请求蓝牙可见的对话框将会被显示出来。如果用户选择“是”，那么该设备将会在指定时间内可见，你的Activity将会在onActiviyResult()中返回和时限相同的result code。如果用户选择“否”，那么result code将为ESULT_CANCELED。</p><p>如果蓝牙设备没有开启，在执行搜索操作时将会自动开启蓝牙设备。</p><p>设备将在指定时间内保持可见。如果你想要检查状态的变化，可以通过使用ACTION_SCAN_MODE_CHANGED的Intent注册广播进行监听。该广播onReceive()的Intent包含两个额外域：EXTRA_SCAN_MODE 和 EXTRA_PREVIOUS_SCAN_MODE，分别表示新旧状态。可能的值有：SCAN_MODE_CONNECTABLE_DISCOVERABLE（可连接可见），SCAN_MODE_CONNECTABLE（可连接但不可见） 或 SCAN_MODE_NONE（不可连接不可见）。</p><p>如果仅仅是连接到远程蓝牙设备的话，你并不需要开启可见性。开启可见性仅仅在你的应用中作为服务端时才是必要的。因为其他蓝牙设备必须找到你的设备之后才能建立连接。</p><h3 id="查询配对设备"><a href="#查询配对设备" class="headerlink" title="查询配对设备"></a>查询配对设备</h3><p>在搜索设备之前，有必要查询已配对的设备集，来得知想要连接的设备是否已经配对。为了执行上述操作，可以调用getBondedDevices()方法。该方法返回一个BluetoothDevice的集合来代表配对设备。例如，你可以查询所有的配对设备并使用ArrarAdapter显示它们：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;BluetoothDevice&gt; pairedDevices &#x3D; mBluetoothAdapter.getBondedDevices();</span><br><span class="line">&#x2F;&#x2F; If there are paired devices</span><br><span class="line">if (pairedDevices.size() &gt; 0) &#123;</span><br><span class="line">    &#x2F;&#x2F; Loop through paired devices</span><br><span class="line">    for (BluetoothDevice device : pairedDevices) &#123;</span><br><span class="line">        &#x2F;&#x2F; Add the name and address to an array adapter to show in a ListView</span><br><span class="line">        mArrayAdapter.add(device.getName() + &quot;\n&quot; + device.getAddress());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="连接设备"><a href="#连接设备" class="headerlink" title="连接设备"></a>连接设备</h2><p>为了在你的应用中让双方设备建立连接，你必须同时实现服务器端和客户端的机制。因为其中一个设备一定会开启服务器Socket，而另一个进行连接（使用作为服务器端的MAC地址进行连接）。当客户端和服务器端彼此拥有一个在同一个RFCOMM通道已连接的BluetoothSocket时便可以进行数据的交换。在每一端，都可以获得输入和输出流，从而可以开始数据的传输。该部分将在后文描述，本部分只描述如何初始化设备间的连接。</p><p>服务器端和客户端通过不同的方式获得BluetoothSocket。当一个连接接受(accept)的时候服务器端接收BluetoothSocket。而客户端则通过打开服务器端的RFCOMM通道得到BluetoothSocket。</p><p>一种实现技术是，应用程序同时实现客户端和服务器端。因此，每一个服务器端的程序拥有一个server socket并监听连接。当然，也可以在一个应用中实现服务器端的功能，而另一个应用中实现客户端的部分。</p><p>如果两个设备之前并没有配对过，那么Android的框架将会自动进行配对的请求通知。因此当尝试进行连接时，你的应用并不需要关心两台设备是否已经配对。你的RFCOMM连接将会被阻塞，直到用户成功配对，或因为用户拒绝配对而取消，或者配对失败以及超时等。</p><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><p>两个设备进行连接时，必须有一个设备通过BluetoothServerSocket作为服务器。该server socket的目的是监听未来的连接请求，并当该请求被接受时，提供一个已经连接的BluetoothSocket。当从BluetoothServerSocket获得BluetoothSocket时，BluetoothServerSocket必须被抛弃，除非你想要连接多个设备。</p><p>步骤如下：</p><ol><li>通过调用listenUsingRfcommWithServiceRecord(String, UUID)获取BluetoothServerSocket。<br>String是你服务的可辨别名称。系统将会自动写入一个新的“服务发现协议(Service Discovery Protocol 简称SDP)”数据库入口至你的设备，该名称可随意命名，通常情况下是应用名称。UUID也包括SDP的入口，并作为和客户端连接基础。当客户端尝试连接至服务端设备时，将会带有想要连接设备的独一无二的UUID。这些UUID必须匹配，目的是为了能够使连接被接受。<br>可通过网络上的诸多UUID生成器来获得UUID的字符串，然后通过fromString(String)方法获得。</li><li>通过调用accept()，开始监听连接请求。<br>这是一个阻塞的调用，将会在抛出异常或者连接被接受时返回。连接只有在远程设备发送一个带有和服务器端已注册的UUID相匹配的连接请求时才会被接受。当连接成功时,accept()将会返回一个已经连接的BluetoothSocket。</li><li>通过调用close()，关闭连接。 除非你想要接受多个连接，否则的话，调用close()进行关闭。<br>这将会释放server socket以及相关的资源，但是并不会关闭从accept()中返回的，已经连接的BluetoothSocket。和TCP/IP不同，RFCOMM仅仅允许在一个通道中同时存在一个客户端。因此大多数情况下，在获得BluetoothSocket后立即调用close()是很有必要的。</li></ol><p>accept()方法不应当在主线程（UI线程）中执行，因为这是一个阻塞的调用，能够租住任何和程序的交互。通常情况下和BluetoothServerSocket以及BluetoothSocket有关的任何操作都应该在新的线程中进行。在另外的线程中调用close()方法将会撤销该阻塞方法调用并立即返回。请注意，BluetoothServerSocket和BluetoothSokcet中的任何方法都是线程安全的。</p><p>例子如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">private class AcceptThread extends Thread &#123;</span><br><span class="line">    private final BluetoothServerSocket mmServerSocket;</span><br><span class="line"> </span><br><span class="line">    public AcceptThread() &#123;</span><br><span class="line">        &#x2F;&#x2F; Use a temporary object that is later assigned to mmServerSocket,</span><br><span class="line">        &#x2F;&#x2F; because mmServerSocket is final</span><br><span class="line">        BluetoothServerSocket tmp &#x3D; null;</span><br><span class="line">        try &#123;</span><br><span class="line">            &#x2F;&#x2F; MY_UUID is the app&#39;s UUID string, also used by the client code</span><br><span class="line">            tmp &#x3D; mBluetoothAdapter.listenUsingRfcommWithServiceRecord(NAME, MY_UUID);</span><br><span class="line">        &#125; catch (IOException e) &#123; &#125;</span><br><span class="line">        mmServerSocket &#x3D; tmp;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public void run() &#123;</span><br><span class="line">        BluetoothSocket socket &#x3D; null;</span><br><span class="line">        &#x2F;&#x2F; Keep listening until exception occurs or a socket is returned</span><br><span class="line">        while (true) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                socket &#x3D; mmServerSocket.accept();</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">            &#x2F;&#x2F; If a connection was accepted</span><br><span class="line">            if (socket !&#x3D; null) &#123;</span><br><span class="line">                &#x2F;&#x2F; Do work to manage the connection (in a separate thread)</span><br><span class="line">                manageConnectedSocket(socket);</span><br><span class="line">                mmServerSocket.close();</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    &#x2F;** Will cancel the listening socket, and cause the thread to finish *&#x2F;</span><br><span class="line">    public void cancel() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            mmServerSocket.close();</span><br><span class="line">        &#125; catch (IOException e) &#123; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在例子中，一旦连接被接受并获得BluetoothSocket后，应用立即将该BluetoothSocket发送至独立的线程并关闭BluetoothSocket，挑出循环。<br>注意到，当accept()返回BluetoothSocket时，socket已经连接了，因此不应该调用connect方法。<br>manageConnectedSocket()是一个虚构的方法，用来初始化数据传输的线程，将在后文介绍数据传输的部分。<br>一旦监听到连接并获得BluetoothSocket时，应当立即调用close()关闭BluetoothServerSocket。cancel()则为此提供了一个公共的方法。</p><blockquote><p>BluetoothAdapter中提供了两种创建BluetoothServerSocket 方式，一是mBluetoothAdapter.listenUsingRfcommWithServiceRecord(“name”,UUID)创建安全的RFCOMM Bluetooth socket，该连接是安全的需要进行配对。而通过listenUsingInsecureRfcommWithServiceRecord创建的RFCOMM Bluetooth socket是不安全的，连接时不需要进行配对。<br>与之对应的安全的客户端创建createRfcommSocketToServiceRecord()。另一种不安全连接对应的函数是createInsecureRfcommSocketToServiceRecord()。</p></blockquote><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><p>为了和服务器端连接，首先需要拥有一个代表远程服务器的BluetoothDevice对象。之后必须使用BluetoothDevice获得一个BluetoothSocket并初始化连接。</p><p>基本步骤如下。</p><ol><li>使用BluetoothDevice，通过调用createRfcommSocketToServiceRecord(UUID)或者createInsecureRfcommSocketToServiceRecord(UUID)得到BluetoothSocket。<br>通过调用connect()方法初始化连接。</li><li>系统将会在远程服务器上查询匹配UUID的SDP。如果查询成功，将会共享RFCOMM通道用于连接，connect()方法将会返回。该方法是一个阻塞的调用。如果12秒钟内未能成功连接，该方法将会跑出一个异常。<br>因为connect()是一个阻塞的调用，因此该连接的过程总是应当在一个独立的线程中进行。<br>应当确保在调用connect()时设备没有执行搜索设备的操作。如果搜索设备也在同时进行，那么将会显著地降低连接速率，并很大程度上会连接失败。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">private class ConnectThread extends Thread &#123;</span><br><span class="line">    private final BluetoothSocket mmSocket;</span><br><span class="line">    private final BluetoothDevice mmDevice;</span><br><span class="line"> </span><br><span class="line">    public ConnectThread(BluetoothDevice device) &#123;</span><br><span class="line">        &#x2F;&#x2F; Use a temporary object that is later assigned to mmSocket,</span><br><span class="line">        &#x2F;&#x2F; because mmSocket is final</span><br><span class="line">        BluetoothSocket tmp &#x3D; null;</span><br><span class="line">        mmDevice &#x3D; device;</span><br><span class="line"> </span><br><span class="line">        &#x2F;&#x2F; Get a BluetoothSocket to connect with the given BluetoothDevice</span><br><span class="line">        try &#123;</span><br><span class="line">            &#x2F;&#x2F; MY_UUID is the app&#39;s UUID string, also used by the server code</span><br><span class="line">            tmp &#x3D; device.createRfcommSocketToServiceRecord(MY_UUID);</span><br><span class="line">        &#125; catch (IOException e) &#123; &#125;</span><br><span class="line">        mmSocket &#x3D; tmp;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public void run() &#123;</span><br><span class="line">        &#x2F;&#x2F; Cancel discovery because it will slow down the connection</span><br><span class="line">        mBluetoothAdapter.cancelDiscovery();</span><br><span class="line"> </span><br><span class="line">        try &#123;</span><br><span class="line">            &#x2F;&#x2F; Connect the device through the socket. This will block</span><br><span class="line">            &#x2F;&#x2F; until it succeeds or throws an exception</span><br><span class="line">            mmSocket.connect();</span><br><span class="line">        &#125; catch (IOException connectException) &#123;</span><br><span class="line">            &#x2F;&#x2F; Unable to connect; close the socket and get out</span><br><span class="line">            try &#123;</span><br><span class="line">                mmSocket.close();</span><br><span class="line">            &#125; catch (IOException closeException) &#123; &#125;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        &#x2F;&#x2F; Do work to manage the connection (in a separate thread)</span><br><span class="line">        manageConnectedSocket(mmSocket);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    &#x2F;** Will cancel an in-progress connection, and close the socket *&#x2F;</span><br><span class="line">    public void cancel() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            mmSocket.close();</span><br><span class="line">        &#125; catch (IOException e) &#123; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>cancelDiscovery() 在连接建立之前被调用。你应当总是在连接前这么做。这样做是安全的，虽然没有检查是否在搜索设备。（如果想要进行检查，可以调用isDiscovering()）。<br>manageConnectedSocket()是一个虚构的方法，用来初始化数据传输的线程，将在后文介绍数据传输的部分。<br>在完成BluetoothSocket的处理后，始终记得调用close()方法来进行清理。<h2 id="管理连接"><a href="#管理连接" class="headerlink" title="管理连接"></a>管理连接</h2>当成功进行设备间的连接时，每一个设备都持有一个已连接的BluetoothSocket。这时终于可以进行数据的传输了。使用BluetoothSocket，数据的传输非常简单。<br>步骤如下：</li><li>通过getInputStream()以及getOutputStream()分别获得输入输出流。</li><li>通过read(byte[]) 和 write(byte[]) 读写数据。</li></ol><p>首先需要一个专门的线程进行读写的操作。这是很重要的一点，因为read(byte[]) 和 write(byte[])方法都是阻塞调用的。read(byte[])将会阻塞，直到从流中读到数据。write(byte[])并不会经常阻塞，但如果远程设备没有足够快的调用读操作以及缓存已满时而被阻塞。你应当在该独立线程的主循环中进行数据的读取，并在该线程中一个独立的公有方法进行写的操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">private class ConnectedThread extends Thread &#123;</span><br><span class="line">    private final BluetoothSocket mmSocket;</span><br><span class="line">    private final InputStream mmInStream;</span><br><span class="line">    private final OutputStream mmOutStream;</span><br><span class="line"> </span><br><span class="line">    public ConnectedThread(BluetoothSocket socket) &#123;</span><br><span class="line">        mmSocket &#x3D; socket;</span><br><span class="line">        InputStream tmpIn &#x3D; null;</span><br><span class="line">        OutputStream tmpOut &#x3D; null;</span><br><span class="line"> </span><br><span class="line">        &#x2F;&#x2F; Get the input and output streams, using temp objects because</span><br><span class="line">        &#x2F;&#x2F; member streams are final</span><br><span class="line">        try &#123;</span><br><span class="line">            tmpIn &#x3D; socket.getInputStream();</span><br><span class="line">            tmpOut &#x3D; socket.getOutputStream();</span><br><span class="line">        &#125; catch (IOException e) &#123; &#125;</span><br><span class="line"> </span><br><span class="line">        mmInStream &#x3D; tmpIn;</span><br><span class="line">        mmOutStream &#x3D; tmpOut;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public void run() &#123;</span><br><span class="line">        byte[] buffer &#x3D; new byte[1024];  &#x2F;&#x2F; buffer store for the stream</span><br><span class="line">        int bytes; &#x2F;&#x2F; bytes returned from read()</span><br><span class="line"> </span><br><span class="line">        &#x2F;&#x2F; Keep listening to the InputStream until an exception occurs</span><br><span class="line">        while (true) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                &#x2F;&#x2F; Read from the InputStream</span><br><span class="line">                bytes &#x3D; mmInStream.read(buffer);</span><br><span class="line">                &#x2F;&#x2F; Send the obtained bytes to the UI activity</span><br><span class="line">                mHandler.obtainMessage(MESSAGE_READ, bytes, -1, buffer)</span><br><span class="line">                        .sendToTarget();</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    &#x2F;* Call this from the main activity to send data to the remote device *&#x2F;</span><br><span class="line">    public void write(byte[] bytes) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            mmOutStream.write(bytes);</span><br><span class="line">        &#125; catch (IOException e) &#123; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    &#x2F;* Call this from the main activity to shutdown the connection *&#x2F;</span><br><span class="line">    public void cancel() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            mmSocket.close();</span><br><span class="line">        &#125; catch (IOException e) &#123; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构造函数获得必要的流，一旦执行，线程将会等待数据从输入流中流出。当read(byte[])返回字节时，数据将通过父类的Handler被发送至Activity。之后再返回并等待更多的字节流。<br>发送数据则仅仅需要简单地调用线程的write()方法即可。<br>线程中的cancel（）方法很重要，因为连接可以随时在任意时间通过BluetoothSocket终止。该方法在结束使用蓝牙连接后，应当总是被调用。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><h3 id="附上小例子-Demo"><a href="#附上小例子-Demo" class="headerlink" title="附上小例子 Demo"></a>附上小例子 <a href="https://github.com/xmaihh/Android-Bluetooth">Demo</a></h3>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BLE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决Module里调用aar出现failed to resolve的问题</title>
      <link href="/blog/2018/09/12/%E8%A7%A3%E5%86%B3Module%E9%87%8C%E8%B0%83%E7%94%A8aar%E5%87%BA%E7%8E%B0failed-to-resolve%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/blog/2018/09/12/%E8%A7%A3%E5%86%B3Module%E9%87%8C%E8%B0%83%E7%94%A8aar%E5%87%BA%E7%8E%B0failed-to-resolve%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>环境：AndroidStudio 3.1.4</p><ol><li>在Module的build.gradle添加<br>在dependencies{}标签里<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile(name: &#39;第三方aar库名称&#39;, ext: &#39;aar&#39;)</span><br></pre></td></tr></table></figure>在android{}标签里<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">repositories &#123;</span><br><span class="line">    flatDir &#123;</span><br><span class="line">        dirs &#39;libs&#39;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在App的build.gradle添加<br>在dependencies{}标签里<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">repositories &#123;</span><br><span class="line">    flatDir &#123;</span><br><span class="line">        dirs project(&#39;:你的Module名&#39;).file(&#39;libs&#39;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>重新编译即可</li></ol>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> AndroidStudio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android-BLE蓝牙之Central</title>
      <link href="/blog/2018/09/10/Android-BLE%E8%93%9D%E7%89%99%E4%B9%8BCentral/"/>
      <url>/blog/2018/09/10/Android-BLE%E8%93%9D%E7%89%99%E4%B9%8BCentral/</url>
      
        <content type="html"><![CDATA[<p>低功耗蓝牙(BLE)Android 4.3（API 18）以上才支持<br>Android 5.0(API 21) 扫描蓝牙需要定位权限，否则扫描不到设备,实际使用时候发现 5.0不需要也可以扫描，Android 6.0(API 23)以上必须需要定位权限<br>官方文档:<a href="https://developer.android.com/guide/topics/connectivity/bluetooth-le.html?hl=zh-cn">https://developer.android.com/guide/topics/connectivity/bluetooth-le.html?hl=zh-cn</a></p><h2 id="声明权限"><a href="#声明权限" class="headerlink" title="声明权限"></a>声明权限</h2><p>在项目的AndroidManifest.xml中声明权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 定位权限第二个包含第一个，所以这里就声明了一个，两个都声明也可以</span><br><span class="line"> &lt;!-- &lt;uses-permission android:name&#x3D;&quot;android.permission.ACCESS_COARSE_LOCATION&quot;&#x2F;&gt; --&gt;</span><br><span class="line"> &lt;uses-permission android:name&#x3D;&quot;android.permission.ACCESS_FINE_LOCATION&quot;&#x2F;&gt; </span><br><span class="line"> &lt;uses-permission android:name&#x3D;&quot;android.permission.BLUETOOTH&quot;&#x2F;&gt;</span><br><span class="line"> &lt;uses-permission android:name&#x3D;&quot;android.permission.BLUETOOTH_ADMIN&quot;&#x2F;&gt;</span><br><span class="line"> &#x2F;&#x2F; 是否必须支持低功耗蓝牙，此处不必须</span><br><span class="line">  &lt;uses-feature</span><br><span class="line">     android:name&#x3D;&quot;android.hardware.bluetooth_le&quot;</span><br><span class="line">     android:required&#x3D;&quot;false&quot;&#x2F;&gt;</span><br><span class="line">  &#x2F;&#x2F; 是有gps硬件</span><br><span class="line"> &lt;uses-feature android:name&#x3D;&quot;android.hardware.location.gps&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure><h2 id="检查是否支持BLE"><a href="#检查是否支持BLE" class="headerlink" title="检查是否支持BLE"></a>检查是否支持BLE</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">    &#x2F;**</span><br><span class="line">     * 首先检查是否支持BLE</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private void init() &#123;</span><br><span class="line">        if (!getPackageManager().hasSystemFeature(PackageManager.FEATURE_BLUETOOTH_LE)) &#123;</span><br><span class="line">            Toast.makeText(this, &quot;BLE not supported&quot;, Toast.LENGTH_LONG).show();</span><br><span class="line">&#x2F;&#x2F;            finish();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mBluetoothManager &#x3D; (BluetoothManager) getSystemService(BLUETOOTH_SERVICE);</span><br><span class="line">        mBluetoothAdapter &#x3D; mBluetoothManager.getAdapter();</span><br><span class="line"></span><br><span class="line">        if (mBluetoothAdapter &#x3D;&#x3D; null) &#123;</span><br><span class="line">            Toast.makeText(this, &quot;Bluetooth not supported&quot;, Toast.LENGTH_LONG).show();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (!mBluetoothAdapter.isEnabled()) &#123;</span><br><span class="line">            Intent enableBtIntent &#x3D; new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);</span><br><span class="line">            startActivityForResult(enableBtIntent, REQUEST_ENABLE_BT);</span><br><span class="line">            &#x2F;&#x2F;判断是否打开蓝牙,如果没有打开需要回调打开蓝牙,这里省略,请自行打开蓝牙</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>通过BluetoothManager得到蓝牙适配器BluetoothAdapter,如果获取到的Adapter为空说明不支持蓝牙，或者没有蓝牙模块</p><h2 id="扫描设备"><a href="#扫描设备" class="headerlink" title="扫描设备"></a>扫描设备</h2><p>低功耗蓝牙和经典蓝牙的扫描方式不同,蓝牙扫描耗电比较严重，所以一定要记得在合适的实际停止扫描，比如定时停止、扫描到目标设备就停止,扫描时调用Adapter的startLeScan()方法,然而这个方法被标记为过时，API&gt;=21被另一个取代。然后通过回调得到扫描结果（经典蓝牙是通过广播得到扫描结果）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> mBluetoothAdapter.startLeScan(this);</span><br><span class="line"> ...</span><br><span class="line"> &#x2F;**</span><br><span class="line"> * 扫描结果回调</span><br><span class="line"> *&#x2F;</span><br><span class="line"> @Override</span><br><span class="line">public void onLeScan(BluetoothDevice device, int rssi, byte[] scanRecord) &#123;</span><br><span class="line"> &#x2F;&#x2F; 得到扫描结果</span><br><span class="line">    Log.i(TAG, &quot;扫描到的设备, name&#x3D;&quot; + device.getName() + &quot;,address&#x3D;&quot; + device.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>device：代表外设即目标设备 rssi：设一个强度值，但是时负值，利用这个值通过公式可以算出离你的距离<br>scanRecord：广播数据，附加的数据</p><h2 id="停止扫描"><a href="#停止扫描" class="headerlink" title="停止扫描"></a>停止扫描</h2><p>扫描完成务必停止，因为扫描不仅耗电，还影响连接速度，所以当要连接的时候，先停止扫描时必须的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public void stopScan() &#123;</span><br><span class="line">    initHandler();</span><br><span class="line">    Log.i(TAG, &quot;停止扫描，蓝牙设备&quot;);</span><br><span class="line">    if (mScanning) &#123;</span><br><span class="line">        mScanning &#x3D; false;</span><br><span class="line">        &#x2F;&#x2F; 开始扫描的接口,要一样的不然停止不了</span><br><span class="line">        mBluetoothAdapter.stopLeScan(this);</span><br><span class="line">    &#125;</span><br><span class="line">    if (scanRunnable !&#x3D; null) &#123;</span><br><span class="line">        mHandler.removeCallbacks(scanRunnable);</span><br><span class="line">        scanRunnable &#x3D; null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="连接设备"><a href="#连接设备" class="headerlink" title="连接设备"></a>连接设备</h2><p>通常Ble连接设备速度还是很快的，连接理论上来说也是无状态的，所以也需要一个定时任务来，保证超时停止。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">public boolean connect(Context context, String address) &#123;</span><br><span class="line">    if (mConnectionState &#x3D;&#x3D; STATE_CONNECTED) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    if (mBluetoothAdapter &#x3D;&#x3D; null || TextUtils.isEmpty(address)) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    initHandler();</span><br><span class="line">    if (connectRunnable &#x3D;&#x3D; null) &#123;</span><br><span class="line">        connectRunnable &#x3D; new Runnable() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                mConnectionState &#x3D; STATE_DISCONNECTING;</span><br><span class="line">                disconnect();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#x2F;&#x2F; 30s没反应停止连接</span><br><span class="line">    mHandler.postDelayed(connectRunnable, 30 * 1000);</span><br><span class="line">    stopScan();</span><br><span class="line">&#x2F;&#x2F; 获取到远程设备，</span><br><span class="line">    final BluetoothDevice device &#x3D; mBluetoothAdapter.getRemoteDevice(address);</span><br><span class="line">    if (device &#x3D;&#x3D; null) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; 开始连接，第二个参数表示是否需要自动连接，true设备靠近自动连接，第三个表示连接回调</span><br><span class="line">    mBluetoothGatt &#x3D; device.connectGatt(context, false, mGattCallback);</span><br><span class="line">    mBluetoothDeviceAddress &#x3D; address;</span><br><span class="line">    mConnectionState &#x3D; STATE_CONNECTING;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="监听连接回调"><a href="#监听连接回调" class="headerlink" title="监听连接回调"></a>监听连接回调</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">private final BluetoothGattCallback mGattCallback &#x3D; new BluetoothGattCallback() &#123;</span><br><span class="line">&#x2F;&#x2F; 连接状态变化</span><br><span class="line">    @Override</span><br><span class="line">    public void onConnectionStateChange(BluetoothGatt gatt, int status, int newState) &#123;</span><br><span class="line">        if (newState &#x3D;&#x3D; BluetoothProfile.STATE_CONNECTED) &#123; &#x2F;&#x2F; 连接上</span><br><span class="line">            mConnectionState &#x3D; STATE_CONNECTED;</span><br><span class="line">            boolean success &#x3D; mBluetoothGatt.discoverServices(); &#x2F;&#x2F; 去发现服务</span><br><span class="line">            Log.i(TAG, &quot;Attempting to start service discovery:&quot; +</span><br><span class="line">                    success);</span><br><span class="line">        &#125; else if (newState &#x3D;&#x3D; BluetoothProfile.STATE_DISCONNECTED) &#123; &#x2F;&#x2F; 连接断开</span><br><span class="line">            mConnectionState &#x3D; STATE_DISCONNECTED;       </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 发现服务</span><br><span class="line">    @Override</span><br><span class="line">    public void onServicesDiscovered(BluetoothGatt gatt, int status) &#123;</span><br><span class="line">        if (status &#x3D;&#x3D; BluetoothGatt.GATT_SUCCESS) &#123;</span><br><span class="line">            Log.i(TAG,&quot;发现服务&quot;);</span><br><span class="line">            &#x2F;&#x2F; 解析服务</span><br><span class="line">            discoverService();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 特征读取变化</span><br><span class="line">    @Override</span><br><span class="line">    public void onCharacteristicRead(BluetoothGatt gatt,</span><br><span class="line">                                     BluetoothGattCharacteristic characteristic,</span><br><span class="line">                                     int status) &#123;</span><br><span class="line">        if (status &#x3D;&#x3D; BluetoothGatt.GATT_SUCCESS) &#123;</span><br><span class="line">          </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 收到数据</span><br><span class="line">    @Override</span><br><span class="line">    public void onCharacteristicChanged(BluetoothGatt gatt,</span><br><span class="line">                                        BluetoothGattCharacteristic characteristic) &#123;</span><br><span class="line">        mConnectionState &#x3D; STATE_CONNECTED;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="断开连接"><a href="#断开连接" class="headerlink" title="断开连接"></a>断开连接</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public void disconnect() &#123;</span><br><span class="line">    if (mBluetoothAdapter &#x3D;&#x3D; null || mBluetoothGatt &#x3D;&#x3D; null) &#123;</span><br><span class="line">        mConnectionState &#x3D; STATE_DISCONNECTED;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; 连接成功的GATT</span><br><span class="line">    mBluetoothGatt.disconnect();</span><br><span class="line">    mBluetoothGatt.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多设备连接"><a href="#多设备连接" class="headerlink" title="多设备连接"></a>多设备连接</h2><p>蓝牙适配器没有听过连接多个设备的接口，需要自己实现，即获取到目标设备的address后调用连接方法</p><blockquote><p>蓝牙操作的注意事项<br>蓝牙的写入操作( 包括 Descriptor 的写入操作), 读取操作必须序列化进行. 写入数据和读取数据是不能同时进行的, 如果调用了写入数据的方法, 马上调用又调用写入数据或者读取数据的方法,第二次调用的方法会立即返回 false, 代表当前无法进行操作. 详情可以参考 <a href="http://a1anwang.com/post-18.html">蓝牙读写操作返回 false，为什么多次读写只有一次回调？</a><br>Android 连接外围设备的数量有限，当不需要连接蓝牙设备的时候，必须调用 BluetoothGatt#close 方法释放资源。详细的参考可以看这里 <a href="http://www.eoeandroid.com/thread-902192-1-1.html?_dsign=d85c38ec">Android BLE 蓝牙开发的各种坑</a><br>蓝牙 API 连接蓝牙设备的超时时间大概在 20s 左右，具体时间看系统实现。有时候某些设备进行蓝牙连接的时间会很长，大概十多秒。如果自己手动设置了连接超时时间（例如通过 Handler#postDelay 设置了 5s 后没有进入 BluetoothGattCallback#onConnectionStateChange 就执行 BluetoothGatt#close 操作强制释放断开连接释放资源）在某些设备上可能会导致接下来几次的连接尝试都会在 BluetoothGattCallback#onConnectionStateChange 返回 state == 133。另外可以参考这篇吐槽 <a href="http://www.loverobots.cn/android-ble-connection-solution-bluetoothgatt-status-133.html">Android 中 BLE 连接出现“BluetoothGatt status 133”的解决方法</a><br>所有的蓝牙操作使用 Handler 固定在一条线程操作，这样能省去很多因为线程不同步导致的麻烦</p></blockquote><h3 id="重要实例"><a href="#重要实例" class="headerlink" title="重要实例"></a>重要实例</h3><p>经典蓝牙聊天实例：<a href="https://github.com/googlesamples/android-BluetoothChat">https://github.com/googlesamples/android-BluetoothChat</a><br>低功耗蓝牙：<a href="https://github.com/googlesamples/android-BluetoothLeGatt">https://github.com/googlesamples/android-BluetoothLeGatt</a><br>作为外设（API&gt;=21）：<a href="https://github.com/googlesamples/android-BluetoothAdvertisements">https://github.com/googlesamples/android-BluetoothAdvertisements</a><br>基础概念讲解：<a href="http://blog.csdn.net/qinxiandiqi/article/details/40741269">http://blog.csdn.net/qinxiandiqi/article/details/40741269</a><br>深入理论:<a href="http://www.race604.com/android-ble-in-action/">http://www.race604.com/android-ble-in-action/</a><br>AndroidBLE蓝牙框架，包括扫描、连接、设置通知、发送数据、读取、接收数据和OTA升级以及各种直观的回调:<br><a href="https://github.com/Alex-Jerry/Android-BLE">https://github.com/Alex-Jerry/Android-BLE</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BLE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android BLE蓝牙之Peripheral</title>
      <link href="/blog/2018/09/04/Android-BLE%E8%93%9D%E7%89%99%E4%B9%8BPeripheral/"/>
      <url>/blog/2018/09/04/Android-BLE%E8%93%9D%E7%89%99%E4%B9%8BPeripheral/</url>
      
        <content type="html"><![CDATA[<p>Android 5.0（API 21）之前不能当成外设(蓝牙耳机、音响等)来使用，只能作为中心即主机<br>并不是Android 5.0的系统就可以支持BLE Peripheral，这个和硬件也是有关系的,谷歌从ANdroid 5.0系统SDK已经开始支持check手机是否支持BLE Peripheral</p><h2 id="声明蓝牙开发权限"><a href="#声明蓝牙开发权限" class="headerlink" title="声明蓝牙开发权限"></a>声明蓝牙开发权限</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;uses-permission android:name&#x3D;&quot;android.permission.BLUETOOTH&quot;&#x2F;&gt;</span><br><span class="line">&lt;uses-permission android:name&#x3D;&quot;android.permission.BLUETOOTH_ADMIN&quot;&#x2F;&gt;</span><br><span class="line">&#x2F;&#x2F; 是否必须支持低功耗蓝牙，此处必须</span><br><span class="line"> &lt;uses-feature</span><br><span class="line">    android:name&#x3D;&quot;android.hardware.bluetooth_le&quot;</span><br><span class="line">    android:required&#x3D;&quot;true&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure><h2 id="检查是否支持BLE、BLE-Peripheral"><a href="#检查是否支持BLE、BLE-Peripheral" class="headerlink" title="检查是否支持BLE、BLE Peripheral"></a>检查是否支持BLE、BLE Peripheral</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">    &#x2F;**</span><br><span class="line">     * 首先检查是否支持BLE、BLE Peripheral</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private void init() &#123;</span><br><span class="line">        if (!getPackageManager().hasSystemFeature(PackageManager.FEATURE_BLUETOOTH_LE)) &#123;</span><br><span class="line">            Toast.makeText(this, &quot;BLE not supported&quot;, Toast.LENGTH_LONG).show();</span><br><span class="line">&#x2F;&#x2F;            finish();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mBluetoothManager &#x3D; (BluetoothManager) getSystemService(BLUETOOTH_SERVICE);</span><br><span class="line">        mBluetoothAdapter &#x3D; mBluetoothManager.getAdapter();</span><br><span class="line"></span><br><span class="line">        if (mBluetoothAdapter &#x3D;&#x3D; null) &#123;</span><br><span class="line">            Toast.makeText(this, &quot;Bluetooth not supported&quot;, Toast.LENGTH_LONG).show();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (!mBluetoothAdapter.isEnabled()) &#123;</span><br><span class="line">            Intent enableBtIntent &#x3D; new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);</span><br><span class="line">            startActivityForResult(enableBtIntent, REQUEST_ENABLE_BT);</span><br><span class="line">            &#x2F;&#x2F;判断是否打开蓝牙,如果没有打开需要回调打开蓝牙,这里省略,请自行打开蓝牙</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (!mBluetoothAdapter.isMultipleAdvertisementSupported()) &#123;</span><br><span class="line">            Toast.makeText(this, &quot;This device not support peripheral&quot;, Toast.LENGTH_SHORT).show();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mBluetoothLeAdvertiser &#x3D; mBluetoothAdapter.getBluetoothLeAdvertiser();</span><br><span class="line">        if (mBluetoothLeAdvertiser &#x3D;&#x3D; null) &#123;</span><br><span class="line">            Toast.makeText(this, &quot;This device not support peripheral&quot;, Toast.LENGTH_SHORT).show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="准备发送广播"><a href="#准备发送广播" class="headerlink" title="准备发送广播"></a>准备发送广播</h2><h3 id="发送广播"><a href="#发送广播" class="headerlink" title="发送广播"></a>发送广播</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mBluetoothLeAdvertiser.startAdvertising(createAdvSettings(true, 0), createAdvertiseData(), mAdvertiseCallback);</span><br></pre></td></tr></table></figure><h3 id="广播设置参数AdvertiseSettings"><a href="#广播设置参数AdvertiseSettings" class="headerlink" title="广播设置参数AdvertiseSettings"></a>广播设置参数AdvertiseSettings</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;** create AdvertiseSettings *&#x2F;</span><br><span class="line"> public static AdvertiseSettings createAdvSettings(boolean connectable, int timeoutMillis) &#123;</span><br><span class="line"> AdvertiseSettings.Builder mSettingsbuilder &#x3D; new AdvertiseSettings.Builder();</span><br><span class="line"> mSettingsbuilder.setAdvertiseMode(AdvertiseSettings.ADVERTISE_MODE_BALANCED);</span><br><span class="line"> mSettingsbuilder.setConnectable(connectable);</span><br><span class="line"> mSettingsbuilder.setTimeout(timeoutMillis);</span><br><span class="line"> mSettingsbuilder.setTxPowerLevel(AdvertiseSettings.ADVERTISE_TX_POWER_HIGH);</span><br><span class="line"> AdvertiseSettings mAdvertiseSettings &#x3D; mSettingsbuilder.build();</span><br><span class="line">if(mAdvertiseSettings &#x3D;&#x3D; null)&#123;</span><br><span class="line">if(D)&#123;</span><br><span class="line">Toast.makeText(mContext, &quot;mAdvertiseSettings &#x3D;&#x3D; null&quot;, Toast.LENGTH_LONG).show();</span><br><span class="line">Log.e(TAG,&quot;mAdvertiseSettings &#x3D;&#x3D; null&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return mAdvertiseSettings;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="广播数据AdvertiseData"><a href="#广播数据AdvertiseData" class="headerlink" title="广播数据AdvertiseData"></a>广播数据AdvertiseData</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public static AdvertiseData createAdvertiseData()&#123; </span><br><span class="line"> AdvertiseData.Builder    mDataBuilder &#x3D; new AdvertiseData.Builder();</span><br><span class="line">mDataBuilder.addServiceUuid(ParcelUuid.fromString(HEART_RATE_SERVICE));</span><br><span class="line">AdvertiseData mAdvertiseData &#x3D; mDataBuilder.build();</span><br><span class="line">if(mAdvertiseData&#x3D;&#x3D;null)&#123;</span><br><span class="line">if(D)&#123;</span><br><span class="line">Toast.makeText(mContext, &quot;mAdvertiseSettings &#x3D;&#x3D; null&quot;, Toast.LENGTH_LONG).show();</span><br><span class="line">Log.e(TAG,&quot;mAdvertiseSettings &#x3D;&#x3D; null&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return mAdvertiseData;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="广播回调Callback"><a href="#广播回调Callback" class="headerlink" title="广播回调Callback"></a>广播回调Callback</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">private AdvertiseCallback mAdvertiseCallback &#x3D; new AdvertiseCallback() &#123;</span><br><span class="line">@Override</span><br><span class="line">  public void onStartSuccess(AdvertiseSettings settingsInEffect) &#123;</span><br><span class="line">super.onStartSuccess(settingsInEffect);</span><br><span class="line"> if (settingsInEffect !&#x3D; null) &#123;</span><br><span class="line"> Log.d(TAG, &quot;onStartSuccess TxPowerLv&#x3D;&quot; + settingsInEffect.getTxPowerLevel() + &quot; mode&#x3D;&quot; + settingsInEffect.getMode()</span><br><span class="line"> + &quot; timeout&#x3D;&quot; + settingsInEffect.getTimeout());</span><br><span class="line"> &#125; else &#123;</span><br><span class="line"> Log.e(TAG, &quot;onStartSuccess, settingInEffect is null&quot;);</span><br><span class="line"> &#125;</span><br><span class="line">showText(&quot;1. initGattServer Success&quot;);</span><br><span class="line"> Log.e(TAG,&quot;onStartSuccess settingsInEffect&quot; + settingsInEffect);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void onStartFailure(int errorCode) &#123;</span><br><span class="line">super.onStartFailure(errorCode);</span><br><span class="line">showText(&quot;1. initGattServer failed&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="广播关闭"><a href="#广播关闭" class="headerlink" title="广播关闭"></a>广播关闭</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">private void stopAdvertise() &#123;</span><br><span class="line"> if (mBluetoothLeAdvertiser !&#x3D; null) &#123;</span><br><span class="line"> mBluetoothLeAdvertiser.stopAdvertising(mAdvertiseCallback);</span><br><span class="line"> mBluetoothLeAdvertiser &#x3D; null;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>附上代码地址: <a href="https://github.com/xmaihh/Android-BLEPeripheral">https://github.com/xmaihh/Android-BLEPeripheral</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BLE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android BLE蓝牙简介</title>
      <link href="/blog/2018/09/02/Android-BLE%E8%93%9D%E7%89%99%E7%AE%80%E4%BB%8B/"/>
      <url>/blog/2018/09/02/Android-BLE%E8%93%9D%E7%89%99%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>android 从4.3系统开始可以连接BLE设备,iOS是从7.0版本开始支持BLE<br>android 从5.0系统开始可以模拟设备发出BLE广播,这个新功能是对标于iOS系统的手机模拟iBeacon设备<br>BLE设备之所以能被手机扫描到,是因为BLE设备在每隔一段时间广播一次,这个广播里面包含很多数据<br>并不是Android L的系统就可以支持BLE Peripheral，这个和硬件也是有关系的,谷歌从5.0系统SDK已经开始支持check手机是否支持BLE Peripheral<br>在Android 5.0 API 21 android.bluetooth.le包下，新增加 Scaner相关类和 Advertiser 相关类,大致结构如下：</p><ul><li>Android BLE 周边设备 （Peripheral）可以通过 Advertiser 相关类实现操作； </li><li>Android BLE 中心设备 （Central）可以通过 Scanner相关类实现蓝牙扫描； </li><li>Android BLE 建立中心连接的时候，使用 BlueToothDevice#connectGatt() 实现</li></ul><h2 id="Central-和-Peripheral"><a href="#Central-和-Peripheral" class="headerlink" title="Central 和 Peripheral"></a>Central 和 Peripheral</h2><h3 id="蓝牙通信规则"><a href="#蓝牙通信规则" class="headerlink" title="蓝牙通信规则"></a>蓝牙通信规则</h3><p>Bluetooth BLE 的交互有两个角色 ： Central 与 Peripheral 。可以对比传统的CS结构，理解为客户端-服务端结构。</p><ul><li>服务端 （外围设备）： Peripheral 通常具有其他设备所需要的数据，即数据提供服务；</li><li>客户端（中心设备）：Central 通常通过使用Perpheral 的信息来实现一些特定的功能 ;</li></ul><h3 id="Central-发现并连接广播中的-Peripheral"><a href="#Central-发现并连接广播中的-Peripheral" class="headerlink" title="Central 发现并连接广播中的 Peripheral"></a>Central 发现并连接广播中的 Peripheral</h3><p>在BLE中 ，Peripheral 通过广播的方式向Central提供数据是主要方式。主要操作如下：</p><ul><li>服务端 外围设备（Peripheral）： 向外广播数据包（Advertising）形式的数据，比如设备名称，功能等;</li><li>客户端 中心设备（Central ） ： 可以通过实现扫描和监听到广播数据包，并展示数据;</li></ul><h3 id="外围设备（Peripheral-）数据构成"><a href="#外围设备（Peripheral-）数据构成" class="headerlink" title="外围设备（Peripheral ）数据构成"></a>外围设备（Peripheral ）数据构成</h3><ul><li>Peripheral 包含一个或者多个Service（服务）以及有关其连接信号强度的有用信息 。</li><li>Service ：是指为了实现一个功能或者特性的数据采集和相关行为的集合，包含一个或多个特征（Characteristic）。</li><li>Characteristic ：它包括一个value和0至多个对次value的描述（Descriptor），知道更多数据细节。</li><li>Descriptor ： 对Characteristic的描述，例如范围、计量单位等<h2 id="Central-与-Peripheral-通信"><a href="#Central-与-Peripheral-通信" class="headerlink" title="Central 与 Peripheral 通信"></a>Central 与 Peripheral 通信</h2>在 Central 与 Perpheral 建立连接后，就可以发现（discoverServices）Perpheral 提供的所有的Services和Characteristic 。然后，Central 可以通过读写Service中的Characteristic 的value与Perpheral进行通信<h3 id="Central-（中心设备）开发流程"><a href="#Central-（中心设备）开发流程" class="headerlink" title="Central （中心设备）开发流程"></a>Central （中心设备）开发流程</h3></li></ul><ol><li><p>建立中心角色<br>确定中心角色，客户端确立。</p></li><li><p>扫描 外设<br>扫描设备：Android 5.0 以下使用 BluetoothAdapter#startLeScan() 实现扫描，Android5.0及其以上，使用android.bluetooth.le 包下 BluetoothLeScaner#startScan()实现。</p></li><li><p>建立连接<br>中心设备主要的类 BluetoothGatt 核心对象，通过 BlueToothDevice#connectGatt（） 可以获取到操作对象</p></li><li><p>获取services与characteristics<br>在连接设备的时候，会使用BluetoothGattCallback 进行一些数据返回和状态返回，当连接成功时，进行discoverservices </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void onConnectionStateChange(BluetoothGatt gatt, int status, int newState) &#123;</span><br><span class="line">    if (newState &#x3D;&#x3D; BluetoothGatt.STATE_CONNECTED) &#123;</span><br><span class="line">        gatt.discoverServices();</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">public void onServicesDiscovered(BluetoothGatt gatt, int status) &#123;</span><br><span class="line">    super.onServicesDiscovered(gatt, status);</span><br><span class="line">    &#x2F;&#x2F;当调用 discoverServices的时候，会调用此方法</span><br><span class="line">    printServices(gatt);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>与外设设备交互和订阅 Characteristic 通知</p></li><li><p>断开连接 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public void disconnect() &#123;</span><br><span class="line">    if (mBluetoothGatt !&#x3D; null) &#123;</span><br><span class="line">        mBluetoothGatt.disconnect();</span><br><span class="line">        mBluetoothGatt.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="Peripheral（外围设备）开发流程"><a href="#Peripheral（外围设备）开发流程" class="headerlink" title="Peripheral（外围设备）开发流程"></a>Peripheral（外围设备）开发流程</h3><ol><li><p>确定外围设备</p></li><li><p>初始化外围设备管理对象<br>Android 5.0 之前没有外围设备开发，目前使用 BluetoothLeAdvertiser 进行外围设备管理；可以通过下面的方法获取 BluetoothAdapter#getBluetoothLeAdvertiser() 可以获取到该对象。</p></li><li><p>打开外围广播<br>根据SERIVE_UUID，打开一个外围设备连接，通过下面类实现BluetoothLeAdvertiser#startAdvertising();</p></li><li><p>获取外围设备Server<br>通过BluetoothGattServer 进行订阅通知，读写Characteristic操作，通过下面方法获取。<br>mBluetoothManager.openGattServer(mContext, bluetoothGattServerCallback)</p></li></ol><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p>后续会推出Android-BLE蓝牙之Peripheral和Android-BLE蓝牙之Central详细记录BLE蓝牙作为中心设备和外围设备开发<br><a href="https://developer.android.google.cn/reference/android/bluetooth/le/AdvertiseData.html">https://developer.android.google.cn/reference/android/bluetooth/le/AdvertiseData.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BLE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android串口通信</title>
      <link href="/blog/2018/08/23/Android%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/"/>
      <url>/blog/2018/08/23/Android%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<h3 id="开发环境："><a href="#开发环境：" class="headerlink" title="开发环境："></a>开发环境：</h3><ul><li>AndroidStudio3.1.4</li><li>JDK_1.8.0_152_release</li><li>Compile Sdk Version API28</li><li>Gradle 4.4</li><li>NDK 17.1.4828580</li></ul><p>Android与下位机通信，串口通信是比较常见的一种方案。Google官方提供了一个项目<a href="https://code.google.com/archive/p/android-serialport-api/">android-serialport-api</a>用来读取和写入Linux TTY串行端口<br>支持的功能包括：<em>列出设备上可用的串行端口，包括USB到串行适配器</em>配置串行端口（波特率，停止位，权限，…）*提供标准InputStream和OutputStream Java接口<br>代码库地址<a href="https://github.com/cepr/android-serialport-api">https://github.com/cepr/android-serialport-api</a></p><p>AndroidStudio3.1使用CMake来编译jni</p><p>1.下载<a href="https://github.com/cepr/android-serialport-api">https://github.com/cepr/android-serialport-api</a>到本地。<br>在项目名/app/src/main/java下创建android_serialport_api目录(目录名不要改)<br>将android-serialport-api/android-serialport-api/project/src/android_serialport_api/目录下的SerialPort.java和SerialPortFinder.java复制到android_serialport_api目录下<br>SerialPortFinder.java 用于查找串口设备<br>SerialPort.java 用于jni方法调用</p><p>2.创建JNI目录，复制c文件<br>在main目录右键New—Folder—JNI Floder—Finish<br>将SerialPort.c和SerialPort.h复制到生成的cpp目录下<br>使用CMake只需要修改cpp文件和CMakeLists.txt。<br>CMake生成的cpp文件位于app/src/main/cpp目录，并且cpp文件不需要再引入java类的h文件。<br>CMakeLists.txt位于app目录下<br>特别注意SerialPort.h文件的生成格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;* DO NOT EDIT THIS FILE - it is machine generated *&#x2F;</span><br><span class="line">#include &lt;jni.h&gt;</span><br><span class="line">&#x2F;* Header for class android_serialport_api_SerialPort *&#x2F;</span><br><span class="line"></span><br><span class="line">#ifndef _Included_android_serialport_api_SerialPort</span><br><span class="line">#define _Included_android_serialport_api_SerialPort</span><br><span class="line">#ifdef __cplusplus</span><br><span class="line">extern &quot;C&quot; &#123;</span><br><span class="line">#endif</span><br><span class="line">&#x2F;*</span><br><span class="line"> * Class:     android_serialport_api_SerialPort</span><br><span class="line"> * Method:    open</span><br><span class="line"> * Signature: (Ljava&#x2F;lang&#x2F;String;II)Ljava&#x2F;io&#x2F;FileDescriptor;</span><br><span class="line"> *&#x2F;                       &#x2F;&#x2F; 命名格式: Java_包名_类目录_类名_接口</span><br><span class="line"> &#x2F;&#x2F; 通过执行 &#96;javah -jni android_serialport_api_SerialPort&#96;生成的.h文件</span><br><span class="line">JNIEXPORT jobject JNICALL Java_android_1serialport_1api_SerialPort_open</span><br><span class="line">  (JNIEnv *, jclass, jstring, jint, jint);</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line"> * Class:     android_serialport_api_SerialPort</span><br><span class="line"> * Method:    close</span><br><span class="line"> * Signature: ()V</span><br><span class="line"> *&#x2F;</span><br><span class="line">JNIEXPORT void JNICALL Java_android_1serialport_1api_SerialPort_close</span><br><span class="line">  (JNIEnv *, jobject);</span><br><span class="line"></span><br><span class="line">#ifdef __cplusplus</span><br><span class="line">&#125;</span><br><span class="line">#endif</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure><p>3.修改modue的build.gradle，设置JNI<br>在defaultConfig段落添加cmake设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion 28</span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        applicationId &quot;com.ex.serialport&quot;</span><br><span class="line">        minSdkVersion 15</span><br><span class="line">        targetSdkVersion 28</span><br><span class="line">        versionCode 1</span><br><span class="line">        versionName &quot;1.0&quot;</span><br><span class="line">        testInstrumentationRunner &quot;android.support.test.runner.AndroidJUnitRunner&quot;</span><br><span class="line">        &#x2F;&#x2F; 添加CMake设置 start &#x2F;&#x2F;</span><br><span class="line">        externalNativeBuild &#123;</span><br><span class="line">            cmake &#123;</span><br><span class="line">                cppFlags &quot;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F; 添加CMake设置 end&#x2F;&#x2F;</span><br><span class="line">    &#125;</span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            minifyEnabled false</span><br><span class="line">            proguardFiles getDefaultProguardFile(&#39;proguard-android.txt&#39;), &#39;proguard-rules.pro&#39;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; 添加CMake设置 start &#x2F;&#x2F;</span><br><span class="line">    externalNativeBuild &#123;</span><br><span class="line">        cmake &#123;</span><br><span class="line">            path &quot;CMakeLists.txt&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; 添加CMake设置 end &#x2F;&#x2F;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.由于API 19之后的 termios.h 里面的函数有调整，因此调试过程中，出现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.lang.UnsatisfiedLinkError: dlopen failed: cannot locate symbol &quot;tcgetattr&quot; referenced by &quot;libserialport.so&quot;...</span><br></pre></td></tr></table></figure><p>解决方法：</p><p>将API 19 的 termios.h 拷贝到 jni 目录下<br>termios.h</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line"> * Copyright (C) 2008 The Android Open Source Project</span><br><span class="line"> * All rights reserved.</span><br><span class="line"> *</span><br><span class="line"> * Redistribution and use in source and binary forms, with or without</span><br><span class="line"> * modification, are permitted provided that the following conditions</span><br><span class="line"> * are met:</span><br><span class="line"> *  * Redistributions of source code must retain the above copyright</span><br><span class="line"> *    notice, this list of conditions and the following disclaimer.</span><br><span class="line"> *  * Redistributions in binary form must reproduce the above copyright</span><br><span class="line"> *    notice, this list of conditions and the following disclaimer in</span><br><span class="line"> *    the documentation and&#x2F;or other materials provided with the</span><br><span class="line"> *    distribution.</span><br><span class="line"> *</span><br><span class="line"> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS</span><br><span class="line"> * &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT</span><br><span class="line"> * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS</span><br><span class="line"> * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE</span><br><span class="line"> * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,</span><br><span class="line"> * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,</span><br><span class="line"> * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS</span><br><span class="line"> * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED</span><br><span class="line"> * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,</span><br><span class="line"> * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT</span><br><span class="line"> * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF</span><br><span class="line"> * SUCH DAMAGE.</span><br><span class="line"> *&#x2F;</span><br><span class="line">#ifndef _TERMIOS_H_</span><br><span class="line">#define _TERMIOS_H_</span><br><span class="line"></span><br><span class="line">#include &lt;sys&#x2F;cdefs.h&gt;</span><br><span class="line">#include &lt;sys&#x2F;ioctl.h&gt;</span><br><span class="line">#include &lt;sys&#x2F;types.h&gt;</span><br><span class="line">#include &lt;stdint.h&gt;</span><br><span class="line">#include &lt;linux&#x2F;termios.h&gt;</span><br><span class="line"></span><br><span class="line">__BEGIN_DECLS</span><br><span class="line"></span><br><span class="line">&#x2F;* Redefine these to match their ioctl number *&#x2F;</span><br><span class="line">#undef  TCSANOW</span><br><span class="line">#define TCSANOW    TCSETS</span><br><span class="line"></span><br><span class="line">#undef  TCSADRAIN</span><br><span class="line">#define TCSADRAIN  TCSETSW</span><br><span class="line"></span><br><span class="line">#undef  TCSAFLUSH</span><br><span class="line">#define TCSAFLUSH  TCSETSF</span><br><span class="line"></span><br><span class="line">static __inline__ int tcgetattr(int fd, struct termios *s)</span><br><span class="line">&#123;</span><br><span class="line">    return ioctl(fd, TCGETS, s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static __inline__ int tcsetattr(int fd, int __opt, const struct termios *s)</span><br><span class="line">&#123;</span><br><span class="line">    return ioctl(fd, __opt, (void *)s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static __inline__ int tcflow(int fd, int action)</span><br><span class="line">&#123;</span><br><span class="line">    return ioctl(fd, TCXONC, (void *)(intptr_t)action);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static __inline__ int tcflush(int fd, int __queue)</span><br><span class="line">&#123;</span><br><span class="line">    return ioctl(fd, TCFLSH, (void *)(intptr_t)__queue);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static __inline__ pid_t tcgetsid(int fd)</span><br><span class="line">&#123;</span><br><span class="line">    pid_t _pid;</span><br><span class="line">    return ioctl(fd, TIOCGSID, &amp;_pid) ? (pid_t)-1 : _pid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static __inline__ int tcsendbreak(int fd, int __duration)</span><br><span class="line">&#123;</span><br><span class="line">    return ioctl(fd, TCSBRKP, (void *)(uintptr_t)__duration);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static __inline__ speed_t cfgetospeed(const struct termios *s)</span><br><span class="line">&#123;</span><br><span class="line">    return (speed_t)(s-&gt;c_cflag &amp; CBAUD);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static __inline__ int cfsetospeed(struct termios *s, speed_t  speed)</span><br><span class="line">&#123;</span><br><span class="line">    s-&gt;c_cflag &#x3D; (s-&gt;c_cflag &amp; ~CBAUD) | (speed &amp; CBAUD);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static __inline__ speed_t cfgetispeed(const struct termios *s)</span><br><span class="line">&#123;</span><br><span class="line">    return (speed_t)(s-&gt;c_cflag &amp; CBAUD);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static __inline__ int cfsetispeed(struct termios *s, speed_t  speed)</span><br><span class="line">&#123;</span><br><span class="line">    s-&gt;c_cflag &#x3D; (s-&gt;c_cflag &amp; ~CBAUD) | (speed &amp; CBAUD);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static __inline__ void cfmakeraw(struct termios *s)</span><br><span class="line">&#123;</span><br><span class="line">    s-&gt;c_iflag &amp;&#x3D; ~(IGNBRK|BRKINT|PARMRK|ISTRIP|INLCR|IGNCR|ICRNL|IXON);</span><br><span class="line">    s-&gt;c_oflag &amp;&#x3D; ~OPOST;</span><br><span class="line">    s-&gt;c_lflag &amp;&#x3D; ~(ECHO|ECHONL|ICANON|ISIG|IEXTEN);</span><br><span class="line">    s-&gt;c_cflag &amp;&#x3D; ~(CSIZE|PARENB);</span><br><span class="line">    s-&gt;c_cflag |&#x3D; CS8;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">__END_DECLS</span><br><span class="line"></span><br><span class="line">#endif &#x2F;* _TERMIOS_H_ *&#x2F;</span><br></pre></td></tr></table></figure><p>5.编辑 CMake 脚本CMakeLists.txt<br>每次创建一个新的库，需要添加另一个 add_library() 脚本，每个add_library 脚本语句只能导入一个库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">add_library(serial_port</span><br><span class="line">            SHARED</span><br><span class="line">            src&#x2F;main&#x2F;cpp&#x2F;SerialPort.c)</span><br></pre></td></tr></table></figure><p>如果同步报 Log 日志异常则需要给 .c 文件导入 Log 库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 该语句可以给一个 .c 库文件导入多个依赖库</span><br><span class="line">target_link_libraries( # Specifies the target library.</span><br><span class="line">                       # add_library 生成的</span><br><span class="line">                       serialport</span><br><span class="line"></span><br><span class="line">                       # Links the target library to the log library</span><br><span class="line">                       # included in the NDK.</span><br><span class="line">                       # find_library 找到的系统库</span><br><span class="line">                       $&#123;log-lib&#125; )</span><br></pre></td></tr></table></figure><p>默认是已经有导入 log-lib 库的，如果没有的话则需要在上面代码之前导入 log-lib 库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># find_library 定义当前代码库需要依赖的系统或者第三方库文件</span><br><span class="line">find_library( # Sets the name of the path variable.</span><br><span class="line">              # 指定要查找的系统库, 给一个名字</span><br><span class="line">              log-lib</span><br><span class="line"></span><br><span class="line">              # Specifies the name of the NDK library that</span><br><span class="line">              # you want CMake to locate.</span><br><span class="line">              # 真正要查找的liblog.so或者liblog.a</span><br><span class="line">              log )</span><br></pre></td></tr></table></figure><p>6.编译运行，生成.so文件<br>.so文件在 \项目\app\build\intermediates\cmake\下release或者debug的obj目录下arm64-v8a、armeabi-v7a、x86、x86_64</p><h2 id="串口的参数"><a href="#串口的参数" class="headerlink" title="串口的参数"></a>串口的参数</h2><p>串口中有五个重要的参数：串口设备名、波特率、奇偶校验位、数据位、停止位。</p><p>设备名称：串口的名称。<br>波特率：传输速率的参数，波特率和传输距离成反比。<br>校验位：在串口通信中一种简单的检错方式，有四种检错方式：偶、奇、高和低，允许无校验位。<br>数据位：通信中实际数据位的参数<br>停止位：用于表示单个包的最后一位。</p><p>其中检验位一般默认位NONE，数据位一般默认为8，停止位默认为1，校验位是为了减少误差的会根据奇、偶进行补位操作</p><h2 id="Android-串口通信"><a href="#Android-串口通信" class="headerlink" title="Android 串口通信"></a>Android 串口通信</h2><p>Android 主板在与其它硬件进行串口通信时，串口作为底层实现，Android 系统把设备作为一个文件，与其他设备进行串口通信就相当于读写此文件。<br>所以，串口通信其实就是对系统根目录下 /proc/tty/drivers 文件进行流的读写，因此，串口读写需要 Android 系统 Root 权限。<br>用 串口线 连接开发板 和 PC，然后在串口调试工具中，打开对应位置的端口。如果提示失败，就要检查串口线的端口号是否正确。</p><p>用数据线连接开发板至 PC，用 adb 命令打开 Android 系统对应的串口文件。<br>以 root 权限进入系统，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb shell</span><br><span class="line">su</span><br></pre></td></tr></table></figure><p>然后，更改串口文件ttyS3的读写权限，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 777 &#x2F;dev&#x2F;ttyS3</span><br></pre></td></tr></table></figure><p>最后，写入信息 1111  到串口文件ttyS3里</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo 1111 &gt; &#x2F;dev&#x2F;ttyS3</span><br></pre></td></tr></table></figure><p>观察 PC 上的串口调试工具，如果 PC 上能收到信息，说明调通了，那么就可以进行应用开发<br><a href="https://github.com/xmaihh/SerialportDemo">源码地址</a><br>PC端调试工具<a href="https://github.com/xmaihh/SerialportDemo/blob/master/serial_port_utility_latest.exe">友善串口调试工具</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Jni </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ADB录屏命令</title>
      <link href="/blog/2018/07/30/ADB%E5%BD%95%E5%B1%8F%E5%91%BD%E4%BB%A4/"/>
      <url>/blog/2018/07/30/ADB%E5%BD%95%E5%B1%8F%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h3 id="开始录制命令"><a href="#开始录制命令" class="headerlink" title="开始录制命令"></a>开始录制命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell screenrecord &#x2F;sdcard&#x2F;demo.mp4</span><br></pre></td></tr></table></figure><h3 id="限制录制时间"><a href="#限制录制时间" class="headerlink" title="限制录制时间"></a>限制录制时间</h3><p>参数: –time-limit</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell screenrecord  --time-limit 10 &#x2F;sdcard&#x2F;demo.mp4</span><br></pre></td></tr></table></figure><p>说明:限制视频录制时间为10s,如果不限制,默认180s</p><h3 id="指定视频分辨率大小"><a href="#指定视频分辨率大小" class="headerlink" title="指定视频分辨率大小"></a>指定视频分辨率大小</h3><p>参数: –size</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell screenrecord --size 1280*720 &#x2F;sdcard&#x2F;demo.mp4</span><br></pre></td></tr></table></figure><p>说明:录制视频，分辨率为<code>1280*720</code>，如果不指定默认使用手机的分辨率,为获得最佳效果，请使用设备上的高级视频编码(AVC)支持的大小</p><h3 id="指定视频的比特率"><a href="#指定视频的比特率" class="headerlink" title="指定视频的比特率"></a>指定视频的比特率</h3><p>参数: –bit-rate</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell screenrecord --bit-rate 6000000 &#x2F;sdcard&#x2F;demo.mp4</span><br></pre></td></tr></table></figure><p>说明:指定视频的比特率为6Mbps,如果不指定,默认为4Mbps. 你可以增加比特率以提高视频质量或为了让文件更小而降低比特率</p><h3 id="在命令行显示log"><a href="#在命令行显示log" class="headerlink" title="在命令行显示log"></a>在命令行显示log</h3><p>参数: –verbose</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">~$ adb shell screenrecord --time-limit 10 --verbose &#x2F;sdcard&#x2F;demo.mp4</span><br><span class="line">Main display is 1080x1920 @60.00fps (orientation&#x3D;0)</span><br><span class="line">Configuring recorder for 1080x1920 video at 4.00Mbps</span><br><span class="line">Content area is 1080x1920 at offset x&#x3D;0 y&#x3D;0</span><br><span class="line">Time limit reached</span><br><span class="line">Encoder stopping; recorded 96 frames in 10 seconds</span><br><span class="line">Stopping encoder and muxer</span><br><span class="line">Executing: &#x2F;system&#x2F;bin&#x2F;am broadcast -a android.intent.action.MEDIA_SCANNER_SCAN_FILE -d file:&#x2F;&#x2F;&#x2F;sdcard&#x2F;demo.mp4</span><br><span class="line"> </span><br><span class="line">Broadcasting: Intent &#123; act&#x3D;android.intent.action.MEDIA_SCANNER_SCAN_FILE dat&#x3D;file:&#x2F;&#x2F;&#x2F;sdcard&#x2F;demo.mp4 &#125;</span><br><span class="line">Broadcast completed: result&#x3D;0</span><br></pre></td></tr></table></figure><h3 id="旋转90度"><a href="#旋转90度" class="headerlink" title="旋转90度"></a>旋转90度</h3><p>参数: –rotate</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell screenrecord --rotate &#x2F;sdcard&#x2F;demo.mp4</span><br></pre></td></tr></table></figure><h3 id="查看帮助命令"><a href="#查看帮助命令" class="headerlink" title="查看帮助命令"></a>查看帮助命令</h3><p>参数: –help</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">~$ adb shell screenrecord --help</span><br><span class="line">Usage: screenrecord [options] &lt;filename&gt;</span><br><span class="line"> </span><br><span class="line">Records the device&#39;s display to a .mp4 file.</span><br><span class="line"> </span><br><span class="line">Options:</span><br><span class="line">--size WIDTHxHEIGHT</span><br><span class="line">    Set the video size, e.g. &quot;1280x720&quot;.  Default is the device&#39;s main</span><br><span class="line">    display resolution (if supported), 1280x720 if not.  For best results,</span><br><span class="line">    use a size supported by the AVC encoder.</span><br><span class="line">--bit-rate RATE</span><br><span class="line">    Set the video bit rate, in megabits per second.  Default 4Mbps.</span><br><span class="line">--time-limit TIME</span><br><span class="line">    Set the maximum recording time, in seconds.  Default &#x2F; maximum is 180.</span><br><span class="line">--rotate</span><br><span class="line">    Rotate the output 90 degrees.</span><br><span class="line">--verbose</span><br><span class="line">    Display interesting information on stdout.</span><br><span class="line">--help</span><br><span class="line">    Show this message.</span><br><span class="line"> </span><br><span class="line">Recording continues until Ctrl-C is hit or the time limit is reached.</span><br></pre></td></tr></table></figure><h3 id="导出视频"><a href="#导出视频" class="headerlink" title="导出视频"></a>导出视频</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb pull &#x2F;sdcard&#x2F;demo.mp4 .&#x2F;</span><br></pre></td></tr></table></figure><p>说明:导出视频到当前目录</p><blockquote><p>Android版本要支持Android4.4(API level 19)以上<br>支持视频格式: mp4<br>录制视频的时候声音不会被录下来<br>不支持录制过程中屏幕旋转</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Android Framework </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> ADB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Launcher中Camera图标的显示与隐藏</title>
      <link href="/blog/2018/07/29/Launcher%E4%B8%ADCamera%E5%9B%BE%E6%A0%87%E7%9A%84%E6%98%BE%E7%A4%BA%E4%B8%8E%E9%9A%90%E8%97%8F/"/>
      <url>/blog/2018/07/29/Launcher%E4%B8%ADCamera%E5%9B%BE%E6%A0%87%E7%9A%84%E6%98%BE%E7%A4%BA%E4%B8%8E%E9%9A%90%E8%97%8F/</url>
      
        <content type="html"><![CDATA[<p>在camera模块的源码中我们发现DisableCameraReceiver的这样一个类，是继承自BroadcastReceiver一个广播接收器，在AndroidManifest.xml中发现这个reciver的intent-filter为<code>&lt;action android:name=&quot;android.intent.action.BOOT_COMPLETED&quot; /&gt;</code>，当系统启动之后，该模块就会收到这条系统广播，然后进行相应的处理<br>代码路径:packages/apps/Camera2/src/com/android/camera/DisableCameraReceiver.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void onReceive(Context context, Intent intent) &#123;</span><br><span class="line">    &#x2F;&#x2F; Disable camera-related activities if there is no camera.</span><br><span class="line">    boolean needCameraActivity &#x3D; CHECK_BACK_CAMERA_ONLY</span><br><span class="line">        ? hasBackCamera()</span><br><span class="line">        : hasCamera();</span><br><span class="line"></span><br><span class="line">    if (!needCameraActivity) &#123;</span><br><span class="line">        Log.i(TAG, &quot;disable all camera activities&quot;);</span><br><span class="line">        for (int i &#x3D; 0; i &lt; ACTIVITIES.length; i++) &#123;</span><br><span class="line">            disableComponent(context, ACTIVITIES[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Disable this receiver so it won&#39;t run again.</span><br><span class="line">    disableComponent(context, &quot;com.android.camera.DisableCameraReceiver&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过needCameraActivity的值来判断是否需要隐藏camera应用,如果其值为true，则显示camera应用，否则，就隐藏掉</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">private boolean hasCamera() &#123;</span><br><span class="line">    int n &#x3D; android.hardware.Camera.getNumberOfCameras();</span><br><span class="line">    Log.i(TAG, &quot;number of camera: &quot; + n);</span><br><span class="line">    return (n &gt; 0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private boolean hasBackCamera() &#123;</span><br><span class="line">    int n &#x3D; android.hardware.Camera.getNumberOfCameras();</span><br><span class="line">    CameraInfo info &#x3D; new CameraInfo();</span><br><span class="line">    for (int i &#x3D; 0; i &lt; n; i++) &#123;</span><br><span class="line">        android.hardware.Camera.getCameraInfo(i, info);</span><br><span class="line">        if (info.facing &#x3D;&#x3D; CameraInfo.CAMERA_FACING_BACK) &#123;</span><br><span class="line">            Log.i(TAG, &quot;back camera found: &quot; + i);</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Log.i(TAG, &quot;no back camera&quot;);</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过<code>frameworks/base/core/java/android/hardware/Camera.java</code>中的getNumberOfCameras()方法来获取camera的个数,这是一个本地方法，是通过JNI调用来获取的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">   * Returns the number of physical cameras available on this device.</span><br><span class="line">   *</span><br><span class="line">   * @return total number of accessible camera devices, or 0 if there are no</span><br><span class="line">   *   cameras or an error was encountered enumerating them.</span><br><span class="line">   *&#x2F;</span><br><span class="line">  public native static int getNumberOfCameras();</span><br></pre></td></tr></table></figure><p>最后在<code>frameworks/av/camera/CameraBase.cpp</code>对getNumberOfCameras()函数实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">template &lt;typename TCam, typename TCamTraits&gt;</span><br><span class="line">int CameraBase&lt;TCam, TCamTraits&gt;::getNumberOfCameras() &#123;</span><br><span class="line">    const sp&lt;ICameraService&gt; cs &#x3D; getCameraService();</span><br><span class="line"></span><br><span class="line">    if (!cs.get()) &#123;</span><br><span class="line">        &#x2F;&#x2F; as required by the public Java APIs</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    return cs-&gt;getNumberOfCameras();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>cs是CameraService的一个弱引用，找到<code>frameworks/av/services/camera/libcameraservice/CameraService.cpp</code>中的getNumberOfCameras()函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int32_t CameraService::getNumberOfCameras() &#123;</span><br><span class="line">    return mNumberOfCameras;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mNumberOfCameras是一个全局变量,在CameraService.cpp中赋值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">void CameraService::onFirstRef()</span><br><span class="line">&#123;</span><br><span class="line">    LOG1(&quot;CameraService::onFirstRef&quot;);</span><br><span class="line"></span><br><span class="line">    BnCameraService::onFirstRef();</span><br><span class="line"></span><br><span class="line">    if (hw_get_module(CAMERA_HARDWARE_MODULE_ID,</span><br><span class="line">                (const hw_module_t **)&amp;mModule) &lt; 0) &#123;</span><br><span class="line">        ALOGE(&quot;Could not load camera HAL module&quot;);</span><br><span class="line">        mNumberOfCameras &#x3D; 0;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        ALOGI(&quot;Loaded \&quot;%s\&quot; camera module&quot;, mModule-&gt;common.name);</span><br><span class="line">        mNumberOfCameras &#x3D; mModule-&gt;get_number_of_cameras();</span><br><span class="line">        if (mNumberOfCameras &gt; MAX_CAMERAS) &#123;</span><br><span class="line">            ALOGE(&quot;Number of cameras(%d) &gt; MAX_CAMERAS(%d).&quot;,</span><br><span class="line">                    mNumberOfCameras, MAX_CAMERAS);</span><br><span class="line">            mNumberOfCameras &#x3D; MAX_CAMERAS;</span><br><span class="line">        &#125;</span><br><span class="line">        for (int i &#x3D; 0; i &lt; mNumberOfCameras; i++) &#123;</span><br><span class="line">            setCameraFree(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (mModule-&gt;common.module_api_version &gt;&#x3D;</span><br><span class="line">                CAMERA_MODULE_API_VERSION_2_1) &#123;</span><br><span class="line">            mModule-&gt;set_callbacks(this);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        VendorTagDescriptor::clearGlobalVendorTagDescriptor();</span><br><span class="line"></span><br><span class="line">        if (mModule-&gt;common.module_api_version &gt;&#x3D; CAMERA_MODULE_API_VERSION_2_2) &#123;</span><br><span class="line">            setUpVendorTags();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        CameraDeviceFactory::registerService(this);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android Framework </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Camera </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android6.0授予预置APK的权限</title>
      <link href="/blog/2018/07/28/Android6-0%E6%8E%88%E4%BA%88%E9%A2%84%E7%BD%AEAPK%E7%9A%84%E6%9D%83%E9%99%90/"/>
      <url>/blog/2018/07/28/Android6-0%E6%8E%88%E4%BA%88%E9%A2%84%E7%BD%AEAPK%E7%9A%84%E6%9D%83%E9%99%90/</url>
      
        <content type="html"><![CDATA[<p>对我们系统中存在的应用进行默认权限设置,达到默认开启应用权限无需申请权限弹框的目的<br>方法1<br>修改<code>\frameworks\base\services\core\java\com\android\server\pm\PackageManagerService.java</code>，但CTS会有问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br></pre></td><td class="code"><pre><span class="line">private void grantPermissionsLPw(PackageParser.Package pkg, boolean replace,</span><br><span class="line">           String packageOfInterest) &#123;</span><br><span class="line">       &#x2F;&#x2F; IMPORTANT: There are two types of permissions: install and runtime.</span><br><span class="line">       &#x2F;&#x2F; Install time permissions are granted when the app is installed to</span><br><span class="line">       &#x2F;&#x2F; all device users and users added in the future. Runtime permissions</span><br><span class="line">       &#x2F;&#x2F; are granted at runtime explicitly to specific users. Normal and signature</span><br><span class="line">       &#x2F;&#x2F; protected permissions are install time permissions. Dangerous permissions</span><br><span class="line">       &#x2F;&#x2F; are install permissions if the app&#39;s target SDK is Lollipop MR1 or older,</span><br><span class="line">       &#x2F;&#x2F; otherwise they are runtime permissions. This function does not manage</span><br><span class="line">       &#x2F;&#x2F; runtime permissions except for the case an app targeting Lollipop MR1</span><br><span class="line">       &#x2F;&#x2F; being upgraded to target a newer SDK, in which case dangerous permissions</span><br><span class="line">       &#x2F;&#x2F; are transformed from install time to runtime ones.</span><br><span class="line"></span><br><span class="line">       final PackageSetting ps &#x3D; (PackageSetting) pkg.mExtras;</span><br><span class="line">       if (ps &#x3D;&#x3D; null) &#123;</span><br><span class="line">           return;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       PermissionsState permissionsState &#x3D; ps.getPermissionsState();</span><br><span class="line">       PermissionsState origPermissions &#x3D; permissionsState;</span><br><span class="line"></span><br><span class="line">       final int[] currentUserIds &#x3D; UserManagerService.getInstance().getUserIds();</span><br><span class="line"></span><br><span class="line">       boolean runtimePermissionsRevoked &#x3D; false;</span><br><span class="line">       int[] changedRuntimePermissionUserIds &#x3D; EMPTY_INT_ARRAY;</span><br><span class="line"></span><br><span class="line">       boolean changedInstallPermission &#x3D; false;</span><br><span class="line"></span><br><span class="line">       if (replace) &#123;</span><br><span class="line">           ps.installPermissionsFixed &#x3D; false;</span><br><span class="line">           if (!ps.isSharedUser()) &#123;</span><br><span class="line">               origPermissions &#x3D; new PermissionsState(permissionsState);</span><br><span class="line">               permissionsState.reset();</span><br><span class="line">           &#125; else &#123;</span><br><span class="line">               &#x2F;&#x2F; We need to know only about runtime permission changes since the</span><br><span class="line">               &#x2F;&#x2F; calling code always writes the install permissions state but</span><br><span class="line">               &#x2F;&#x2F; the runtime ones are written only if changed. The only cases of</span><br><span class="line">               &#x2F;&#x2F; changed runtime permissions here are promotion of an install to</span><br><span class="line">               &#x2F;&#x2F; runtime and revocation of a runtime from a shared user.</span><br><span class="line">               changedRuntimePermissionUserIds &#x3D; revokeUnusedSharedUserPermissionsLPw(</span><br><span class="line">                       ps.sharedUser, UserManagerService.getInstance().getUserIds());</span><br><span class="line">               if (!ArrayUtils.isEmpty(changedRuntimePermissionUserIds)) &#123;</span><br><span class="line">                   runtimePermissionsRevoked &#x3D; true;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       permissionsState.setGlobalGids(mGlobalGids);</span><br><span class="line"></span><br><span class="line">       final int N &#x3D; pkg.requestedPermissions.size();</span><br><span class="line">       for (int i&#x3D;0; i&lt;N; i++) &#123;</span><br><span class="line">           final String name &#x3D; pkg.requestedPermissions.get(i);</span><br><span class="line">           final BasePermission bp &#x3D; mSettings.mPermissions.get(name);</span><br><span class="line"></span><br><span class="line">           if (DEBUG_INSTALL) &#123;</span><br><span class="line">               Log.i(TAG, &quot;Package &quot; + pkg.packageName + &quot; checking &quot; + name + &quot;: &quot; + bp);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           if (bp &#x3D;&#x3D; null || bp.packageSetting &#x3D;&#x3D; null) &#123;</span><br><span class="line">               if (packageOfInterest &#x3D;&#x3D; null || packageOfInterest.equals(pkg.packageName)) &#123;</span><br><span class="line">                   Slog.w(TAG, &quot;Unknown permission &quot; + name</span><br><span class="line">                           + &quot; in package &quot; + pkg.packageName);</span><br><span class="line">               &#125;</span><br><span class="line">               continue;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           final String perm &#x3D; bp.name;</span><br><span class="line">           boolean allowedSig &#x3D; false;</span><br><span class="line">           int grant &#x3D; GRANT_DENIED;</span><br><span class="line"></span><br><span class="line">           &#x2F;&#x2F; Keep track of app op permissions.</span><br><span class="line">           if ((bp.protectionLevel &amp; PermissionInfo.PROTECTION_FLAG_APPOP) !&#x3D; 0) &#123;</span><br><span class="line">               ArraySet&lt;String&gt; pkgs &#x3D; mAppOpPermissionPackages.get(bp.name);</span><br><span class="line">               if (pkgs &#x3D;&#x3D; null) &#123;</span><br><span class="line">                   pkgs &#x3D; new ArraySet&lt;&gt;();</span><br><span class="line">                   mAppOpPermissionPackages.put(bp.name, pkgs);</span><br><span class="line">               &#125;</span><br><span class="line">               pkgs.add(pkg.packageName);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           final int level &#x3D; bp.protectionLevel &amp; PermissionInfo.PROTECTION_MASK_BASE;</span><br><span class="line">           switch (level) &#123;</span><br><span class="line">               case PermissionInfo.PROTECTION_NORMAL: &#123;</span><br><span class="line">                   &#x2F;&#x2F; For all apps normal permissions are install time ones.</span><br><span class="line">                   grant &#x3D; GRANT_INSTALL;</span><br><span class="line">               &#125; break;</span><br><span class="line"></span><br><span class="line">               case PermissionInfo.PROTECTION_DANGEROUS: &#123;</span><br><span class="line">                   if (pkg.applicationInfo.targetSdkVersion &lt;&#x3D; Build.VERSION_CODES.LOLLIPOP_MR1)&#123;</span><br><span class="line">                       &#x2F;&#x2F; For legacy apps dangerous permissions are install time ones.</span><br><span class="line">                       grant &#x3D; GRANT_INSTALL_LEGACY;</span><br><span class="line">                   &#125; else if (origPermissions.hasInstallPermission(bp.name)) &#123;</span><br><span class="line">                       &#x2F;&#x2F; For legacy apps that became modern, install becomes runtime.</span><br><span class="line">                       grant &#x3D; GRANT_UPGRADE;</span><br><span class="line">                   &#125; else if (mPromoteSystemApps</span><br><span class="line">                           &amp;&amp; isSystemApp(ps)</span><br><span class="line">                           &amp;&amp; mExistingSystemPackages.contains(ps.name)) &#123;</span><br><span class="line">                       &#x2F;&#x2F; For legacy system apps, install becomes runtime.</span><br><span class="line">                       &#x2F;&#x2F; We cannot check hasInstallPermission() for system apps since those</span><br><span class="line">                       &#x2F;&#x2F; permissions were granted implicitly and not persisted pre-M.</span><br><span class="line">                       grant &#x3D; GRANT_UPGRADE;</span><br><span class="line">                   &#125; else &#123;</span><br><span class="line">                       &#x2F;&#x2F; For modern apps keep runtime permissions unchanged.</span><br><span class="line">                       grant &#x3D; GRANT_RUNTIME;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125; break;</span><br><span class="line"></span><br><span class="line">               case PermissionInfo.PROTECTION_SIGNATURE: &#123;</span><br><span class="line">                   &#x2F;&#x2F; For all apps signature permissions are install time ones.</span><br><span class="line">                   allowedSig &#x3D; grantSignaturePermission(perm, pkg, bp, origPermissions);</span><br><span class="line">                   if (allowedSig) &#123;</span><br><span class="line">                       grant &#x3D; GRANT_INSTALL;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125; break;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           if (DEBUG_INSTALL) &#123;</span><br><span class="line">               Log.i(TAG, &quot;Package &quot; + pkg.packageName + &quot; granting &quot; + perm);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           if (grant !&#x3D; GRANT_DENIED) &#123;</span><br><span class="line">               if (!isSystemApp(ps) &amp;&amp; ps.installPermissionsFixed) &#123;</span><br><span class="line">                   &#x2F;&#x2F; If this is an existing, non-system package, then</span><br><span class="line">                   &#x2F;&#x2F; we can&#39;t add any new permissions to it.</span><br><span class="line">                   if (!allowedSig &amp;&amp; !origPermissions.hasInstallPermission(perm)) &#123;</span><br><span class="line">                       &#x2F;&#x2F; Except...  if this is a permission that was added</span><br><span class="line">                       &#x2F;&#x2F; to the platform (note: need to only do this when</span><br><span class="line">                       &#x2F;&#x2F; updating the platform).</span><br><span class="line">                       if (!isNewPlatformPermissionForPackage(perm, pkg)) &#123;</span><br><span class="line">                           grant &#x3D; GRANT_DENIED;</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               switch (grant) &#123;</span><br><span class="line">                   case GRANT_INSTALL: &#123;</span><br><span class="line">                       &#x2F;&#x2F; Revoke this as runtime permission to handle the case of</span><br><span class="line">                       &#x2F;&#x2F; a runtime permission being downgraded to an install one.</span><br><span class="line">                       for (int userId : UserManagerService.getInstance().getUserIds()) &#123;</span><br><span class="line">                           if (origPermissions.getRuntimePermissionState(</span><br><span class="line">                                   bp.name, userId) !&#x3D; null) &#123;</span><br><span class="line">                               &#x2F;&#x2F; Revoke the runtime permission and clear the flags.</span><br><span class="line">                               origPermissions.revokeRuntimePermission(bp, userId);</span><br><span class="line">                               origPermissions.updatePermissionFlags(bp, userId,</span><br><span class="line">                                     PackageManager.MASK_PERMISSION_FLAGS, 0);</span><br><span class="line">                               &#x2F;&#x2F; If we revoked a permission permission, we have to write.</span><br><span class="line">                               changedRuntimePermissionUserIds &#x3D; ArrayUtils.appendInt(</span><br><span class="line">                                       changedRuntimePermissionUserIds, userId);</span><br><span class="line">                           &#125;</span><br><span class="line">                       &#125;</span><br><span class="line">                       &#x2F;&#x2F; Grant an install permission.</span><br><span class="line">                       if (permissionsState.grantInstallPermission(bp) !&#x3D;</span><br><span class="line">                               PermissionsState.PERMISSION_OPERATION_FAILURE) &#123;</span><br><span class="line">                           changedInstallPermission &#x3D; true;</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125; break;</span><br><span class="line"></span><br><span class="line">                   case GRANT_INSTALL_LEGACY: &#123;</span><br><span class="line">                       &#x2F;&#x2F; Grant an install permission.</span><br><span class="line">                       if (permissionsState.grantInstallPermission(bp) !&#x3D;</span><br><span class="line">                               PermissionsState.PERMISSION_OPERATION_FAILURE) &#123;</span><br><span class="line">                           changedInstallPermission &#x3D; true;</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125; break;</span><br><span class="line"></span><br><span class="line">                   case GRANT_RUNTIME: &#123;</span><br><span class="line">                       &#x2F;&#x2F; Grant previously granted runtime permissions.</span><br><span class="line">                       for (int userId : UserManagerService.getInstance().getUserIds()) &#123;</span><br><span class="line">                           PermissionState permissionState &#x3D; origPermissions</span><br><span class="line">                                   .getRuntimePermissionState(bp.name, userId);</span><br><span class="line">                           final int flags &#x3D; permissionState !&#x3D; null</span><br><span class="line">                                   ? permissionState.getFlags() : 0;</span><br><span class="line">                           if (origPermissions.hasRuntimePermission(bp.name, userId)) &#123;</span><br><span class="line">                               if (permissionsState.grantRuntimePermission(bp, userId) &#x3D;&#x3D;</span><br><span class="line">                                       PermissionsState.PERMISSION_OPERATION_FAILURE) &#123;</span><br><span class="line">                                   &#x2F;&#x2F; If we cannot put the permission as it was, we have to write.</span><br><span class="line">                                   changedRuntimePermissionUserIds &#x3D; ArrayUtils.appendInt(</span><br><span class="line">                                           changedRuntimePermissionUserIds, userId);</span><br><span class="line">                               &#125;</span><br><span class="line">                           &#125;</span><br><span class="line">                           &#x2F;&#x2F; Propagate the permission flags.</span><br><span class="line">                           permissionsState.updatePermissionFlags(bp, userId, flags, flags);</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125; break;</span><br><span class="line"></span><br><span class="line">                   case GRANT_UPGRADE: &#123;</span><br><span class="line">                       &#x2F;&#x2F; Grant runtime permissions for a previously held install permission.</span><br><span class="line">                       PermissionState permissionState &#x3D; origPermissions</span><br><span class="line">                               .getInstallPermissionState(bp.name);</span><br><span class="line">                       final int flags &#x3D; permissionState !&#x3D; null ? permissionState.getFlags() : 0;</span><br><span class="line"></span><br><span class="line">                       if (origPermissions.revokeInstallPermission(bp)</span><br><span class="line">                               !&#x3D; PermissionsState.PERMISSION_OPERATION_FAILURE) &#123;</span><br><span class="line">                           &#x2F;&#x2F; We will be transferring the permission flags, so clear them.</span><br><span class="line">                           origPermissions.updatePermissionFlags(bp, UserHandle.USER_ALL,</span><br><span class="line">                                   PackageManager.MASK_PERMISSION_FLAGS, 0);</span><br><span class="line">                           changedInstallPermission &#x3D; true;</span><br><span class="line">                       &#125;</span><br><span class="line"></span><br><span class="line">                       &#x2F;&#x2F; If the permission is not to be promoted to runtime we ignore it and</span><br><span class="line">                       &#x2F;&#x2F; also its other flags as they are not applicable to install permissions.</span><br><span class="line">                       if ((flags &amp; PackageManager.FLAG_PERMISSION_REVOKE_ON_UPGRADE) &#x3D;&#x3D; 0) &#123;</span><br><span class="line">                           for (int userId : currentUserIds) &#123;</span><br><span class="line">                               if (permissionsState.grantRuntimePermission(bp, userId) !&#x3D;</span><br><span class="line">                                       PermissionsState.PERMISSION_OPERATION_FAILURE) &#123;</span><br><span class="line">                                   &#x2F;&#x2F; Transfer the permission flags.</span><br><span class="line">                                   permissionsState.updatePermissionFlags(bp, userId,</span><br><span class="line">                                           flags, flags);</span><br><span class="line">                                   &#x2F;&#x2F; If we granted the permission, we have to write.</span><br><span class="line">                                   changedRuntimePermissionUserIds &#x3D; ArrayUtils.appendInt(</span><br><span class="line">                                           changedRuntimePermissionUserIds, userId);</span><br><span class="line">                               &#125;</span><br><span class="line">                           &#125;</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125; break;</span><br><span class="line"></span><br><span class="line">                   default: &#123;</span><br><span class="line">                       if (packageOfInterest &#x3D;&#x3D; null</span><br><span class="line">                               || packageOfInterest.equals(pkg.packageName)) &#123;</span><br><span class="line">                           Slog.w(TAG, &quot;Not granting permission &quot; + perm</span><br><span class="line">                                   + &quot; to package &quot; + pkg.packageName</span><br><span class="line">                                   + &quot; because it was previously installed without&quot;);</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125; break;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125; else &#123;</span><br><span class="line">               if (permissionsState.revokeInstallPermission(bp) !&#x3D;</span><br><span class="line">                       PermissionsState.PERMISSION_OPERATION_FAILURE) &#123;</span><br><span class="line">                   &#x2F;&#x2F; Also drop the permission flags.</span><br><span class="line">                   permissionsState.updatePermissionFlags(bp, UserHandle.USER_ALL,</span><br><span class="line">                           PackageManager.MASK_PERMISSION_FLAGS, 0);</span><br><span class="line">                   changedInstallPermission &#x3D; true;</span><br><span class="line">                   Slog.i(TAG, &quot;Un-granting permission &quot; + perm</span><br><span class="line">                           + &quot; from package &quot; + pkg.packageName</span><br><span class="line">                           + &quot; (protectionLevel&#x3D;&quot; + bp.protectionLevel</span><br><span class="line">                           + &quot; flags&#x3D;0x&quot; + Integer.toHexString(pkg.applicationInfo.flags)</span><br><span class="line">                           + &quot;)&quot;);</span><br><span class="line">               &#125; else if ((bp.protectionLevel&amp;PermissionInfo.PROTECTION_FLAG_APPOP) &#x3D;&#x3D; 0) &#123;</span><br><span class="line">                   &#x2F;&#x2F; Don&#39;t print warning for app op permissions, since it is fine for them</span><br><span class="line">                   &#x2F;&#x2F; not to be granted, there is a UI for the user to decide.</span><br><span class="line">                   if (packageOfInterest &#x3D;&#x3D; null || packageOfInterest.equals(pkg.packageName)) &#123;</span><br><span class="line">                       Slog.w(TAG, &quot;Not granting permission &quot; + perm</span><br><span class="line">                               + &quot; to package &quot; + pkg.packageName</span><br><span class="line">                               + &quot; (protectionLevel&#x3D;&quot; + bp.protectionLevel</span><br><span class="line">                               + &quot; flags&#x3D;0x&quot; + Integer.toHexString(pkg.applicationInfo.flags)</span><br><span class="line">                               + &quot;)&quot;);</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">        &#x2F;&#x2F;预置apk列表</span><br><span class="line">        String[] appList &#x3D; &#123; &quot;com.dk.startbootfirst&quot;&#125;;</span><br><span class="line">        if(Arrays.asList(appList).contains(pkg.packageName)) &#123;</span><br><span class="line">            Slog.d(TAG, &quot;-------preset App&quot;);</span><br><span class="line">            final int permsSize &#x3D; pkg.requestedPermissions.size();</span><br><span class="line">            for (int i&#x3D;0; i&lt;permsSize; i++) &#123;</span><br><span class="line">                final String name &#x3D; pkg.requestedPermissions.get(i);</span><br><span class="line">                final BasePermission bp &#x3D; mSettings.mPermissions.get(name);</span><br><span class="line">                &#x2F;&#x2F;可以增加过滤权限列表，判断如果在权限列表里就授予</span><br><span class="line">                if(null !&#x3D; bp &amp;&amp; permissionsState.grantInstallPermission(bp) !&#x3D; PermissionsState.PERMISSION_OPERATION_FAILURE) &#123;</span><br><span class="line">                    Slog.d(TAG, &quot;---perm&amp;package grant permission &quot; + name</span><br><span class="line">                            + &quot; to package &quot; + pkg.packageName);</span><br><span class="line">                    changedInstallPermission &#x3D; true;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if ((changedInstallPermission || replace) &amp;&amp; !ps.installPermissionsFixed &amp;&amp;</span><br><span class="line">                !isSystemApp(ps) || isUpdatedSystemApp(ps))&#123;</span><br><span class="line">            &#x2F;&#x2F; This is the first that we have heard about this package, so the</span><br><span class="line">            &#x2F;&#x2F; permissions we have now selected are fixed until explicitly</span><br><span class="line">            &#x2F;&#x2F; changed.</span><br><span class="line">            ps.installPermissionsFixed &#x3D; true;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F; Persist the runtime permissions state for users with changes. If permissions</span><br><span class="line">        &#x2F;&#x2F; were revoked because no app in the shared user declares them we have to</span><br><span class="line">        &#x2F;&#x2F; write synchronously to avoid losing runtime permissions state.</span><br><span class="line">        for (int userId : changedRuntimePermissionUserIds) &#123;</span><br><span class="line">            mSettings.writeRuntimePermissionsForUserLPr(userId, runtimePermissionsRevoked);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br></pre></td></tr></table></figure><p>方法2<br>修改<code>frameworks/base/services/core/java/com/android/server/pm/DefaultPermissionGrantPolicy.java</code><br>举例，修改系统中应用存储空间权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">    private void grantDefaultSystemHandlerPermissions(int userId) &#123;</span><br><span class="line">        ...</span><br><span class="line">        grantStoragePermissionsToCustomApp(userId)；&#x2F;&#x2F; add </span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">private void grantStoragePermissionsToCustomApp(int userId)&#123;</span><br><span class="line">    final String []itemString &#x3D; mService.mContext.getResources()</span><br><span class="line">        .getStringArray(com.android.internal.R.array.storage_permission_custom_packagename);</span><br><span class="line">    for (int i &#x3D; 0; i &lt; itemString.length; i++) &#123;</span><br><span class="line">        PackageParser.Package customPackage &#x3D; getPackageLPr(itemString[i]);</span><br><span class="line">        if ((customPackage !&#x3D; null) &amp;&amp; doesPackageSupportRuntimePermissions(customPackage)) &#123;</span><br><span class="line">            grantRuntimePermissionsLPw(customPackage, STORAGE_PERMISSIONS, userId);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过一个xml文件讲我们需要默认打开的应用列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class="line"> </span><br><span class="line">&lt;resources xmlns:xliff&#x3D;&quot;urn:oasis:names:tc:xliff:document:1.2&quot;&gt;</span><br><span class="line"> </span><br><span class="line">&lt;string-array name&#x3D;&quot;storage_permission_custom_packagename&quot; translatable&#x3D;&quot;false&quot;&gt;</span><br><span class="line">    &lt;item&gt;com.mediatek.datatransfer&lt;&#x2F;item&gt;</span><br><span class="line">    &lt;item&gt;com.android.defcontainer&lt;&#x2F;item&gt;</span><br><span class="line">    &lt;item&gt;com.android.calendar&lt;&#x2F;item&gt;</span><br><span class="line">    &lt;item&gt;com.mediatek.camera&lt;&#x2F;item&gt;</span><br><span class="line">    &lt;item&gt;com.android.chrome&lt;&#x2F;item&gt;</span><br><span class="line">    &lt;item&gt;com.android.deskclock&lt;&#x2F;item&gt;</span><br><span class="line">    &lt;item&gt;com.android.contacts&lt;&#x2F;item&gt;</span><br><span class="line">    &lt;item&gt;com.android.development&lt;&#x2F;item&gt;</span><br><span class="line">    &lt;item&gt;com.android.email&lt;&#x2F;item&gt;</span><br><span class="line">    &lt;item&gt;com.android.fmradio&lt;&#x2F;item&gt;</span><br><span class="line">    &lt;item&gt;com.facebook.katana&lt;&#x2F;item&gt;</span><br><span class="line">    &lt;item&gt;com.mediatek.filemanager&lt;&#x2F;item&gt;</span><br><span class="line">    &lt;item&gt;com.android.gallery3d&lt;&#x2F;item&gt;</span><br><span class="line">    &lt;item&gt;com.google.android.gm&lt;&#x2F;item&gt;</span><br><span class="line">    &lt;item&gt;com.google.android.googlequicksearchbox&lt;&#x2F;item&gt;</span><br><span class="line">    &lt;item&gt;com.google.android.music&lt;&#x2F;item&gt;</span><br><span class="line">    &lt;item&gt;com.google.android.apps.maps&lt;&#x2F;item&gt;</span><br><span class="line">    &lt;item&gt;com.android.mms&lt;&#x2F;item&gt;</span><br><span class="line">    &lt;item&gt;com.cmcm.cmx.pagetwo&lt;&#x2F;item&gt;</span><br><span class="line">    &lt;item&gt;com.android.dialer&lt;&#x2F;item&gt;</span><br><span class="line">    &lt;item&gt;com.android.soundrecorder&lt;&#x2F;item&gt;</span><br><span class="line">    &lt;item&gt;com.google.android.youtube&lt;&#x2F;item&gt;</span><br><span class="line">    &lt;item&gt;com.android.htmlviewer&lt;&#x2F;item&gt;</span><br><span class="line">    &lt;item&gt;com.android.launcher3&lt;&#x2F;item&gt;</span><br><span class="line">    &lt;item&gt;com.mediatek.lbs.em2.ui&lt;&#x2F;item&gt;</span><br><span class="line">    &lt;item&gt;com.mediatek.wifitest&lt;&#x2F;item&gt;</span><br><span class="line">    &lt;item&gt;com.mediatek.calendarimporter&lt;&#x2F;item&gt;</span><br><span class="line">    &lt;item&gt;com.adups.fota&lt;&#x2F;item&gt;</span><br><span class="line">    &lt;item&gt;com.android.sharedstoragebackup&lt;&#x2F;item&gt;</span><br><span class="line">    &lt;item&gt;com.android.wallpapercropper&lt;&#x2F;item&gt;</span><br><span class="line">    &lt;item&gt;com.android.dreams.phototable&lt;&#x2F;item&gt;</span><br><span class="line">    &lt;item&gt;com.android.inputmethod.latin&lt;&#x2F;item&gt;</span><br><span class="line">    &lt;item&gt;com.android.exchange&lt;&#x2F;item&gt;</span><br><span class="line">    &lt;item&gt;com.android.providers.calendar&lt;&#x2F;item&gt;</span><br><span class="line">    &lt;item&gt;com.mediatek.dataprotection&lt;&#x2F;item&gt;</span><br><span class="line">    &lt;item&gt;com.mediatek.flp.em&lt;&#x2F;item&gt;</span><br><span class="line">    &lt;item&gt;com.google.android.gms&lt;&#x2F;item&gt;</span><br><span class="line">    &lt;item&gt;com.whatsapp&lt;&#x2F;item&gt;</span><br><span class="line">    &lt;item&gt;com.android.browser&lt;&#x2F;item&gt;</span><br><span class="line">&lt;&#x2F;string-array&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android Framework </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C/C++预处理指令#define,#ifdef,#ifndef,#endif...</title>
      <link href="/blog/2018/07/27/C-C-%E9%A2%84%E5%A4%84%E7%90%86%E6%8C%87%E4%BB%A4-define-ifdef-ifndef-endif/"/>
      <url>/blog/2018/07/27/C-C-%E9%A2%84%E5%A4%84%E7%90%86%E6%8C%87%E4%BB%A4-define-ifdef-ifndef-endif/</url>
      
        <content type="html"><![CDATA[<h3 id="常见的预处理指令如下："><a href="#常见的预处理指令如下：" class="headerlink" title="常见的预处理指令如下："></a>常见的预处理指令如下：</h3><ul><li><code>#</code>空指令，无任何效果</li><li><code>#include</code>包含一个源代码文件</li><li><code>#define</code>定义宏</li><li><code>#undef</code>取消已定义的宏</li><li><code>#if</code>如果给定条件为真，则编译下面代码</li><li><code>#ifdef</code>如果宏已经定义，则编译下面代码</li><li><code>#ifndef</code>如果宏没有定义，则编译下面代码</li><li><code>#elif</code>如果前面的#if给定条件不为真，当前条件为真，则编译下面代码</li><li><code>#endif</code>结束一个#if……#else条件编译块</li><li><code>#error</code>停止编译并显示错误信息</li></ul><h3 id="什么是预处理指令"><a href="#什么是预处理指令" class="headerlink" title="什么是预处理指令?"></a>什么是预处理指令?</h3><p>预处理指令是以#号开头的代码行。#号必须是该行除了任何空白字符外的第一个字符。#后是指令关键字，在关键字和#号之间允许存在任意个数的空白字符。整行语句构成了一条预处理指令，该指令将在编译器进行编译之前对源代码做某些转换。</p><p>预处理指令是在编译器进行编译之前进行的操作.预处理过程扫描源代码，对其进行初步的转换，产生新的源代码提供给编译器。可见预处理过程先于编译器对源代码进行处理。在很多编程语言中，并没有任何内在的机制来完成如下一些功能：在编译时包含其他源文件、定义宏、根据条件决定编译时是否包含某些代码(防止重复包含某些文件)。要完成这些工作，就需要使用预处理程序。尽管在目前绝大多数编译器都包含了预处理程序，但通常认为它们是独立于编译器的。预处理过程读入源代码，检查包含预处理指令的语句和宏定义，并对源代码进行响应的转换。预处理过程还会删除程序中的注释和多余的空白字符。</p><h4 id="include包含一个源代码文件"><a href="#include包含一个源代码文件" class="headerlink" title="#include包含一个源代码文件"></a><code>#include</code>包含一个源代码文件</h4><p>这个预处理指令，我想是见得最多的一个，简单说一下，第一种方法是用尖括号把头文件括起来。这种格式告诉预处理程序在编译器自带的或外部库的头文件中搜索被包含的头文件。第二种方法是用双引号把头文件括起来。这种格式告诉预处理程序在当前被编译的应用程序的源代码文件中搜索被包含的头文件，如果找不到，再搜索编译器自带的头文件。采用两种不同包含格式的理由在于，编译器是安装在公共子目录下的，而被编译的应用程序是在它们自己的私有子目录下的。一个应用程序既包含编译器提供的公共头文件，也包含自定义的私有头文件。采用两种不同的包含格式使得编译器能够在很多头文件中区别出一组公共的头文件。</p><h4 id="define定义宏"><a href="#define定义宏" class="headerlink" title="#define定义宏"></a><code>#define</code>定义宏</h4><p>有关#define这个宏定义，在C语言中使用的很多，因为#define存在一些不足，C++强调使用const来定义常量。宏定义了一个代表特定内容的标识符。预处理过程会把源代码中出现的宏标识符替换成宏定义时的值。记住仅仅是进行标识符的替换。下面列举一些#define的使用：</p><ol><li>用#define实现求最大值和最小值的宏<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#define MAX(x,y) (((x)&gt;(y))?(x):(y))</span><br><span class="line">#define MIN(x,y) (((x)&lt;(y))?(x):(y))</span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">#ifdef MAX    &#x2F;&#x2F;判断这个宏是否被定义</span><br><span class="line">    printf(&quot;3 and 5 the max is:%d\n&quot;,MAX(3,5));</span><br><span class="line">#endif</span><br><span class="line">#ifdef MIN</span><br><span class="line">    printf(&quot;3 and 5 the min is:%d\n&quot;,MIN(3,5));</span><br><span class="line">#endif</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line"> * (1)三元运算符要比if,else效率高</span><br><span class="line"> * （2）宏的使用一定要细心，需要把参数小心的用括号括起来，</span><br><span class="line"> * 因为宏只是简单的文本替换，不注意，容易引起歧义错误。</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure></li><li>宏定义的错误使用<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#define SQR(x) (x*x)</span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">    int b&#x3D;3;</span><br><span class="line">#ifdef SQR&#x2F;&#x2F;只需要宏名就可以了，不需要参数，有参数的话会警告</span><br><span class="line">    printf(&quot;a &#x3D; %d\n&quot;,SQR(b+2));</span><br><span class="line">#endif</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line"> *首先说明，这个宏的定义是错误的。并没有实现程序中的B+2的平方</span><br><span class="line"> * 预处理的时候，替换成如下的结果：b+2*b+2</span><br><span class="line"> * 正确的宏定义应该是：#define SQR(x) ((x)*(x))</span><br><span class="line"> * 所以，尽量使用小括号，将参数括起来。</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure></li><li>宏参数的连接<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#define STR(s) #s</span><br><span class="line">#define CONS(a,b) (int)(a##e##b)</span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">#ifdef STR</span><br><span class="line">    printf(STR(VCK));</span><br><span class="line">#endif</span><br><span class="line">#ifdef CONS</span><br><span class="line">    printf(&quot;\n%d\n&quot;,CONS(2,3));</span><br><span class="line">#endif</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;* （绝大多数是使用不到这些的，使用到的话，查看手册就可以了）</span><br><span class="line"> * 第一个宏，用#把参数转化为一个字符串</span><br><span class="line"> * 第二个宏，用##把2个宏参数粘合在一起，及aeb,2e3也就是2000</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure></li><li>用宏得到一个字的高位或低位的字节<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#define WORD_LO(xxx) ((byte)((word)(xxx) &amp; 255))</span><br><span class="line">#define WORD_HI(xxx) ((byte)((word)(xxx) &gt;&gt; 8))</span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line"> * 一个字2个字节，获得低字节（低8位），与255（0000,0000,1111,1111）按位相与</span><br><span class="line"> * 获得高字节（高8位），右移8位即可。</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure></li><li>用宏定义得到一个数组所含元素的个数<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#define ARR_SIZE(a) (sizeof((a))&#x2F;sizeof((a[0])))</span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">    int array[100];</span><br><span class="line">#ifdef ARR_SIZE</span><br><span class="line">    printf(&quot;array has %d items.\n&quot;,ARR_SIZE(array));</span><br><span class="line">#endif</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line"> *总的大小除以每个类型的大小</span><br><span class="line"> *&#x2F;</span><br></pre></td></tr></table></figure>关于#define宏的使用，应该特别小心，尤其是含有参数计算的时候如小2示例，最保险的做法将参数用括号括起来<h4 id="ifdef-ifndef-endif-的使用"><a href="#ifdef-ifndef-endif-的使用" class="headerlink" title="#ifdef,#ifndef,#endif...的使用"></a><code>#ifdef,#ifndef,#endif...</code>的使用</h4>以上这些预编译指令，都是条件编译指令，也就是说，将决定那些代码被编译，而哪些不被编译。</li><li>完整示例<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#define DEBUG</span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">    int i &#x3D; 0;</span><br><span class="line">    char c;</span><br><span class="line">    while(1)</span><br><span class="line">    &#123;</span><br><span class="line">        i++;</span><br><span class="line">        c &#x3D; getchar();</span><br><span class="line">        if(&#39;\n&#39; !&#x3D; c)</span><br><span class="line">        &#123;</span><br><span class="line">            getchar();</span><br><span class="line">        &#125;</span><br><span class="line">        if(&#39;q&#39; &#x3D;&#x3D; c || &#39;Q&#39; &#x3D;&#x3D; c)</span><br><span class="line">        &#123;</span><br><span class="line">#ifdef DEBUG&#x2F;&#x2F;判断DEBUG是否被定义了</span><br><span class="line">            printf(&quot;We get:%c,about to exit.\n&quot;,c);</span><br><span class="line">#endif</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            printf(&quot;i &#x3D; %d&quot;,i);</span><br><span class="line">#ifdef DEBUG</span><br><span class="line">            printf(&quot;,we get:%c&quot;,c);</span><br><span class="line">#endif</span><br><span class="line">            printf(&quot;\n&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;Hello World!\n&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;*#endif用于终止#if预处理指令。*&#x2F;</span><br></pre></td></tr></table></figure></li><li><code>#ifdef</code>和<code>#ifndef</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#define DEBUG</span><br><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line">#ifdef DEBUG</span><br><span class="line">    printf(&quot;yes &quot;);</span><br><span class="line">#endif</span><br><span class="line">#ifndef DEBUG</span><br><span class="line">    printf(&quot;no &quot;);</span><br><span class="line">#endif</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;#ifdefined等价于#ifdef;</span><br><span class="line">&#x2F;&#x2F;#if!defined等价于#ifndef</span><br></pre></td></tr></table></figure></li><li><code>#else</code>指令<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">include &lt;stdio.h&gt;           ||  #include &lt;stdio.h&gt;</span><br><span class="line">&#x2F;&#x2F; #define DEBUG            ||  #define DEBUG</span><br><span class="line">main()                      ||  main()</span><br><span class="line">&#123;                           ||  &#123;</span><br><span class="line">#ifdef DEBUG                ||  #ifdef DEBUG</span><br><span class="line">    ̶p̶r̶i̶n̶t̶f̶(̶&quot;̶D̶e̶b̶u̶g̶g̶i̶n̶g̶&quot;̶)̶:̶    ||      printf(&quot;Debugging&quot;);</span><br><span class="line">#else                       ||  #else</span><br><span class="line">    printf(&quot;Not debugging&quot;);||    ̶p̶r̶i̶n̶t̶f̶(̶&quot;̶N̶o̶t̶ ̶d̶e̶b̶u̶g̶g̶i̶n̶g̶&quot;̶)̶;̶ ̶</span><br><span class="line">̶#endif                      ||  #endif</span><br><span class="line">    printf(&quot;Running&quot;);      ||    printf(&quot;Running&quot;);</span><br><span class="line">&#125;                           ||  &#125;</span><br></pre></td></tr></table></figure>当没有定义DEBUG的时候，相当于if(DEBUG == false),所以不会执行到画横线处<code>p̶r̶i̶n̶t̶f̶(̶&quot;̶D̶e̶b̶u̶g̶g̶i̶n̶g̶&quot;̶)̶:̶ </code><br>当定义宏以后,相当于if(DEBUG == true),所以不会执行到画横线处<code>p̶r̶i̶n̶t̶f̶(̶&quot;̶N̶o̶t̶ ̶d̶e̶b̶u̶g̶g̶i̶n̶g̶&quot;̶)̶;̶ ̶</code></li><li><code>#elif</code>指令<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;      ||  #include &lt;stdio.h&gt;</span><br><span class="line">#define ONE 1           ||  #define ONE 1</span><br><span class="line">#define TWO 2           ||  &#x2F;&#x2F; #define TWO 2</span><br><span class="line">main()                  ||  main()</span><br><span class="line">&#123;                       ||  &#123;</span><br><span class="line">#ifdef ONE              ||  #ifdef ONE</span><br><span class="line">    printf(&quot;1&quot;);        ||      printf(&quot;1&quot;);</span><br><span class="line">#elif TWO               ||  #elif TWO</span><br><span class="line">    ̶p̶r̶i̶n̶t̶f̶(̶&quot;̶2̶&quot;̶)̶;̶ ̶       ||      p̶r̶i̶n̶t̶f̶(̶&quot;̶2̶&quot;̶)̶;̶ ̶ </span><br><span class="line">̶#̶e̶l̶s̶e̶                   ||  ̶#̶e̶l̶s̶e̶</span><br><span class="line">    ̶p̶r̶i̶n̶t̶f̶(̶&quot;̶3̶&quot;̶)̶;̶ ̶       ||      p̶r̶i̶n̶t̶f̶(̶&quot;̶3̶&quot;̶)̶;̶ ̶ </span><br><span class="line">#endif                  ||  #endif</span><br><span class="line">&#125;                       ||  &#125;</span><br></pre></td></tr></table></figure>这种宏的条件判断相当于if…else  if…else 只能有一个被执行<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;      ||  #include &lt;stdio.h&gt;</span><br><span class="line">&#x2F;&#x2F; #define ONE 1        ||  &#x2F;&#x2F; #define ONE 1</span><br><span class="line">#define TWO 2           ||  &#x2F;&#x2F; #define TWO 2</span><br><span class="line">main()                  ||  main()</span><br><span class="line">&#123;                       ||  &#123;</span><br><span class="line">#ifdef ONE              ||  #ifdef ONE</span><br><span class="line">    ̶p̶r̶i̶n̶t̶f̶(̶&quot;̶1̶&quot;̶)̶;̶ ̶       ||      ̶p̶r̶i̶n̶t̶f̶(̶&quot;̶1̶&quot;̶)̶;̶</span><br><span class="line">#elif TWO               ||  ̶#̶e̶l̶i̶f̶ ̶T̶W̶O̶</span><br><span class="line">    printf(&quot;2&quot;);        ||      ̶p̶r̶i̶n̶t̶f̶(̶&quot;̶2̶&quot;̶)̶;̶</span><br><span class="line">#else                   ||  #else</span><br><span class="line">    ̶p̶r̶i̶n̶t̶f̶(̶&quot;̶3̶&quot;̶)̶;̶        ||      printf(&quot;3&quot;);</span><br><span class="line">#endif                  ||  #endif</span><br><span class="line">&#125;                       ||  &#125;</span><br></pre></td></tr></table></figure></li><li>其他指令<br><code>#error</code>指令将使编译器显示一条错误信息，然后停止编译。<br><code>#line</code>指令可以改变编译器用来指出警告和错误信息的文件号和行号。<br><code>#pragma</code>指令没有正式的定义。编译器可以自定义其用途。典型的用法是禁止或允许某些烦人的警告信息<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#ifdef OS_Win</span><br><span class="line">#include &lt;windows.h&gt;</span><br><span class="line">#endif</span><br><span class="line"> </span><br><span class="line">#ifdef OS_Mac</span><br><span class="line">#include &lt;mac.h&gt;</span><br><span class="line">#endif</span><br><span class="line"> </span><br><span class="line">#ifdef OS_Linux</span><br><span class="line">#include &lt;linux.h&gt;</span><br><span class="line">#endif</span><br><span class="line">&#x2F;** 不仅使用在头文件的包含. 而且,对于不同的系统平台. 你也可以使用不同的代码结构. *&#x2F;</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">&#x2F;** 如果JOE宏没有定义,那么编译就此结束, 编译器就会显示红色的错误 *&#x2F;</span><br><span class="line">#ifndef JOE</span><br><span class="line">#error &quot;JOE is not exits&quot;</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jni </tag>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开启高精度定位</title>
      <link href="/blog/2018/07/26/%E5%BC%80%E5%90%AF%E9%AB%98%E7%B2%BE%E5%BA%A6%E5%AE%9A%E4%BD%8D/"/>
      <url>/blog/2018/07/26/%E5%BC%80%E5%90%AF%E9%AB%98%E7%B2%BE%E5%BA%A6%E5%AE%9A%E4%BD%8D/</url>
      
        <content type="html"><![CDATA[<p>三种定位模式</p><ol><li><p>Hight Accuracy</p></li><li><p>Battery Saving</p></li><li><p>GPS Only </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public static final int LOCATION_MODE_OFF &#x3D; 0;</span><br><span class="line">public static final int LOCATION_MODE_SENSORS_ONLY &#x3D; 1;</span><br><span class="line">public static final int LOCATION_MODE_BATTERY_SAVING &#x3D; 2;</span><br><span class="line">public static final int LOCATION_MODE_HIGH_ACCURACY &#x3D; 3</span><br></pre></td></tr></table></figure><p>设置界面的定位设置相关代码路径：</p></li><li><p><code>/packages/apps/Settings/src/com/android/settings/location/LocationSettings.java</code></p></li><li><p><code>/packages/apps/Settings/src/com/android/settings/location/LocationSettingsBase.java</code></p></li></ol><p>设置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Settings.Secure.getInt(activityUnderTest.getContentResolver(), Settings.Secure.LOCATION_MODE);</span><br></pre></td></tr></table></figure><p>初始化值：<br><code>frameworks\base\packages\SettingsProvider\src\com\android\providers\settings\DatabaseHelper.java</code>里面有loadSecureSetting()方法在这里添加</p>]]></content>
      
      
      <categories>
          
          <category> Android Framework </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>定制vibrator震动强度</title>
      <link href="/blog/2018/07/25/%E5%AE%9A%E5%88%B6vibrator%E9%9C%87%E5%8A%A8%E5%BC%BA%E5%BA%A6/"/>
      <url>/blog/2018/07/25/%E5%AE%9A%E5%88%B6vibrator%E9%9C%87%E5%8A%A8%E5%BC%BA%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<p>HapticFeedback震动反馈提到过/frameworks/base/policy/src/com/android/internal/policy/impl/PhoneWindowManager.java<br>performHapticFeedbackLw()函数默认的震动值由 如mVirtualKeyVibePattern = getLongIntArray(mContext.getResources(),<br>com.android.internal.R.array.config_virtualKeyVibePattern)<br>振动时间的配置文件在<br>frameworks/base/core/res/res/values/config.xml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 长按振动 --&gt;</span><br><span class="line">  &lt;!-- Vibrator pattern for feedback about a long screen&#x2F;key press --&gt;</span><br><span class="line">  &lt;integer-array name&#x3D;&quot;config_longPressVibePattern&quot;&gt;</span><br><span class="line">      &lt;item&gt;0&lt;&#x2F;item&gt;    &#x2F;&#x2F;暂停时间  单位为 ms</span><br><span class="line">      &lt;item&gt;1&lt;&#x2F;item&gt;    &#x2F;&#x2F;震动时间  单位为 ms</span><br><span class="line">      &lt;item&gt;20&lt;&#x2F;item&gt;    &#x2F;&#x2F;暂停时间  单位为 ms</span><br><span class="line">      &lt;item&gt;21&lt;&#x2F;item&gt;    &#x2F;&#x2F;震动时间  单位为 ms</span><br><span class="line">  &lt;&#x2F;integer-array&gt;</span><br><span class="line"> </span><br><span class="line">  &lt;!-- 虚拟按键振动 --&gt;</span><br><span class="line">  &lt;!-- Vibrator pattern for feedback about touching a virtual key --&gt;</span><br><span class="line">  &lt;integer-array name&#x3D;&quot;config_virtualKeyVibePattern&quot;&gt;</span><br><span class="line">      &lt;item&gt;0&lt;&#x2F;item&gt;</span><br><span class="line">      &lt;item&gt;10&lt;&#x2F;item&gt;</span><br><span class="line">      &lt;item&gt;20&lt;&#x2F;item&gt;</span><br><span class="line">      &lt;item&gt;30&lt;&#x2F;item&gt;</span><br><span class="line">  &lt;&#x2F;integer-array&gt;</span><br><span class="line"> </span><br><span class="line">  &lt;!-- 软键盘按键振动 --&gt;</span><br><span class="line">  &lt;!-- Vibrator pattern for a very short but reliable vibration for soft keyboard tap --&gt;</span><br><span class="line">  &lt;integer-array name&#x3D;&quot;config_keyboardTapVibePattern&quot;&gt;</span><br><span class="line">      &lt;item&gt;40&lt;&#x2F;item&gt;</span><br><span class="line">  &lt;&#x2F;integer-array&gt;</span><br><span class="line"> </span><br><span class="line">  &lt;!-- 非安全模式启动振动 --&gt;  &#x2F;&#x2F;正常开机震动</span><br><span class="line">  &lt;!-- Vibrator pattern for feedback about booting with safe mode disabled --&gt;</span><br><span class="line">  &lt;integer-array name&#x3D;&quot;config_safeModeDisabledVibePattern&quot;&gt;</span><br><span class="line">      &lt;item&gt;0&lt;&#x2F;item&gt;</span><br><span class="line">      &lt;item&gt;1&lt;&#x2F;item&gt;</span><br><span class="line">      &lt;item&gt;20&lt;&#x2F;item&gt;</span><br><span class="line">      &lt;item&gt;21&lt;&#x2F;item&gt;</span><br><span class="line">  &lt;&#x2F;integer-array&gt;</span><br><span class="line"> </span><br><span class="line">  &lt;!-- 安全模式启动振动 --&gt;  &#x2F;&#x2F;安全模式开机振动</span><br><span class="line">  &lt;!-- Vibrator pattern for feedback about booting with safe mode disabled --&gt;</span><br><span class="line">  &lt;integer-array name&#x3D;&quot;config_safeModeEnabledVibePattern&quot;&gt;</span><br><span class="line">      &lt;item&gt;0&lt;&#x2F;item&gt;</span><br><span class="line">      &lt;item&gt;1&lt;&#x2F;item&gt;</span><br><span class="line">      &lt;item&gt;20&lt;&#x2F;item&gt;</span><br><span class="line">      &lt;item&gt;21&lt;&#x2F;item&gt;</span><br><span class="line">      &lt;item&gt;500&lt;&#x2F;item&gt;</span><br><span class="line">      &lt;item&gt;600&lt;&#x2F;item&gt;</span><br><span class="line">  &lt;&#x2F;integer-array&gt;</span><br></pre></td></tr></table></figure><p>其中上面提到的500与600两个值无需修改，本身就是0的也无需修改。<br>微震对应的数值是16-17（这个非常舒适，强烈推荐）<br>不震对应的数值就是0。<br>就拿按键震动举个例子吧：将上面一段修改为以下微震</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;integer-array name&#x3D;&quot;config_virtualKeyVibePattern&quot;&gt;  &#x2F;&#x2F;按键的震动（就是那三个小点的震动）</span><br><span class="line">    &lt;item&gt;0&lt;&#x2F;item&gt;</span><br><span class="line">    &lt;item&gt;1&lt;&#x2F;item&gt;</span><br><span class="line">    &lt;item&gt;16&lt;&#x2F;item&gt;</span><br><span class="line">    &lt;item&gt;17&lt;&#x2F;item&gt;</span><br><span class="line">&lt;&#x2F;integer-array&gt;</span><br></pre></td></tr></table></figure><p>要修改的改好后，回编译就ok了</p>]]></content>
      
      
      <categories>
          
          <category> Android Framework </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android OTA升级流程分析</title>
      <link href="/blog/2018/07/24/Android-OTA%E5%8D%87%E7%BA%A7%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/"/>
      <url>/blog/2018/07/24/Android-OTA%E5%8D%87%E7%BA%A7%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>Android系统Recovery使用update.zip升级过程分析,update.zip包来源有两种，一个是OTA在线下载（一般下载到/CACHE分区），一个是手动拷贝到T卡<br>这里分析从update.zip拷贝到T卡后，弹出升级对话框分析：</p><h2 id="重启至recovery"><a href="#重启至recovery" class="headerlink" title="重启至recovery"></a>重启至recovery</h2><p>mNowButton按钮的监听事件里，会调用mService.rebootAndUpdate（new File(mFile)）。这个mService就是SystemUpdateService的实例<br>这个mFile就是update.zip的路径。</p><h3 id="1-调用RecoverySystem类提供的verifyPackage方法进行签名验证"><a href="#1-调用RecoverySystem类提供的verifyPackage方法进行签名验证" class="headerlink" title="1.调用RecoverySystem类提供的verifyPackage方法进行签名验证"></a>1.调用RecoverySystem类提供的verifyPackage方法进行签名验证</h3><p>签名验证函数，实现过程就不贴出来了，<br>参数，</p><ul><li>packageFile–升级文件</li><li>listener–进度监督器</li><li>deviceCertsZipFile–签名文件，如果为空，则使用系统默认的签名<br>只有当签名验证正确才返回，否则将抛出异常。<br>在Recovery模式下进行升级时候也是会进行签名验证的，如果这里先不进行验证也不会有什么问题。但是我们建议在重启前，先验证，以便及早发现问题。<br>如果签名验证没有问题，就执行installPackage开始升级。<br>在 recovery 模式升级的时候。我们recovery模式会再一次验证update.zip签名。具体代码在install.cpp 中函数 really_install_package<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public static void verifyPackage(File packageFile,</span><br><span class="line">                                 ProgressListener listener,</span><br><span class="line">                                 File deviceCertsZipFile)</span><br><span class="line">    throws IOException, GeneralSecurityException</span><br></pre></td></tr></table></figure><h3 id="2-签名验证没有问题，就进行重启升级"><a href="#2-签名验证没有问题，就进行重启升级" class="headerlink" title="2.签名验证没有问题，就进行重启升级"></a>2.签名验证没有问题，就进行重启升级</h3>installPackage(Context context,FilepackageFile)函数根据我们传过来的包文件，获取这个包文件的绝对路径filename。然后将其拼成arg=“–update_package=”+filename。它最终会被写入到BCB中。这个就是重启进入Recovery模式后，Recovery服务要进行的操作。它被传递到函数bootCommand(context,arg)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public static void installPackage(Context context, File packageFile)</span><br><span class="line">    throws IOException &#123;</span><br><span class="line">    String filename &#x3D; packageFile.getCanonicalPath();</span><br><span class="line">    Log.w(TAG, &quot;!!! REBOOTING TO INSTALL &quot; + filename + &quot; !!!&quot;);</span><br><span class="line"> </span><br><span class="line">    final String filenameArg &#x3D; &quot;--update_package&#x3D;&quot; + filename;</span><br><span class="line">    final String localeArg &#x3D; &quot;--locale&#x3D;&quot; + Locale.getDefault().toString();</span><br><span class="line">    bootCommand(context, filenameArg, localeArg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>bootCommand()函数创建/cache/recovery/目录，删除这个目录下的command和log（如果存在）文件在sqlite数据库中的备份。然后将上一步中的arg命令写入到/cache/recovery/command文件中。下一步就是真正重启了。接下来看一下在重启函数reboot中所做的事情<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">private static void bootCommand(Context context, String... args) throws IOException &#123;</span><br><span class="line">    RECOVERY_DIR.mkdirs();  &#x2F;&#x2F; In case we need it</span><br><span class="line">    COMMAND_FILE.delete();  &#x2F;&#x2F; In case it&#39;s not writable</span><br><span class="line">    LOG_FILE.delete();</span><br><span class="line"> </span><br><span class="line">    FileWriter command &#x3D; new FileWriter(COMMAND_FILE);</span><br><span class="line">    try &#123;</span><br><span class="line">        for (String arg : args) &#123;</span><br><span class="line">            if (!TextUtils.isEmpty(arg)) &#123;</span><br><span class="line">                command.write(arg);</span><br><span class="line">                command.write(&quot;\n&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        command.close();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F; Having written the command file, go ahead and reboot</span><br><span class="line">    PowerManager pm &#x3D; (PowerManager) context.getSystemService(Context.POWER_SERVICE);</span><br><span class="line">    pm.reboot(PowerManager.REBOOT_RECOVERY);</span><br><span class="line"> </span><br><span class="line">    throw new IOException(&quot;Reboot failed (no permissions?)&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-系统重启进入Recovery模式"><a href="#4-系统重启进入Recovery模式" class="headerlink" title="4.系统重启进入Recovery模式"></a>4.系统重启进入Recovery模式</h3>pm.reboot()重启之前先获得了PowerManager（电源管理）并进一步获得其系统服务。然后调用了pm.reboot(“recovery”)函数。他就是./bionic/libc/unistd/reboot.c中的reboot函数。这个函数实际上是一个系统调用，即__reboot(LINUX_REBOOT_MAGIC1,LINUX_REBOOT_MAGIC2,mode,NULL);mode就是我们传过来的“recovery”<br>进入Recovery模式</li><li>将”boot-recovery”写入BCB的command域</li><li>将”–update_package=/cache/update.zip”或则”–update_package=/sdcard/update.zip”写入/cache/recovery/command文件中<br>系统重启时会判断/cache/recovery目录下是否有command文件，如果存在就进入recovery模式，否则就正常启动<br>进入到Recovery模式下，将执行recovery.cpp的main函数<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">static const struct option OPTIONS[] &#x3D; &#123;</span><br><span class="line">  &#123; &quot;send_intent&quot;, required_argument, NULL, &#39;s&#39; &#125;,</span><br><span class="line">  &#123; &quot;update_package&quot;, required_argument, NULL, &#39;u&#39; &#125;,</span><br><span class="line">  &#123; &quot;wipe_data&quot;, no_argument, NULL, &#39;w&#39; &#125;,</span><br><span class="line">  &#123; &quot;wipe_cache&quot;, no_argument, NULL, &#39;c&#39; &#125;,</span><br><span class="line">  &#123; &quot;show_text&quot;, no_argument, NULL, &#39;t&#39; &#125;,</span><br><span class="line">  &#123; &quot;just_exit&quot;, no_argument, NULL, &#39;x&#39; &#125;,</span><br><span class="line">  &#123; &quot;locale&quot;, required_argument, NULL, &#39;l&#39; &#125;,</span><br><span class="line">  &#123; &quot;stages&quot;, required_argument, NULL, &#39;g&#39; &#125;,</span><br><span class="line">  &#123; &quot;shutdown_after&quot;, no_argument, NULL, &#39;p&#39; &#125;,</span><br><span class="line">  &#123; &quot;reason&quot;, required_argument, NULL, &#39;r&#39; &#125;,</span><br><span class="line">  &#123; NULL, 0, NULL, 0 &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>在这个While循环，用来读取recovery的command参数，OPTIONS的不同选项定义<br>写入的命令文件内容，将为update_package 赋值<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">if (update_package) &#123;</span><br><span class="line">    &#x2F;&#x2F; For backwards compatibility on the cache partition only, if</span><br><span class="line">    &#x2F;&#x2F; we&#39;re given an old &#39;root&#39; path &quot;CACHE:foo&quot;, change it to</span><br><span class="line">    &#x2F;&#x2F; &quot;&#x2F;cache&#x2F;foo&quot;.</span><br><span class="line">    if (strncmp(update_package, &quot;CACHE:&quot;, 6) &#x3D;&#x3D; 0) &#123;</span><br><span class="line">        int len &#x3D; strlen(update_package) + 10;</span><br><span class="line">        char* modified_path &#x3D; (char*)malloc(len);</span><br><span class="line">        strlcpy(modified_path, &quot;&#x2F;cache&#x2F;&quot;, len);</span><br><span class="line">        strlcat(modified_path, update_package+6, len);</span><br><span class="line">        printf(&quot;(replacing path \&quot;%s\&quot; with \&quot;%s\&quot;)\n&quot;,</span><br><span class="line">               update_package, modified_path);</span><br><span class="line">        update_package &#x3D; modified_path;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-install-cpp进行升级操作"><a href="#5-install-cpp进行升级操作" class="headerlink" title="5.install.cpp进行升级操作"></a>5.install.cpp进行升级操作</h3>具体的升级过程都是在install.cpp中执行的，先看install_package方法<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line">int</span><br><span class="line">install_package(const char* path, int* wipe_cache, const char* install_file,</span><br><span class="line">                bool needs_mount)</span><br><span class="line">&#123;</span><br><span class="line">    FILE* install_log &#x3D; fopen_path(install_file, &quot;w&quot;);</span><br><span class="line">    if (install_log) &#123;</span><br><span class="line">        fputs(path, install_log);</span><br><span class="line">        fputc(&#39;\n&#39;, install_log);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        LOGE(&quot;failed to open last_install: %s\n&quot;, strerror(errno));</span><br><span class="line">    &#125;</span><br><span class="line">    int result;</span><br><span class="line">    if (setup_install_mounts() !&#x3D; 0) &#123;</span><br><span class="line">        LOGE(&quot;failed to set up expected mounts for install; aborting\n&quot;);</span><br><span class="line">        result &#x3D; INSTALL_ERROR;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        result &#x3D; really_install_package(path, wipe_cache, needs_mount);</span><br><span class="line">    &#125;</span><br><span class="line">    if (install_log) &#123;</span><br><span class="line">        fputc(result &#x3D;&#x3D; INSTALL_SUCCESS ? &#39;1&#39; : &#39;0&#39;, install_log);</span><br><span class="line">        fputc(&#39;\n&#39;, install_log);</span><br><span class="line">        fclose(install_log);</span><br><span class="line">    &#125;</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">static int</span><br><span class="line">really_install_package(const char *path, int* wipe_cache, bool needs_mount)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;SetBackground(RecoveryUI::INSTALLING_UPDATE);</span><br><span class="line">    ui-&gt;Print(&quot;Finding update package...\n&quot;);</span><br><span class="line">    &#x2F;&#x2F; Give verification half the progress bar...</span><br><span class="line">    ui-&gt;SetProgressType(RecoveryUI::DETERMINATE);</span><br><span class="line">    ui-&gt;ShowProgress(VERIFICATION_PROGRESS_FRACTION, VERIFICATION_PROGRESS_TIME);</span><br><span class="line">    LOGI(&quot;Update location: %s\n&quot;, path);</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F; Map the update package into memory.</span><br><span class="line">    ui-&gt;Print(&quot;Opening update package...\n&quot;);</span><br><span class="line"> </span><br><span class="line">    if (path &amp;&amp; needs_mount) &#123;</span><br><span class="line">        if (path[0] &#x3D;&#x3D; &#39;@&#39;) &#123;</span><br><span class="line">            ensure_path_mounted(path+1);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            ensure_path_mounted(path);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    MemMapping map;</span><br><span class="line">    if (sysMapFile(path, &amp;map) !&#x3D; 0) &#123;</span><br><span class="line">        LOGE(&quot;failed to map file\n&quot;);</span><br><span class="line">        return INSTALL_CORRUPT;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F; 装入签名文件</span><br><span class="line">    int numKeys;</span><br><span class="line">    Certificate* loadedKeys &#x3D; load_keys(PUBLIC_KEYS_FILE, &amp;numKeys);</span><br><span class="line">    if (loadedKeys &#x3D;&#x3D; NULL) &#123;</span><br><span class="line">        LOGE(&quot;Failed to load keys\n&quot;);</span><br><span class="line">        return INSTALL_CORRUPT;</span><br><span class="line">    &#125;</span><br><span class="line">    LOGI(&quot;%d key(s) loaded from %s\n&quot;, numKeys, PUBLIC_KEYS_FILE);</span><br><span class="line"> </span><br><span class="line">    ui-&gt;Print(&quot;Verifying update package...\n&quot;);</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F; 验证签名</span><br><span class="line">    int err;</span><br><span class="line">    err &#x3D; verify_file(map.addr, map.length, loadedKeys, numKeys);</span><br><span class="line">    free(loadedKeys);</span><br><span class="line">    LOGI(&quot;verify_file returned %d\n&quot;, err);</span><br><span class="line">    &#x2F;&#x2F; 签名失败的处理</span><br><span class="line">    if (err !&#x3D; VERIFY_SUCCESS) &#123;</span><br><span class="line">        LOGE(&quot;signature verification failed\n&quot;);</span><br><span class="line">        sysReleaseMap(&amp;map);</span><br><span class="line">        return INSTALL_CORRUPT;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    &#x2F;* Try to open the package.</span><br><span class="line">     *&#x2F;</span><br><span class="line">    &#x2F;&#x2F; 打开升级包</span><br><span class="line">    ZipArchive zip;</span><br><span class="line">    err &#x3D; mzOpenZipArchive(map.addr, map.length, &amp;zip);</span><br><span class="line">    if (err !&#x3D; 0) &#123;</span><br><span class="line">        LOGE(&quot;Can&#39;t open %s\n(%s)\n&quot;, path, err !&#x3D; -1 ? strerror(err) : &quot;bad&quot;);</span><br><span class="line">        sysReleaseMap(&amp;map);</span><br><span class="line">        return INSTALL_CORRUPT;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    &#x2F;* Verify and install the contents of the package.</span><br><span class="line">     *&#x2F;</span><br><span class="line">    ui-&gt;Print(&quot;Installing update...\n&quot;);</span><br><span class="line">    ui-&gt;SetEnableReboot(false);</span><br><span class="line">    &#x2F;&#x2F; 执行升级脚本文件，开始升级</span><br><span class="line">    int result &#x3D; try_update_binary(path, &amp;zip, wipe_cache);</span><br><span class="line">    ui-&gt;SetEnableReboot(true);</span><br><span class="line">    ui-&gt;Print(&quot;\n&quot;);</span><br><span class="line"> </span><br><span class="line">    sysReleaseMap(&amp;map);</span><br><span class="line"> </span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>在这里创建了log文件，升级过程包括出错的信息都会写到这个文件中，便于后续的分析工作,<br>接下来是really_install_package里依次<br>(1)验证签名，装载签名文件，如果为空 ，终止升级； 调用verify_file进行签名验证，这个方法定义在verifier.cpp文件中，此处不展开，如果验证失败立即终止升级。<br>(2)读取升级包信息,执行mzOpenZipArchive方法，打开升级包并扫描，将包的内容拷贝到变量zip中，该变量将作为参数用来执行升级脚本<br>(3)执行升级脚本文件，开始升级, try_update_binary方法用来处理升级包，执行制作升级包中的脚本文件update_binary，进行系统更新<h3 id="6-try-update-binary执行升级脚本"><a href="#6-try-update-binary执行升级脚本" class="headerlink" title="6.try_update_binary执行升级脚本"></a>6.try_update_binary执行升级脚本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; If the package contains an update binary, extract it and run it.</span><br><span class="line">static int</span><br><span class="line">try_update_binary(const char *path, ZipArchive *zip, int* wipe_cache) &#123;</span><br><span class="line">&#x2F;&#x2F; 检查update-binary是否存在</span><br><span class="line">    const ZipEntry* binary_entry &#x3D;</span><br><span class="line">            mzFindZipEntry(zip, ASSUMED_UPDATE_BINARY_NAME);</span><br><span class="line">    if (binary_entry &#x3D;&#x3D; NULL) &#123;</span><br><span class="line">        mzCloseZipArchive(zip);</span><br><span class="line">        return INSTALL_CORRUPT;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    const char* binary &#x3D; &quot;&#x2F;tmp&#x2F;update_binary&quot;;</span><br><span class="line">    unlink(binary);</span><br><span class="line">    int fd &#x3D; creat(binary, 0755);</span><br><span class="line">    if (fd &lt; 0) &#123;</span><br><span class="line">        mzCloseZipArchive(zip);</span><br><span class="line">        LOGE(&quot;Can&#39;t make %s\n&quot;, binary);</span><br><span class="line">        return INSTALL_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; update-binary拷贝到&quot;&#x2F;tmp&#x2F;update_binary&quot;</span><br><span class="line">    bool ok &#x3D; mzExtractZipEntryToFile(zip, binary_entry, fd);</span><br><span class="line">    close(fd);</span><br><span class="line">    mzCloseZipArchive(zip);</span><br><span class="line"> </span><br><span class="line">    if (!ok) &#123;</span><br><span class="line">        LOGE(&quot;Can&#39;t copy %s\n&quot;, ASSUMED_UPDATE_BINARY_NAME);</span><br><span class="line">        return INSTALL_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F; 创建管道，用于下面的子进程和父进程之间的通信</span><br><span class="line">    int pipefd[2];</span><br><span class="line">    pipe(pipefd);</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F; When executing the update binary contained in the package, the</span><br><span class="line">    &#x2F;&#x2F; arguments passed are:</span><br><span class="line">    &#x2F;&#x2F;</span><br><span class="line">    &#x2F;&#x2F;   - the version number for this interface</span><br><span class="line">    &#x2F;&#x2F;</span><br><span class="line">    &#x2F;&#x2F;   - an fd to which the program can write in order to update the</span><br><span class="line">    &#x2F;&#x2F;     progress bar.  The program can write single-line commands:</span><br><span class="line">    &#x2F;&#x2F;</span><br><span class="line">    &#x2F;&#x2F;        progress &lt;frac&gt; &lt;secs&gt;</span><br><span class="line">    &#x2F;&#x2F;            fill up the next &lt;frac&gt; part of of the progress bar</span><br><span class="line">    &#x2F;&#x2F;            over &lt;secs&gt; seconds.  If &lt;secs&gt; is zero, use</span><br><span class="line">    &#x2F;&#x2F;            set_progress commands to manually control the</span><br><span class="line">    &#x2F;&#x2F;            progress of this segment of the bar</span><br><span class="line">    &#x2F;&#x2F;</span><br><span class="line">    &#x2F;&#x2F;        set_progress &lt;frac&gt;</span><br><span class="line">    &#x2F;&#x2F;            &lt;frac&gt; should be between 0.0 and 1.0; sets the</span><br><span class="line">    &#x2F;&#x2F;            progress bar within the segment defined by the most</span><br><span class="line">    &#x2F;&#x2F;            recent progress command.</span><br><span class="line">    &#x2F;&#x2F;</span><br><span class="line">    &#x2F;&#x2F;        firmware &lt;&quot;hboot&quot;|&quot;radio&quot;&gt; &lt;filename&gt;</span><br><span class="line">    &#x2F;&#x2F;            arrange to install the contents of &lt;filename&gt; in the</span><br><span class="line">    &#x2F;&#x2F;            given partition on reboot.</span><br><span class="line">    &#x2F;&#x2F;</span><br><span class="line">    &#x2F;&#x2F;            (API v2: &lt;filename&gt; may start with &quot;PACKAGE:&quot; to</span><br><span class="line">    &#x2F;&#x2F;            indicate taking a file from the OTA package.)</span><br><span class="line">    &#x2F;&#x2F;</span><br><span class="line">    &#x2F;&#x2F;            (API v3: this command no longer exists.)</span><br><span class="line">    &#x2F;&#x2F;</span><br><span class="line">    &#x2F;&#x2F;        ui_print &lt;string&gt;</span><br><span class="line">    &#x2F;&#x2F;            display &lt;string&gt; on the screen.</span><br><span class="line">    &#x2F;&#x2F;</span><br><span class="line">    &#x2F;&#x2F;   - the name of the package zip file.</span><br><span class="line">    &#x2F;&#x2F;</span><br><span class="line"> </span><br><span class="line">    const char** args &#x3D; (const char**)malloc(sizeof(char*) * 5);</span><br><span class="line">    args[0] &#x3D; binary;</span><br><span class="line">    args[1] &#x3D; EXPAND(RECOVERY_API_VERSION);   &#x2F;&#x2F; defined in Android.mk</span><br><span class="line">    char* temp &#x3D; (char*)malloc(10);</span><br><span class="line">    sprintf(temp, &quot;%d&quot;, pipefd[1]);</span><br><span class="line">    args[2] &#x3D; temp;</span><br><span class="line">    args[3] &#x3D; (char*)path;</span><br><span class="line">    args[4] &#x3D; NULL;</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F; 创建子进程。负责执行binary脚本</span><br><span class="line">    pid_t pid &#x3D; fork();</span><br><span class="line">    if (pid &#x3D;&#x3D; 0) &#123;</span><br><span class="line">        umask(022);</span><br><span class="line">        close(pipefd[0]);</span><br><span class="line">        execv(binary, (char* const*)args);&#x2F;&#x2F; 执行binary脚本</span><br><span class="line">        fprintf(stdout, &quot;E:Can&#39;t run %s (%s)\n&quot;, binary, strerror(errno));</span><br><span class="line">        _exit(-1);</span><br><span class="line">    &#125;</span><br><span class="line">    close(pipefd[1]);</span><br><span class="line"> </span><br><span class="line">    *wipe_cache &#x3D; 0;</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F; 父进程负责接受子进程发送的命令去更新ui显示</span><br><span class="line">    char buffer[1024];</span><br><span class="line">    FILE* from_child &#x3D; fdopen(pipefd[0], &quot;r&quot;);</span><br><span class="line">    while (fgets(buffer, sizeof(buffer), from_child) !&#x3D; NULL) &#123;</span><br><span class="line">        char* command &#x3D; strtok(buffer, &quot; \n&quot;);</span><br><span class="line">        if (command &#x3D;&#x3D; NULL) &#123;</span><br><span class="line">            continue;</span><br><span class="line">        &#125; else if (strcmp(command, &quot;progress&quot;) &#x3D;&#x3D; 0) &#123;</span><br><span class="line">            char* fraction_s &#x3D; strtok(NULL, &quot; \n&quot;);</span><br><span class="line">            char* seconds_s &#x3D; strtok(NULL, &quot; \n&quot;);</span><br><span class="line"> </span><br><span class="line">            float fraction &#x3D; strtof(fraction_s, NULL);</span><br><span class="line">            int seconds &#x3D; strtol(seconds_s, NULL, 10);</span><br><span class="line"> </span><br><span class="line">            ui-&gt;ShowProgress(fraction * (1-VERIFICATION_PROGRESS_FRACTION), seconds);</span><br><span class="line">        &#125; else if (strcmp(command, &quot;set_progress&quot;) &#x3D;&#x3D; 0) &#123;</span><br><span class="line">            char* fraction_s &#x3D; strtok(NULL, &quot; \n&quot;);</span><br><span class="line">            float fraction &#x3D; strtof(fraction_s, NULL);</span><br><span class="line">            ui-&gt;SetProgress(fraction);</span><br><span class="line">        &#125; else if (strcmp(command, &quot;ui_print&quot;) &#x3D;&#x3D; 0) &#123;</span><br><span class="line">            char* str &#x3D; strtok(NULL, &quot;\n&quot;);</span><br><span class="line">            if (str) &#123;</span><br><span class="line">                ui-&gt;Print(&quot;%s&quot;, str);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                ui-&gt;Print(&quot;\n&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            fflush(stdout);</span><br><span class="line">        &#125; else if (strcmp(command, &quot;wipe_cache&quot;) &#x3D;&#x3D; 0) &#123;</span><br><span class="line">            *wipe_cache &#x3D; 1;</span><br><span class="line">        &#125; else if (strcmp(command, &quot;clear_display&quot;) &#x3D;&#x3D; 0) &#123;</span><br><span class="line">            ui-&gt;SetBackground(RecoveryUI::NONE);</span><br><span class="line">        &#125; else if (strcmp(command, &quot;enable_reboot&quot;) &#x3D;&#x3D; 0) &#123;</span><br><span class="line">            &#x2F;&#x2F; packages can explicitly request that they want the user</span><br><span class="line">            &#x2F;&#x2F; to be able to reboot during installation (useful for</span><br><span class="line">            &#x2F;&#x2F; debugging packages that don&#39;t exit).</span><br><span class="line">            ui-&gt;SetEnableReboot(true);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            LOGE(&quot;unknown command [%s]\n&quot;, command);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    fclose(from_child);</span><br><span class="line"> </span><br><span class="line">    int status;</span><br><span class="line">    waitpid(pid, &amp;status, 0);</span><br><span class="line">    if (!WIFEXITED(status) || WEXITSTATUS(status) !&#x3D; 0) &#123;</span><br><span class="line">        LOGE(&quot;Error in %s\n(Status %d)\n&quot;, path, WEXITSTATUS(status));</span><br><span class="line">        return INSTALL_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    return INSTALL_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>try_update_binary函数，是真正实现读取升级包中的脚本文件并执行相应的函数的地方。在此函数中，通过调用fork函数创建出一个子进程，在子进程中开始读取并执行升级脚本文件。在此需要注意的是函数fork的用法，fork被调用一次，将做两次返回，在父进程中返回的是子进程的进程ID，为正数；而在子进程中，则返回0。子进程创建成功后，开始执行升级代码，并通过管道与父进程交互，父进程则通过读取子进程传递过来的信息更新UI。<h3 id="7-finish-recovery，重启"><a href="#7-finish-recovery，重启" class="headerlink" title="7.finish_recovery，重启"></a>7.finish_recovery，重启</h3>上一步完成之后，回到main函数，保存升级过程中的log，清除临时文件，包括command文件（不清除的话，下次重启还会进入recovery模式），最后重启。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Save logs and clean up before rebooting or shutting down.</span><br><span class="line"> finish_recovery(send_intent);</span><br></pre></td></tr></table></figure><h2 id="附1-cache文件"><a href="#附1-cache文件" class="headerlink" title="附1:cache文件"></a>附1:cache文件</h2></li></ul><table><thead><tr><th>文件</th><th>输入\输出</th><th>功能</th></tr></thead><tbody><tr><td><code>/cache/recovery/command</code></td><td>INPUT</td><td>MainSystem传递给Recovery的命令行</td></tr><tr><td><code>/cache/recovery/log</code></td><td>OUTPUT</td><td>Recovery过程的log</td></tr><tr><td><code>/cache/recovery/intent</code></td><td>OUTPUT</td><td>Recovery给MainSystem反馈的信息，比如告诉MainSystem是否升级成功</td></tr><tr><td><code>/cache/recovery/last_install</code></td><td>OUTPUT</td><td>上一次的安装包，和TEMPORARY_INSTALL_FILE相关</td></tr><tr><td><code>/cache/recovery/last_log</code></td><td>OUTPUT</td><td>保存了recovery的log，一般分析recovery问题时会用到</td></tr><tr><td><code>/cache/recovery/last_locale</code></td><td>OUTPUT</td><td>保存了locale信息到cache分区，如果下一次启动recovery的时候没有带-locale参数(例如从bootloader中启动)则会使用这个值</td></tr></tbody></table><h2 id="附2-command命令"><a href="#附2-command命令" class="headerlink" title="附2:command命令"></a>附2:command命令</h2><table><thead><tr><th>命令</th><th>取值</th><th>含义</th></tr></thead><tbody><tr><td>send_intent</td><td>字符串</td><td>Recovery之后将字符串写到这里，然后写入<code>/cache/recovery/intent</code>,也就是升级结果</td></tr><tr><td>update_package</td><td>path路径</td><td>安装OTA升级包的路径</td></tr><tr><td>wipe_data</td><td></td><td>擦除user data以及cache,然后重启</td></tr><tr><td>wipe_cache</td><td></td><td>擦除cache，不擦除user data,然后重启</td></tr><tr><td>set_encrypted_filesystem</td><td><code>on\of</code></td><td>是否加密文件系统</td></tr><tr><td>just_exit</td><td></td><td>退出和重启</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Android Framework </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android OTA升级包制作</title>
      <link href="/blog/2018/07/23/Android-OTA%E5%8D%87%E7%BA%A7%E5%8C%85%E5%88%B6%E4%BD%9C/"/>
      <url>/blog/2018/07/23/Android-OTA%E5%8D%87%E7%BA%A7%E5%8C%85%E5%88%B6%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p>OTA（Over-the-AirTechnology）是指手机终端通过无线网络下载远程服务器上的升级包，对系统或应用进行升级的技术。<br>OTA升级包（实质上是Recovery升级的ZIP包，OTA升级是基于Recovery的机制再加上下载ZIP包和ZIP包版本管理等功能实现）</p><h3 id="OTA升级包"><a href="#OTA升级包" class="headerlink" title="OTA升级包"></a>OTA升级包</h3><h4 id="OTA完整包生成方法"><a href="#OTA完整包生成方法" class="headerlink" title="OTA完整包生成方法"></a>OTA完整包生成方法</h4><p>OTA完整包可用于T卡本地升级和OTA在线升级。OTA完整包包含完整的system、recovery、<br>和 boot.img。编译 OTA 完整包必须在 android 系统编译(<code>make –j4</code>和<code>./mkimage.sh ota</code>)完成后<br>进行。编译 OTA 完整包命令如下：<br><code>make otapackage</code><br>在 out/target/product/rk29sdk/目录下生成 ota 完整包 rk29sdk‐ota‐eng.root.zip，改名成<br>update.zip 即可拷贝到 T 卡或内置 flash 中进行固件升级。</p><h5 id="OTA完整包结构"><a href="#OTA完整包结构" class="headerlink" title="OTA完整包结构"></a>OTA完整包结构</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">├── boot.img  &#x2F;&#x2F;更新boot分区所需要的文件。这个boot.img主要包括kernel+ramdisk，包括应用会用到的一些库等等</span><br><span class="line">├── file_contexts</span><br><span class="line">├── META-INF</span><br><span class="line">│   ├── CERT.RSA  &#x2F;&#x2F;与签名文件相关联的签名程序块文件，它存储了用于签名JAR文件的公共签名</span><br><span class="line">│   ├── CERT.SF  &#x2F;&#x2F;这是JAR文件的签名文件，其中前缀CERT代表签名者</span><br><span class="line">│   ├── com</span><br><span class="line">│   │   ├── android</span><br><span class="line">│   │   │   ├── metadata  &#x2F;&#x2F;描述设备信息及环境变量的元数据。主要包括一些编译选项，签名公钥，时间戳以及设备型号等</span><br><span class="line">│   │   │   └── otacert</span><br><span class="line">│   │   └── google</span><br><span class="line">│   │       └── android</span><br><span class="line">│   │           ├── update-binary  &#x2F;&#x2F;升级程序，解析执行升级脚本 一个二进制文件,能够识别updater-script中描述的操作。</span><br><span class="line">│   │           └── updater-script  &#x2F;&#x2F;升级脚本,具体描述了更新过程</span><br><span class="line">│   └── MANIFEST.MF  &#x2F;&#x2F;这个manifest文件定义了与包的组成结构相关的数据。类似Android应用的mainfest.xml文件</span><br><span class="line">├── recovery  &#x2F;&#x2F;升级相关的文件</span><br><span class="line">│   ├── bin</span><br><span class="line">│   │   └── install-recovery.sh  &#x2F;&#x2F;执行更新的脚本</span><br><span class="line">│   └── recovery-from-boot.p  &#x2F;&#x2F;recovery-from-boot.p是boot.img和recovery.img的补丁(patch),主要用来更新recovery分区</span><br><span class="line">└── system  &#x2F;&#x2F;更新system分区所需要的文件。这个system主要用来更新系统的一些应用或则应用会用到的一些库等等</span><br><span class="line">    ├── app</span><br><span class="line">    ├── bin</span><br><span class="line">    ├── build.prop</span><br><span class="line">    ├── etc</span><br><span class="line">    ├── fonts</span><br><span class="line">    ├── framework</span><br><span class="line">    ├── lib</span><br><span class="line">    ├── manifest.xml</span><br><span class="line">    ├── media</span><br><span class="line">    ├── priv-app</span><br><span class="line">    ├── recovery-from-boot.p</span><br><span class="line">    ├── tts</span><br><span class="line">    ├── usr</span><br><span class="line">    ├── vendor</span><br><span class="line">    └── xbin</span><br></pre></td></tr></table></figure><h4 id="OTA差异包生成方法"><a href="#OTA差异包生成方法" class="headerlink" title="OTA差异包生成方法"></a>OTA差异包生成方法</h4><p>OTA 差异包只有差异内容，包大小比较小，主要用于 OTA 在线升级，也可 T 卡本地升级。<br>OTA 差异包制作需要特殊的编译进行手动制作，以 rk29sdk 删除 VideoPlayer.apk 为例，具体<br>说明 ota 差异包的制作。<br>1.删除 VideoPlayer.apk 之前的版本先生成用于差异包的 target file:</p><pre><code>make otapackage<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2.将生成的target file 改名成 old,用于后面生成差异包使用</span><br></pre></td></tr></table></figure>mvout/target/product/rk29sdk/obj/PACKAGING/target_files_intermediates/rk29sdk‐target_files‐eng.root.zipout/target/product/rk29sdk/obj/PACKAGING/target_files_intermediates/rk29sdk‐target_files‐eng‐old.root.zip <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3.删除device&#x2F;rockchip&#x2F;rk29sdk&#x2F;apk&#x2F;VideoPlayer.apk</span><br><span class="line">和 out&#x2F;target&#x2F;product&#x2F;rk29sdk&#x2F;system&#x2F;app&#x2F;VideoPlayer.apk 后重新生成新的 target file:</span><br></pre></td></tr></table></figure>rm device/rockchip/rk29sdk/apk/VideoPlayer.apkrm out/target/product/rk29sdk/system/app/VideoPlayer.apkmake otapackage<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4.生成差异包:</span><br></pre></td></tr></table></figure>./build/tools/releasetools/ota_from_target_files‐v –iout/target/product/rk29sdk/obj/PACKAGING/target_files_intermediates/rk29sdk‐target_files‐eng‐old.root.zip‐p out/host/linux‐x86‐k build/target/product/security/testkeyout/target/product/rk29sdk/obj/PACKAGING/target_files_intermediates/rk29sdk‐target_files‐eng.root.zipout/target/product/rk29sdk/rk29sdk‐ota‐eng.root.zip<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">##### OTA差异包结构</span><br></pre></td></tr></table></figure>├── METE-INF├── patch│   ├── app│   │   └── build.prop.p│   ├── boot.img.p│   ├── etc│   ├── lib│   └── system├── recovery└── system```说明: 生成差异包命令格式:- ota_from_target_files   - –v –i 用于比较的前一个 target file   - –p host 主机编译环境- ‐k 打包密钥用于比较的后一个 target file最后生成的 ota 差异包   如果要增加修改后的 apk 或库可类似以上操作即可&gt;OTA 差异包是将本次编译生成的 target 包和上一个版本的 target 进行对比产生差异。如果要使用差异包，每次编译生成固件时都要 make otapackage 生成 target 包并对应版本保存，以便下次能够相对于某一版本生成差异包。### OTA升级包本地升级验证#### 验证Recovery升级将上述ZIP包复制到内部存储的任一可写目录下，假设我们的ZIP包复制到/cache目录下，文件名为ota.zip，那么接下来我们只需要再执行`echo &quot;--update_package=/cache/ota.zip&quot; &gt; /cache/recovery/command`命令，然后再执行`reboot recovery`命令即可重启进入Recovery模式进行升级验证。#### T卡本地升级1.OTA 包改名成 update.zip将 rk29sdk‐ota‐eng.root.zip 重命名为update.zip。2.拷贝 OTA 包到设备将改名后的 update.zip 拷贝到 rk29 设备的 T 卡或内置 flash 中。3.自动检测本地 OTA 包，提示升级拔插 usb 或拔插 T 卡，此时会弹出自动检测到本地 OTA 包的对话框</code></pre>]]></content>
      
      
      <categories>
          
          <category> Android Framework </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>On Lollipop USBDevice object does not return the correct number of USBInterface</title>
      <link href="/blog/2018/07/22/On-Lollipop-USBDevice-object-does-not-return-the-correct-number-of-USBInterface/"/>
      <url>/blog/2018/07/22/On-Lollipop-USBDevice-object-does-not-return-the-correct-number-of-USBInterface/</url>
      
        <content type="html"><![CDATA[<p><a href="https://issuetracker.google.com/issues/37032033">https://issuetracker.google.com/issues/37032033</a></p><p>此处修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">diff --git a&#x2F;frameworks&#x2F;base&#x2F;core&#x2F;java&#x2F;android&#x2F;hardware&#x2F;usb&#x2F;UsbDevice.java b&#x2F;frameworks&#x2F;base&#x2F;core&#x2F;java&#x2F;android&#x2F;hardware&#x2F;usb&#x2F;UsbDevice.java</span><br><span class="line"></span><br><span class="line">header 1 | header 2</span><br><span class="line">---|---</span><br><span class="line">row 1 col 1 | row 1 col 2</span><br><span class="line">row 2 col 1 | row 2 col 2</span><br><span class="line"></span><br><span class="line">index d90e06e..c693af1 100644</span><br><span class="line">--- a&#x2F;core&#x2F;java&#x2F;android&#x2F;hardware&#x2F;usb&#x2F;UsbDevice.java</span><br><span class="line">+++ b&#x2F;core&#x2F;java&#x2F;android&#x2F;hardware&#x2F;usb&#x2F;UsbDevice.java</span><br><span class="line">@@ -283,7 +283,7 @@ public class UsbDevice implements Parcelable &#123;</span><br><span class="line">             String manufacturerName &#x3D; in.readString();</span><br><span class="line">             String productName &#x3D; in.readString();</span><br><span class="line">             String serialNumber &#x3D; in.readString();</span><br><span class="line">-            Parcelable[] configurations &#x3D; in.readParcelableArray(UsbInterface.class.getClassLoader());</span><br><span class="line">+            Parcelable[] configurations &#x3D; in.readParcelableArray(UsbConfiguration.class.getClassLoader());</span><br><span class="line">             UsbDevice device &#x3D; new UsbDevice(name, vendorId, productId, clasz, subClass, protocol,</span><br><span class="line">                                  manufacturerName, productName, serialNumber);</span><br><span class="line">             device.setConfigurations(configurations);</span><br></pre></td></tr></table></figure><p>此处修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">Interestingly, I downloaded the USBHostManager.java file from Android 6.0 and it is identical the 5.1.1 version I was working with except the changes shown below.</span><br><span class="line"></span><br><span class="line">In Summary (add the two lines below that have &quot;+&quot;) to endUsbDeviceAdded():</span><br><span class="line">&#x2F;frameworks&#x2F;base&#x2F;services&#x2F;usb&#x2F;java&#x2F;com&#x2F;android&#x2F;server&#x2F;usb&#x2F;UsbHostManager.java</span><br><span class="line"></span><br><span class="line">    &#x2F;* Called from JNI in monitorUsbHostBus() to finish adding a new device *&#x2F;</span><br><span class="line">    private void endUsbDeviceAdded() &#123;</span><br><span class="line">        if (DEBUG) &#123;</span><br><span class="line">            Slog.d(TAG, &quot;usb:UsbHostManager.endUsbDeviceAdded()&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        if (mNewInterface !&#x3D; null) &#123;</span><br><span class="line">            mNewInterface.setEndpoints(</span><br><span class="line">                    mNewEndpoints.toArray(new UsbEndpoint[mNewEndpoints.size()]));</span><br><span class="line">        &#125;</span><br><span class="line">        if (mNewConfiguration !&#x3D; null) &#123;</span><br><span class="line">            mNewConfiguration.setInterfaces(</span><br><span class="line">                    mNewInterfaces.toArray(new UsbInterface[mNewInterfaces.size()]));</span><br><span class="line">        &#125;</span><br><span class="line">        synchronized (mLock) &#123;</span><br><span class="line">            if (mNewDevice !&#x3D; null) &#123;</span><br><span class="line">                mNewDevice.setConfigurations(</span><br><span class="line">                        mNewConfigurations.toArray(new UsbConfiguration[mNewConfigurations.size()]));</span><br><span class="line">                mDevices.put(mNewDevice.getDeviceName(), mNewDevice);</span><br><span class="line">                Slog.d(TAG, &quot;Added device &quot; + mNewDevice);</span><br><span class="line">                getCurrentSettings().deviceAttached(mNewDevice);</span><br><span class="line">                mUsbAudioManager.deviceAdded(mNewDevice);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                Slog.e(TAG, &quot;mNewDevice is null in endUsbDeviceAdded&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            mNewDevice &#x3D; null;</span><br><span class="line">            mNewConfigurations &#x3D; null;</span><br><span class="line">            mNewInterfaces &#x3D; null;</span><br><span class="line">            mNewEndpoints &#x3D; null;</span><br><span class="line">+           mNewConfiguration &#x3D; null;</span><br><span class="line">+           mNewInterface &#x3D; null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><html><!--issue-->https://issuetracker.google.com/issues/37032363</html>]]></content>
      
      
      <categories>
          
          <category> Android Framework </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>默认系统输入法为搜狗输入法</title>
      <link href="/blog/2018/07/21/%E9%BB%98%E8%AE%A4%E7%B3%BB%E7%BB%9F%E8%BE%93%E5%85%A5%E6%B3%95%E4%B8%BA%E6%90%9C%E7%8B%97%E8%BE%93%E5%85%A5%E6%B3%95/"/>
      <url>/blog/2018/07/21/%E9%BB%98%E8%AE%A4%E7%B3%BB%E7%BB%9F%E8%BE%93%E5%85%A5%E6%B3%95%E4%B8%BA%E6%90%9C%E7%8B%97%E8%BE%93%E5%85%A5%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="默认搜狗输入法"><a href="#默认搜狗输入法" class="headerlink" title="默认搜狗输入法"></a>默认搜狗输入法</h3><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><ol><li>frameworks\base\packages\SettingsProvider\res\values\defaults.xml <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">   &lt;!--create by chensy 默认搜狗输入法--&gt;</span><br><span class="line">&lt;!--&lt;string name&#x3D;&quot;def_input_method&quot; translatable&#x3D;&quot;false&quot;&gt;com.android.inputmethod.pinyin&#x2F;.PinyinIME&lt;&#x2F;string&gt;  --&gt;</span><br><span class="line">&lt;string name&#x3D;&quot;def_input_method&quot; translatable&#x3D;&quot;false&quot;&gt;com.sohu.inputmethod.sogou&#x2F;.SogouIME&lt;&#x2F;string&gt;</span><br><span class="line">   &lt;!--create by chensy 默认搜狗输入法--&gt;</span><br></pre></td></tr></table></figure></li><li>frameworks\base\packages\SettingsProvider\src\com\android\providers\settings\DatabaseHelper.java<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">loadStringSetting(stmt, Settings.Secure.DEFAULT_INPUT_METHOD,R.string.def_input_method);</span><br></pre></td></tr></table></figure></li><li>系统要安装搜狗输入法，或预置到系统中</li></ol><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><ol><li>在 frameworks\base\core\res\res\values\config.xml　添加一个属性: <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;string name&#x3D;&quot;config_default_input_method&quot; translatable&#x3D;&quot;false&quot;&gt;</span><br><span class="line"> com.sohu.inputmethod.sogou&#x2F;.SogouIME&lt;&#x2F;string&gt; </span><br></pre></td></tr></table></figure>frameworks\base\services\java\com\android\server\InputMethodManagerService.java  的方法 buildInputMethodListLocked() 里添加:     <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">String defaultIme &#x3D; Settings.Secure.getString(mContext </span><br><span class="line">            .getContentResolver(), Settings.Secure.DEFAULT_INPUT_METHOD); </span><br><span class="line"> </span><br><span class="line">    if ( defaultIme &#x3D;&#x3D; null ) </span><br><span class="line">    &#123; </span><br><span class="line">        final Resources res &#x3D; mContext.getResources(); </span><br><span class="line">        try </span><br><span class="line">        &#123; </span><br><span class="line">            &#x2F;&#x2F;frameworks\base\core\res\res\values\config.xml </span><br><span class="line">            String myIME &#x3D; res.getString( com.android.internal.R.string.config_default_input_method ); </span><br><span class="line">            if ( myIME !&#x3D; null &amp;&amp; myIME.length() &gt; 0 ) </span><br><span class="line">            &#123; </span><br><span class="line">                Settings.Secure.putString( mContext.getContentResolver(), </span><br><span class="line">                        Settings.Secure.DEFAULT_INPUT_METHOD, </span><br><span class="line">                        myIME ); </span><br><span class="line">            &#125; </span><br><span class="line">        &#125; </span><br><span class="line">        catch ( Exception e ) </span><br><span class="line">        &#123; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>系统要安装搜狗输入法，或预置到系统中</li></ol><h3 id="将系统中所有输入法设置为可用"><a href="#将系统中所有输入法设置为可用" class="headerlink" title="将系统中所有输入法设置为可用"></a>将系统中所有输入法设置为可用</h3><p>将系统中所有的输入法设置为可用，可修改</p><p>frameworks/base/core/java/com/Android/internal/inputmethod/InputMethodUtils.java</p><blockquote><p>附上常见的输入法包名和类名</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">百度：com.baidu.input&#x2F;.ImeService</span><br><span class="line">讯飞：com.iflytek.inputmethod&#x2F;.FlyIME</span><br><span class="line">腾讯：com.tencent.qqpinyin&#x2F;.QQPYInputMethodService</span><br><span class="line">谷歌：com.google.android.inputmethod.pinyin&#x2F;.PinyinIME</span><br><span class="line">搜狗：com.sohu.inputmethod.sogou&#x2F;.SogouIME</span><br><span class="line">触宝：com.cootek.smartinput5&#x2F;.TouchPalIME</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android Framework </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RK3288 make otapackage出错问题</title>
      <link href="/blog/2018/07/20/RK3288-make-otapackage%E5%87%BA%E9%94%99%E9%97%AE%E9%A2%98/"/>
      <url>/blog/2018/07/20/RK3288-make-otapackage%E5%87%BA%E9%94%99%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>OTA完整包可用于T卡本地升级和OTA在线升级。OTA完整包包含完整的system、recovery.<br>和 boot.img。编译 OTA 完整包必须在 android 系统编译(<code>make –j4</code> 和 <code>./mkimage.sh ota</code>)完成后<br>进行。编译 OTA 完整包命令如下：<br><code>make otapackage</code></p><p>编译日志</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">Installed file list: out&#x2F;target&#x2F;product&#x2F;rk3288&#x2F;installed-files.txt</span><br><span class="line">Target system fs image: out&#x2F;target&#x2F;product&#x2F;rk3288&#x2F;obj&#x2F;PACKAGING&#x2F;systemimage_intermediates&#x2F;system.img</span><br><span class="line">Running:  mkuserimg.sh -s out&#x2F;target&#x2F;product&#x2F;rk3288&#x2F;system out&#x2F;target&#x2F;product&#x2F;rk3288&#x2F;obj&#x2F;PACKAGING&#x2F;systemimage_intermediates&#x2F;system.img ext4 system 1073741824 out&#x2F;target&#x2F;product&#x2F;rk3288&#x2F;root&#x2F;file_contexts</span><br><span class="line">make_ext4fs -s -T -1 -S out&#x2F;target&#x2F;product&#x2F;rk3288&#x2F;root&#x2F;file_contexts -l 1073741824 -a system out&#x2F;target&#x2F;product&#x2F;rk3288&#x2F;obj&#x2F;PACKAGING&#x2F;systemimage_intermediates&#x2F;system.img out&#x2F;target&#x2F;product&#x2F;rk3288&#x2F;system</span><br><span class="line">Creating filesystem with parameters:</span><br><span class="line">    Size: 1073741824</span><br><span class="line">    Block size: 4096</span><br><span class="line">    Blocks per group: 32768</span><br><span class="line">    Inodes per group: 8192</span><br><span class="line">    Inode size: 256</span><br><span class="line">    Journal blocks: 4096</span><br><span class="line">    Label: </span><br><span class="line">    Blocks: 262144</span><br><span class="line">    Block groups: 8</span><br><span class="line">    Reserved block group size: 63</span><br><span class="line">Created filesystem with 1875&#x2F;65536 inodes and 110947&#x2F;262144 blocks</span><br><span class="line">Construct recovery from boot</span><br><span class="line">mkdir -p out&#x2F;target&#x2F;product&#x2F;rk3288&#x2F;obj&#x2F;PACKAGING&#x2F;recovery_patch_intermediates&#x2F;</span><br><span class="line">PATH&#x3D;out&#x2F;host&#x2F;linux-x86&#x2F;bin:$PATH out&#x2F;host&#x2F;linux-x86&#x2F;bin&#x2F;imgdiff out&#x2F;target&#x2F;product&#x2F;rk3288&#x2F;boot.img out&#x2F;target&#x2F;product&#x2F;rk3288&#x2F;recovery.img out&#x2F;target&#x2F;product&#x2F;rk3288&#x2F;obj&#x2F;PACKAGING&#x2F;recovery_patch_intermediates&#x2F;recovery_from_boot.p</span><br><span class="line">chunk 0: type 0 start 0 len 7012362</span><br><span class="line">chunk 1: type 2 start 7012362 len 2239232</span><br><span class="line">chunk 2: type 0 start 8354422 len 296330</span><br><span class="line">Construct patches for 3 chunks...</span><br><span class="line">patch   0 is 248 bytes (of 7012362)</span><br><span class="line">patch   1 is 1378159 bytes (of 1342060)</span><br><span class="line">patch   2 is 202 bytes (of 296330)</span><br><span class="line">chunk   0: normal   (         0,    7012362)         248</span><br><span class="line">chunk   1: deflate  (   7012362,    2917660)     1378159  (null)</span><br><span class="line">chunk   2: normal   (   9930022,     309978)         202</span><br><span class="line">Install system fs image: out&#x2F;target&#x2F;product&#x2F;rk3288&#x2F;system.img</span><br><span class="line">out&#x2F;target&#x2F;product&#x2F;rk3288&#x2F;system.img+out&#x2F;target&#x2F;product&#x2F;rk3288&#x2F;obj&#x2F;PACKAGING&#x2F;recovery_patch_intermediates&#x2F;recovery_from_boot.p maxsize&#x3D;1096212480 blocksize&#x3D;135168 total&#x3D;440127133 reserve&#x3D;11083776</span><br><span class="line">No RK Loader for TARGET_DEVICE rk3288 to otapackage</span><br><span class="line">package add resource.img to BOOT and RECOVERY</span><br><span class="line">No uboot for uboot&#x2F;uboot.img to otapackage</span><br><span class="line">No trust for uboot&#x2F;trust.img to otapackage</span><br><span class="line">No charge for uboot&#x2F;charge.img to otapackage</span><br><span class="line">No parameter for TARGET_DEVICE rk3288 to otapackage</span><br><span class="line">Package target files: out&#x2F;target&#x2F;product&#x2F;rk3288&#x2F;obj&#x2F;PACKAGING&#x2F;target_files_intermediates&#x2F;rk3288-target_files-eng.root.zip</span><br><span class="line">building image from target_files RECOVERY...</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;.&#x2F;build&#x2F;tools&#x2F;releasetools&#x2F;make_recovery_patch&quot;, line 68, in &lt;module&gt;</span><br><span class="line">    main(sys.argv[1:])</span><br><span class="line">  File &quot;.&#x2F;build&#x2F;tools&#x2F;releasetools&#x2F;make_recovery_patch&quot;, line 39, in main</span><br><span class="line">    input_dir, &quot;RECOVERY&quot;)</span><br><span class="line">  File &quot;&#x2F;media&#x2F;liw&#x2F;173d54d9-5bc8-4998-a41d-77fa4e377b61&#x2F;rk3288_box_sdk_5.1&#x2F;build&#x2F;tools&#x2F;releasetools&#x2F;common.py&quot;, line 419, in GetBootableImage</span><br><span class="line">    info_dict)</span><br><span class="line">  File &quot;&#x2F;media&#x2F;liw&#x2F;173d54d9-5bc8-4998-a41d-77fa4e377b61&#x2F;rk3288_box_sdk_5.1&#x2F;build&#x2F;tools&#x2F;releasetools&#x2F;common.py&quot;, line 376, in BuildBootableImage</span><br><span class="line">    p4 &#x3D; Run(sign_cmd)</span><br><span class="line">  File &quot;&#x2F;media&#x2F;liw&#x2F;173d54d9-5bc8-4998-a41d-77fa4e377b61&#x2F;rk3288_box_sdk_5.1&#x2F;build&#x2F;tools&#x2F;releasetools&#x2F;common.py&quot;, line 86, in Run</span><br><span class="line">    return subprocess.Popen(args, **kwargs)</span><br><span class="line">  File &quot;&#x2F;usr&#x2F;lib&#x2F;python2.7&#x2F;subprocess.py&quot;, line 710, in __init__</span><br><span class="line">    errread, errwrite)</span><br><span class="line">  File &quot;&#x2F;usr&#x2F;lib&#x2F;python2.7&#x2F;subprocess.py&quot;, line 1327, in _execute_child</span><br><span class="line">    raise child_exception</span><br><span class="line">OSError: [Errno 2] No such file or directory</span><br><span class="line">make: *** [out&#x2F;target&#x2F;product&#x2F;rk3288&#x2F;obj&#x2F;PACKAGING&#x2F;target_files_intermediates&#x2F;rk3288-target_files-eng.root.zip] 错误 1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### make failed to build some targets (03:16 (mm:ss)) ####</span><br></pre></td></tr></table></figure><p>解决方案<br>build/tools/releasetools/common.py修改一下<br>贴上patch</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">@@ -348,6 +348,17 @@</span><br><span class="line">   if os.access(fn, os.F_OK):</span><br><span class="line">     cmd.append(&quot;--pagesize&quot;)</span><br><span class="line">     cmd.append(open(fn).read().rstrip(&quot;\n&quot;))</span><br><span class="line">+  </span><br><span class="line">+  fn &#x3D; os.path.join(sourcedir, &quot;second&quot;)</span><br><span class="line">+  if os.access(fn, os.F_OK):</span><br><span class="line">+    cmd.append(&quot;--second&quot;)</span><br><span class="line">+    cmd.append(fn)</span><br><span class="line">+</span><br><span class="line">+</span><br><span class="line">+  fn &#x3D; os.path.join(sourcedir, &quot;third&quot;)</span><br><span class="line">+  if os.access(fn, os.F_OK):</span><br><span class="line">+    cmd.append(&quot;--third&quot;)</span><br><span class="line">+    cmd.append(fn)</span><br><span class="line"> </span><br><span class="line">   args &#x3D; info_dict.get(&quot;mkbootimg_args&quot;, None)</span><br><span class="line">   if args and args.strip():</span><br><span class="line">@@ -362,10 +373,10 @@</span><br><span class="line">       os.path.basename(sourcedir),)</span><br><span class="line"> </span><br><span class="line">   sign_cmd &#x3D; [&quot;drmsigntool&quot;, img.name, &quot;build&#x2F;target&#x2F;product&#x2F;security&#x2F;privateKey.bin&quot;]</span><br><span class="line">-  p4 &#x3D; Run(sign_cmd)</span><br><span class="line">-  p4.communicate()</span><br><span class="line">-  assert p4.returncode &#x3D;&#x3D; 0, &quot;mkbootimg of %s image failed&quot; % (</span><br><span class="line">-          os.path.basename(sourcedir),)</span><br><span class="line">+ # p4 &#x3D; Run(sign_cmd)</span><br><span class="line">+ # p4.communicate()</span><br><span class="line">+#  assert p4.returncode &#x3D;&#x3D; 0, &quot;mkbootimg of %s image failed&quot; % (</span><br><span class="line">+#          os.path.basename(sourcedir),)</span><br><span class="line"> </span><br><span class="line">   #if info_dict.get(&quot;verity_key&quot;, None):</span><br><span class="line">   #  path &#x3D; &quot;&#x2F;&quot; + os.path.basename(sourcedir).lower()</span><br><span class="line">@@ -877,8 +888,8 @@</span><br><span class="line">             f &#x3D; b</span><br><span class="line">           info &#x3D; imp.find_module(f, [d])</span><br><span class="line">         print &quot;loaded device-specific extensions from&quot;, path</span><br><span class="line">-        self.module &#x3D; imp.load_module(&quot;device_specific&quot;, *info)</span><br><span class="line">-        D(&quot;module &#x3D; %s&quot;, self.module);</span><br><span class="line">+       # self.module &#x3D; imp.load_module(&quot;device_specific&quot;, *info)</span><br><span class="line">+       # D(&quot;module &#x3D; %s&quot;, self.module);</span><br><span class="line">       except ImportError:</span><br><span class="line">         print &quot;unable to load device-specific module; assuming none&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android Framework </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql ERROR 1067:Invalid default value for &#39;id&#39;</title>
      <link href="/blog/2018/07/19/Mysql-ERROR-1067-Invalid-default-value-for-id/"/>
      <url>/blog/2018/07/19/Mysql-ERROR-1067-Invalid-default-value-for-id/</url>
      
        <content type="html"><![CDATA[<p>数据里面有张表的一个日期字段默认值为0000-00-00，导致现在的错误。根本原因是  SQL_MODE  设置值的问题<br>首先用下面的命令看下sql_mode</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like &#39;sql_mode&#39;;</span><br></pre></td></tr></table></figure><p>结果中含有NO_ZERO_IN_DATE, NO_ZERO_DATE,去掉 sql_mode 中的 values: NO_ZERO_IN_DATE,NO_ZERO_DATE 即可<br>执行下面的命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set session sql_mode&#x3D;&#39;ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION&#39;</span><br></pre></td></tr></table></figure><table><thead><tr><th>SQL_MODE</th><th>解释说明</th></tr></thead><tbody><tr><td>ONLY_FULL_GROUP_BY</td><td>对于GROUP BY聚合操作，如果在SELECT中的列，没有在GROUP BY中出现，那么将认为这个SQL是不合法的，因为列不在GROUP BY从句中</td></tr><tr><td>STRICT_TRANS_TABLES</td><td>在该模式下，如果一个值不能插入到一个事务表中，则中断当前的操作，对非事务表不做任何限制</td></tr><tr><td>NO_ZERO_IN_DATE</td><td>在严格模式，不接受月或日部分为0的日期。如果使用IGNORE选项，我们为类似的日期插入’0000-00-00’。在非严格模式，可以接受该日期，但会生成警告</td></tr><tr><td>NO_ZERO_DATE</td><td>在严格模式，不要将 ‘0000-00-00’做为合法日期。你仍然可以用IGNORE选项插入零日期。在非严格模式，可以接受该日期，但会生成警告</td></tr><tr><td>ERROR_FOR_DIVISION_BY_ZERO</td><td>在严格模式，在INSERT或UPDATE过程中，如果被零除(或MOD(X，0))，则产生错误(否则为警告)。如果未给出该模式，被零除时MySQL返回NULL。如果用到INSERT IGNORE或UPDATE IGNORE中，MySQL生成被零除警告，但操作结果为NULL</td></tr><tr><td>NO_AUTO_CREATE_USER</td><td>防止GRANT自动创建新用户，除非还指定了密码</td></tr><tr><td>NO_ENGINE_SUBSTITUTION</td><td>如果需要的存储引擎被禁用或未编译，那么抛出错误。不设置此值时，用默认的存储引擎替代，并抛出一个异常</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java开发接口</title>
      <link href="/blog/2018/07/18/Java%E5%BC%80%E5%8F%91%E6%8E%A5%E5%8F%A3/"/>
      <url>/blog/2018/07/18/Java%E5%BC%80%E5%8F%91%E6%8E%A5%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<h3 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h3><ul><li>JDK： v 10</li><li>Tomcat ：v 9.0.6</li><li>IntelliJ IDEA ：v 2017.3</li><li>MySQL：v 5.7.19<h3 id="学习计划"><a href="#学习计划" class="headerlink" title="学习计划"></a>学习计划</h3></li></ul><p>１. 环境搭建<br>２. HelloWorld<br>３. 创建数据库<br>４. Servlet写接口<br>５. Spring MVC写接口<br>６. Spring+SpringMVC+MyBatis<br>７. 云服务器部署</p><h4 id="１-环境搭建"><a href="#１-环境搭建" class="headerlink" title="１.环境搭建"></a>１.环境搭建</h4><p>要求:<br>１. 运行Tomcat成功后那只猫<br>２.IntelliJ IDEA 运行起来后的欢迎页<br>３．连接MySql后的截图，连接MySql命令行: <code>mysql -u root -p</code><br>退出MySQL命令行:<code>exit</code>　</p><h4 id="２-HelloWorld"><a href="#２-HelloWorld" class="headerlink" title="２.HelloWorld"></a>２.HelloWorld</h4><p>要求:<br>使用InterlliJ IDEA创建Maven项目，运行起来是<code>Hello World</code><br>注意事项:<br>注意下，比如选择Enable Auto import(是为了在pom.xml文件中添加依赖之后自动引入jar)</p><h4 id="3-创建数据库"><a href="#3-创建数据库" class="headerlink" title="3.创建数据库"></a>3.创建数据库</h4><p>《Java 开发接口》是单表操作，按照这个教程创建数据库、表、填充数据，应该没什么问题</p><p>要求:1、拍照上传《Java 开发接口》教程里的 developer 表，并插入 5 条数据； 2、拓展作业 2.1、分页 查询 developer 表，需要查出第 2 - 4 条内容。 2.2、外键 查询 comment 表，要求查出第一条数据且查出 user 表里的昵称</p><h4 id="4-Servlet-写接口"><a href="#4-Servlet-写接口" class="headerlink" title="4.Servlet 写接口"></a>4.Servlet 写接口</h4><p>前面都是准备工作，接下来进入编码阶段，<br>《Java 开发接口》关于 Servlet，有两节，分别是「创建 Servlet」、「Servlet 写接口」，<br>我实践下来，并不是很难，可能代码量有些多，我也提供了相应的 sample，建议自己跟着手敲一遍，加深印象。 </p><p>注意事项: 之前代码并没有做异常处理，最好 try catch 一下，这里偷懒了一下</p><p>要求:用 Postman 测试，分别拍照 获取数据、添加数据、修改数据</p><h4 id="5-Spring-MVC-写接口"><a href="#5-Spring-MVC-写接口" class="headerlink" title="5.Spring MVC 写接口"></a>5.Spring MVC 写接口</h4><p>Spring MVC 写接口分别对应《Java 开发接口》教程里「创建 Spring MVC」、「Spring MVC 写接口」，<br>难点在于配置，完成了「创建 Spring MVC」，后面会很快搞定。 </p><p>注意事项: 同样教程里代码并没有做异常处理，最好 try catch 一下。</p><p>要求: 用 Postman 测试，分别拍照 数据的增删改查</p><h4 id="6-SSM"><a href="#6-SSM" class="headerlink" title="6.SSM"></a>6.SSM</h4><p>SSM 是《Java 开发接口》的重头戏，很多公司项目都是用的 SSM 的框架，可见它的重要性，<br>SSM 配置相当复杂，我一开始也是一头雾水，仔细对照教程，一步步走下去，摸索摸索，会成功的。 </p><p>注意事项: 同样教程里代码并没有做异常处理，最好 try catch 一下。</p><p>要求: 用 Postman 测试，也是分别拍照 数据的增删改查</p><h4 id="7-云服务器部署"><a href="#7-云服务器部署" class="headerlink" title="7.云服务器部署"></a>7.云服务器部署</h4><p><a href="/asset/Java%E5%BC%80%E5%8F%91%E6%8E%A5%E5%8F%A3.pdf">Java开发接口</a> 下载链接: <a href="https://pan.baidu.com/s/18RJ6N0UQdwAK0P1o87f81g">https://pan.baidu.com/s/18RJ6N0UQdwAK0P1o87f81g</a> 密码: <a href="https://pan.baidu.com/s/18RJ6N0UQdwAK0P1o87f81g">ahyc</a></p>]]></content>
      
      
      <categories>
          
          <category> 后端技术 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>设置-显示-字体大小的修改</title>
      <link href="/blog/2018/07/17/%E8%AE%BE%E7%BD%AE-%E6%98%BE%E7%A4%BA-%E5%AD%97%E4%BD%93%E5%A4%A7%E5%B0%8F%E7%9A%84%E4%BF%AE%E6%94%B9/"/>
      <url>/blog/2018/07/17/%E8%AE%BE%E7%BD%AE-%E6%98%BE%E7%A4%BA-%E5%AD%97%E4%BD%93%E5%A4%A7%E5%B0%8F%E7%9A%84%E4%BF%AE%E6%94%B9/</url>
      
        <content type="html"><![CDATA[<p>Android系统中在Settings-&gt;Display-&gt;Font Size设置系统字体大小，默认的系统字体大小为Normal</p><h3 id="修改默认值"><a href="#修改默认值" class="headerlink" title="修改默认值"></a>修改默认值</h3><p>代码路径:/frameworks/base/core/java/android/content/res/Configuration.java<br>在public void setToDefaults()方法中进行修改，<br>如果默认要改成特大字体，请改为1.30； </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public void setToDefaults() &#123;   </span><br><span class="line">       fontScale &#x3D; 1.30; &#x2F;&#x2F;normal value is 1.0   </span><br><span class="line">       mcc &#x3D; mnc &#x3D; 0;   </span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>然后重新build framework.jar这个模块即可<br>注意：Settings中系统的字体大小，在/packages/apps/Settings/res/values/arrays.xml文件中的”entryvalues_font_size”这个tag中分别有定义对应的数值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Small:0.85   </span><br><span class="line">Normal:1.0   </span><br><span class="line">Large:1.15  </span><br><span class="line">Huge:1.30</span><br></pre></td></tr></table></figure><h3 id="添加一个选项值"><a href="#添加一个选项值" class="headerlink" title="添加一个选项值"></a>添加一个选项值</h3><p>代码路径:/packages/apps/Settings/res/values/arrays.xml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;string-array name&#x3D;&quot;entries_font_size&quot;&gt;</span><br><span class="line">    &lt;item msgid&#x3D;&quot;6490061470416867723&quot;&gt;Small&lt;&#x2F;item&gt;</span><br><span class="line">    &lt;item msgid&#x3D;&quot;3579015730662088893&quot;&gt;Normal&lt;&#x2F;item&gt;</span><br><span class="line">    &lt;item msgid&#x3D;&quot;1678068858001018666&quot;&gt;Large&lt;&#x2F;item&gt;</span><br><span class="line">    &lt;item msgid&#x3D;&quot;490158884605093126&quot;&gt;Huge&lt;&#x2F;item&gt;</span><br><span class="line">    &lt;item msgid&#x3D;&quot;945212277880982567&quot;&gt;Very Huge&lt;&#x2F;item&gt;   &#x2F;&#x2F;添加一个选项值</span><br><span class="line">&lt;&#x2F;string-array&gt;</span><br><span class="line"></span><br><span class="line">&lt;string-array name&#x3D;&quot;entryvalues_font_size&quot; translatable&#x3D;&quot;false&quot;&gt;</span><br><span class="line">    &lt;item&gt;0.85&lt;&#x2F;item&gt;</span><br><span class="line">    &lt;item&gt;1.0&lt;&#x2F;item&gt;</span><br><span class="line">    &lt;item&gt;1.15&lt;&#x2F;item&gt;</span><br><span class="line">    &lt;item&gt;1.30&lt;&#x2F;item&gt;</span><br><span class="line">    &lt;item&gt;2.0&lt;&#x2F;item&gt;    &#x2F;&#x2F;添加一个选项值</span><br><span class="line">&lt;&#x2F;string-array&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android Framework </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>更改默认壁纸</title>
      <link href="/blog/2018/07/16/%E6%9B%B4%E6%94%B9%E9%BB%98%E8%AE%A4%E5%A3%81%E7%BA%B8/"/>
      <url>/blog/2018/07/16/%E6%9B%B4%E6%94%B9%E9%BB%98%E8%AE%A4%E5%A3%81%E7%BA%B8/</url>
      
        <content type="html"><![CDATA[<p>Android 5.0中homescreen的默认壁纸位置：</p><p>frameworks/base/core/res/res/drawable-nodpi/default_wallpaper.jpg；可以在frameworks/base/core/res目录下搜索default_wallpaper.jpg文件，替换掉就可以了。</p><p>在Android 5.0中不能设置lockscreen的背景图片,这是因为在Lockscreen的背景已经设置为透明，并且不能更换。</p><p>Lockscreen 背景的位置：<br>SystemUI(frameworks/base/package/SystemUI)下的super_status_bar.xml和super_status_bar.xml中的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;com.android.systemui.statusbar.phone.PanlHolder</span><br><span class="line"></span><br><span class="line">  android:id&#x3D;&quot;@+id&#x2F;panel_holder&quot;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">  &gt;</span><br><span class="line"></span><br><span class="line">   ...</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;com.android.systemui.statusbar.phone.PanlHolder&gt;</span><br></pre></td></tr></table></figure><p>修改panel_holder的背景就可以了</p><blockquote><p>特别强调:<br>        在Android 5.0中lockscreen的背景颜色是透明，跟homescreen一致。因为锁屏界面的icon都是白色的，在更换背景图片时候不要使用白色图片，避免修改之后锁屏界面icon不可见。在解锁后状态栏是黑色，这是因为lockscreen的背景色是透明，这样显示的是黑色，如果更换成其他图片或者颜色，解锁后通知栏会被遮蔽，看不到任何icon.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Android Framework </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Watchdog机制</title>
      <link href="/blog/2018/07/15/Watchdog%E6%9C%BA%E5%88%B6/"/>
      <url>/blog/2018/07/15/Watchdog%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<p>Watchdog的中文的“看门狗”，有保护的意思。最早引入Watchdog是在单片机系统中，由于单片机的工作环境容易受到外界磁场的干扰，导致程序“跑飞”，造成整个系统无法正常工作，因此，引入了一个“看门狗”，对单片机的运行状态进行实时监测，针对运行故障做一些保护处理，譬如让系统重启。这种Watchdog属于硬件层面，必须有硬件电路的支持<br>Linux也引入了Watchdog，在Linux内核下，当Watchdog启动后，便设定了一个定时器，如果在超时时间内没有对/dev/Watchdog进行写操作，则会导致系统重启。通过定时器实现的Watchdog属于软件层面。<br>Android设计了一个软件层面Watchdog，用于保护一些重要的系统服务，当出现故障时，通常会让Android系统重启。由于这种机制的存在，就经常会出现一些system_server进程被Watchdog杀掉而发生手机重启的问题。</p><h3 id="Watchdog初始化"><a href="#Watchdog初始化" class="headerlink" title="Watchdog初始化"></a>Watchdog初始化</h3><p>分析Watchdog的实现逻辑。为了描述方便，ActivityManagerService， PackageManagerService， WindowManagerService会分别简称为AMS, PKMS, WMS<br>代码路径frameworks/base/services/core/java/com/android/server/Watchdog.java，<br>Android的Watchdog是一个单例线程，在System Server时就会初始化Watchdog。Watchdog在初始化时，会构建很多HandlerChecker，大致可以分为两类：</p><ul><li>Monitor Checker，用于检查是Monitor对象可能发生的死锁, AMS, PKMS, WMS等核心的系统服务都是Monitor对象。</li><li>Looper Checker，用于检查线程的消息队列是否长时间处于工作状态。Watchdog自身的消息队列，Ui, Io, Display这些全局的消息队列都是被检查的对象。此外，一些重要的线程的消息队列，也会加入到Looper Checker中，譬如AMS, PKMS，这些是在对应的对象初始化时加入的。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">private Watchdog() &#123;</span><br><span class="line">    ....</span><br><span class="line">    mMonitorChecker &#x3D; new HandlerChecker(FgThread.getHandler(),</span><br><span class="line">                &quot;foreground thread&quot;, DEFAULT_TIMEOUT);</span><br><span class="line">    mHandlerCheckers.add(mMonitorChecker);</span><br><span class="line">    mHandlerCheckers.add(new HandlerChecker(new Handler(Looper.getMainLooper()),</span><br><span class="line">                &quot;main thread&quot;, DEFAULT_TIMEOUT));</span><br><span class="line">    mHandlerCheckers.add(new HandlerChecker(UiThread.getHandler(),</span><br><span class="line">                &quot;ui thread&quot;, DEFAULT_TIMEOUT));</span><br><span class="line">    mHandlerCheckers.add(new HandlerChecker(IoThread.getHandler(),</span><br><span class="line">                &quot;i&#x2F;o thread&quot;, DEFAULT_TIMEOUT));</span><br><span class="line">    mHandlerCheckers.add(new HandlerChecker(DisplayThread.getHandler(),</span><br><span class="line">                &quot;display thread&quot;, DEFAULT_TIMEOUT));</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>两类HandlerChecker的侧重点不同，Monitor Checker预警我们不能长时间持有核心系统服务的对象锁，否则会阻塞很多函数的运行; Looper Checker预警我们不能长时间的霸占消息队列，否则其他消息将得不到处理。这两类都会导致系统卡住(System Not Responding)<h3 id="添加WatchDog监测对象"><a href="#添加WatchDog监测对象" class="headerlink" title="添加WatchDog监测对象"></a>添加WatchDog监测对象</h3>Watchdog初始化以后，就可以作为system_server进程中的一个单独的线程运行了。但这个时候，还不能触发Watchdog的运行，因为AMS, PKMS等系统服务还没有加入到Watchdog的监测集。 所谓监测集，就是需要Watchdog关注的对象，Android中有成千上万的消息队列在同时运行，然而，Watchdog毕竟是系统层面的东西，它只会关注一些核心的系统服务。<br>Watchdog提供两个方法，分别用于添加Monitor Checker对象和Looper Checker对象:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public void addMonitor(Monitor monitor) &#123;</span><br><span class="line">    &#x2F;&#x2F; 将monitor对象添加到Monitor Checker中，</span><br><span class="line">    &#x2F;&#x2F; 在Watchdog初始化时，可以看到Monitor Checker本身也是一个HandlerChecker对象</span><br><span class="line">    mMonitors.add(monitor);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void addThread(Handler thread, long timeoutMillis) &#123;</span><br><span class="line">    synchronized (this) &#123;</span><br><span class="line">        if (isAlive()) &#123;</span><br><span class="line">            throw new RuntimeException(&quot;Threads can&#39;t be added once the Watchdog is running&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        final String name &#x3D; thread.getLooper().getThread().getName();</span><br><span class="line">        &#x2F;&#x2F; 为Handler构建一个HandlerChecker对象，其实就是**Looper Checker**</span><br><span class="line">        mHandlerCheckers.add(new HandlerChecker(thread, name, timeoutMillis));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>被Watchdog监测的对象，都需要将自己添加到Watchdog的监测集中。以下是AMS的类定义和构造器的代码片段：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public final class ActivityManagerService extends ActivityManagerNative</span><br><span class="line">        implements Watchdog.Monitor, BatteryStatsImpl.BatteryCallback &#123;</span><br><span class="line"></span><br><span class="line">    public ActivityManagerService(Context systemContext) &#123;</span><br><span class="line">        ...</span><br><span class="line">        Watchdog.getInstance().addMonitor(this);</span><br><span class="line">        Watchdog.getInstance().addThread(mHandler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void monitor() &#123;</span><br><span class="line">        synchronized (this) &#123; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>AMS实现了Watchdog.Monitor接口，这个接口只有一个方法，就是monitor()，它的作用后文会再解释。这里可以看到在AMS的构造器中，将自己添加到Monitor Checker对象中，然后将自己的handler添加到Looper Checker对象中。 其他重要的系统服务添加到Watchdog的代码逻辑都与AMS差不多。<h3 id="Watchdog的监测机制"><a href="#Watchdog的监测机制" class="headerlink" title="Watchdog的监测机制"></a>Watchdog的监测机制</h3>Watchdog本身是一个线程，它的run()方法实现如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">    boolean waitedHalf &#x3D; false;</span><br><span class="line">    while (true) &#123;</span><br><span class="line">        ...</span><br><span class="line">        synchronized (this) &#123;</span><br><span class="line">            ...</span><br><span class="line">            &#x2F;&#x2F; 1. 调度所有的HandlerChecker</span><br><span class="line">            for (int i&#x3D;0; i&lt;mHandlerCheckers.size(); i++) &#123;</span><br><span class="line">                HandlerChecker hc &#x3D; mHandlerCheckers.get(i);</span><br><span class="line">                hc.scheduleCheckLocked();</span><br><span class="line">            &#125;</span><br><span class="line">            ...</span><br><span class="line">            &#x2F;&#x2F; 2. 开始定期检查</span><br><span class="line">            long start &#x3D; SystemClock.uptimeMillis();</span><br><span class="line">            while (timeout &gt; 0) &#123;</span><br><span class="line">                ...</span><br><span class="line">                try &#123;</span><br><span class="line">                    wait(timeout);</span><br><span class="line">                &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                    Log.wtf(TAG, e);</span><br><span class="line">                &#125;</span><br><span class="line">                ...</span><br><span class="line">                timeout &#x3D; CHECK_INTERVAL - (SystemClock.uptimeMillis() - start);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 3. 检查HandlerChecker的完成状态</span><br><span class="line">            final int waitState &#x3D; evaluateCheckerCompletionLocked();</span><br><span class="line">            if (waitState &#x3D;&#x3D; COMPLETED) &#123;</span><br><span class="line">                ...</span><br><span class="line">                continue;</span><br><span class="line">            &#125; else if (waitState &#x3D;&#x3D; WAITING) &#123;</span><br><span class="line">                ...</span><br><span class="line">                continue;</span><br><span class="line">            &#125; else if (waitState &#x3D;&#x3D; WAITED_HALF) &#123;</span><br><span class="line">                ...</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 4. 存在超时的HandlerChecker</span><br><span class="line">            blockedCheckers &#x3D; getBlockedCheckersLocked();</span><br><span class="line">            subject &#x3D; describeCheckersLocked(blockedCheckers);</span><br><span class="line">            allowRestart &#x3D; mAllowRestart;</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">        &#x2F;&#x2F; 5. 保存日志，判断是否需要杀掉系统进程</span><br><span class="line">        Slog.w(TAG, &quot;*** GOODBYE!&quot;);</span><br><span class="line">        Process.killProcess(Process.myPid());</span><br><span class="line">        System.exit(10);</span><br><span class="line">    &#125; &#x2F;&#x2F; end of while (true)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>Watchdog运行后，便开始无限循环，依次调用每一个HandlerChecker的scheduleCheckLocked()方法<br>调度完HandlerChecker之后，便开始定期检查是否超时，每一次检查的间隔时间由CHECK_INTERVAL常量设定，为30秒<br>每一次检查都会调用evaluateCheckerCompletionLocked()方法来评估一下HandlerChecker的完成状态：</p><ul><li>COMPLETED表示已经完成</li><li>WAITING和WAITED_HALF表示还在等待，但未超时</li><li>OVERDUE表示已经超时。默认情况下，timeout是1分钟，但监测对象可以通过传参自行设定，譬如PKMS的Handler Checker的超时是10分钟<br>如果超时时间到了，还有HandlerChecker处于未完成的状态(OVERDUE)，则通过getBlockedCheckersLocked()方法，获取阻塞的HandlerChecker，生成一些描述信息<br>保存日志，包括一些运行时的堆栈信息，这些日志是我们解决Watchdog问题的重要依据。如果判断需要杀掉system_server进程，则给当前进程(system_server)发送signal 9<br>只要Watchdog没有发现超时的任务，HandlerChecker就会被不停的调度<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public final class HandlerChecker implements Runnable &#123;</span><br><span class="line"></span><br><span class="line">    public void scheduleCheckLocked() &#123;</span><br><span class="line">        &#x2F;&#x2F; Looper Checker中是不包含monitor对象的，判断消息队列是否处于空闲</span><br><span class="line">        if (mMonitors.size() &#x3D;&#x3D; 0 &amp;&amp; mHandler.getLooper().isIdling()) &#123;</span><br><span class="line">            mCompleted &#x3D; true;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">        &#x2F;&#x2F; 将Monitor Checker的对象置于消息队列之前，优先运行</span><br><span class="line">        mHandler.postAtFrontOfQueue(this);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        &#x2F;&#x2F; 依次调用Monitor对象的monitor()方法</span><br><span class="line">        for (int i &#x3D; 0 ; i &lt; size ; i++) &#123;</span><br><span class="line">            synchronized (Watchdog.this) &#123;</span><br><span class="line">                mCurrentMonitor &#x3D; mMonitors.get(i);</span><br><span class="line">            &#125;</span><br><span class="line">            mCurrentMonitor.monitor();</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>对于Looper Checker而言，会判断线程的消息队列是否处于空闲状态。 如果被监测的消息队列一直闲不下来，则说明可能已经阻塞等待了很长时间<br>对于Monitor Checker而言，会调用实现类的monitor方法，譬如上文中提到的AMS.monitor()方法， 方法实现一般很简单，就是获取当前类的对象锁，如果当前对象锁已经被持有，则monitor()会一直处于wait状态，直到超时，这种情况下，很可能是线程发生了死锁</li></ul>]]></content>
      
      
      <categories>
          
          <category> Android Framework </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ANR程序问题分析之dropbox</title>
      <link href="/blog/2018/07/14/ANR%E7%A8%8B%E5%BA%8F%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90%E4%B9%8Bdropbox/"/>
      <url>/blog/2018/07/14/ANR%E7%A8%8B%E5%BA%8F%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90%E4%B9%8Bdropbox/</url>
      
        <content type="html"><![CDATA[<p>从2.2开始增加了DropBox功能，增强Android的异常信息收集管理能力DropBox（简称DB）是系统进程中的一个服务，在system_server进程启动时创建，并且它没有运行在单独的线程中，而是运行在system_server的ServerThread线程中。我们可以将ServerThread称作system_server的主线程，ServerThread线程除了启动并维护各个服务外，还负责检测一些重要的服务是否死锁<br>DropBoxManagerService（简称DBMS）就是DB服务的本尊，它的主要功能接口包括以下几个函数：<br>public voidadd(DropBoxManager.Entryentry)</p><p>DBMS将所有要添加的日志都用DropBoxManager.Entry类型的对象表示，通过add函数添加，并且直到目前为止一个Entry对象对应着一个日志文件。</p><p>publicboolean isTagEnabled(String tag)</p><p>通过给每一个Entry设置一个tag可以标识不同类型的日志，并且可以灵活的启用/禁用某种类型的日志，isTagEnabled用来判断指定类型的日志是否被启用/禁用了，一旦禁用就不会再记录这种类型的日志。默认是不禁用任何类型的日志的。稍后说明如何启用/禁用日志。</p><p>publicsynchronized DropBoxManager.Entry getNextEntry(String tag, long millis)</p><p>我们可以通过getNextEntry函数获取指定类型和指定时间点之后的第一条日志，要使用这个功能应用程序需要有“android.permission.READ_LOGS”的权限，并且在使用完毕返回的Entry对象后要调用其close函数确保关闭日志文件的文件描述符（如果不关闭的话可能造成进程打开的文件描述符超过1024而崩溃，Android中限制每个进程的文件描述符上限为1024）。</p><p>DBMS提供了很多的配置项用来限制对磁盘的使用，通过SettingsProvider应用程序维护，数据存放在其settings.db数据库中。这些配置项也都有默认值，罗列如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Settings.Secure.DROPBOX_AGE_SECONDS &#x3D; &quot;dropbox_age_seconds&quot;</span><br><span class="line">&#x2F;&#x2F;日志文件保存的最长时间，默认3天</span><br><span class="line">Settings.Secure.DROPBOX_MAX_FILES &#x3D; &quot;dropbox_max_files&quot;</span><br><span class="line">&#x2F;&#x2F;日志文件的最大数量，默认值是1000</span><br><span class="line">Settings.Secure.DROPBOX_QUOTA_KB &#x3D; &quot;dropbox_quota_kb&quot;</span><br><span class="line">&#x2F;&#x2F;磁盘空间最大使用量</span><br><span class="line">Settings.Secure.DROPBOX_QUOTA_PERCENT &#x3D; &quot;dropbox_quota_percent&quot;</span><br><span class="line">Settings.Secure.DROPBOX_RESERVE_PERCENT &#x3D; &quot;dropbox_reserve_percent&quot;</span><br><span class="line">Settings.Secure.DROPBOX_TAG_PREFIX &#x3D; &quot;dropbox:&quot;</span><br><span class="line">&#x2F;&#x2F;应用程序可以利用DropBox来做事情，收集日志等</span><br></pre></td></tr></table></figure><h3 id="DropBox启动"><a href="#DropBox启动" class="headerlink" title="DropBox启动"></a>DropBox启动</h3><p>在SystemServer.java的ServerThread.run()里</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Slog.i(TAG, &quot;DropBox Service&quot;);</span><br><span class="line">ServiceManager.addService(Context.DROPBOX_SERVICE, &#x2F;&#x2F;服务名称为“dropbox”</span><br><span class="line">new DropBoxManagerService(context, new File(&quot;&#x2F;data&#x2F;system&#x2F;dropbox&quot;)));</span><br></pre></td></tr></table></figure><p>DROPBOX_SERVICE = “dropbox”, “/data/system/dropbox”是DB指定的文件存放位置，这个过程向ServiceManager 登记名为“dropbox”的服务。那么可通过<code>dumpsys dropbox</code>来查看该dropbox服务信息。</p><h3 id="DropBox初始化"><a href="#DropBox初始化" class="headerlink" title="DropBox初始化"></a>DropBox初始化</h3><p>在DropBoxManagerService.java的构造方法里</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">public final class DropBoxManagerService extends IDropBoxManagerService.Stub &#123;</span><br><span class="line"></span><br><span class="line">    public DropBoxManagerService(final Context context, File path) &#123;</span><br><span class="line">        mDropBoxDir &#x3D; path;  &#x2F;&#x2F; 目录&#x2F;data&#x2F;system&#x2F;dropbox</span><br><span class="line">        mContext &#x3D; context;</span><br><span class="line">        mContentResolver &#x3D; context.getContentResolver();</span><br><span class="line"></span><br><span class="line">        IntentFilter filter &#x3D; new IntentFilter();</span><br><span class="line">        &#x2F;&#x2F; 监听存储设备可用空间低的广播</span><br><span class="line">        filter.addAction(Intent.ACTION_DEVICE_STORAGE_LOW);</span><br><span class="line">        &#x2F;&#x2F; 监听开机完毕的广播</span><br><span class="line">        filter.addAction(Intent.ACTION_BOOT_COMPLETED);</span><br><span class="line">        context.registerReceiver(mReceiver, filter);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; Settings数据库变化时则回调广播接收者的onReceive方法,此处CONTENT_URI&#x3D;content:&#x2F;&#x2F;settings&#x2F;global&quot;</span><br><span class="line">        mContentResolver.registerContentObserver(</span><br><span class="line">            Settings.Global.CONTENT_URI, true,</span><br><span class="line">            new ContentObserver(new Handler()) &#123;</span><br><span class="line">                public void onChange(boolean selfChange) &#123;</span><br><span class="line">                    mReceiver.onReceive(context, (Intent) null);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">        mHandler &#x3D; new Handler() &#123;</span><br><span class="line">            public void handleMessage(Message msg) &#123;</span><br><span class="line">                &#x2F;&#x2F; 发送广播</span><br><span class="line">                if (msg.what &#x3D;&#x3D; MSG_SEND_BROADCAST) &#123;</span><br><span class="line">                    mContext.sendBroadcastAsUser((Intent)msg.obj, UserHandle.OWNER,</span><br><span class="line">                            android.Manifest.permission.READ_LOGS);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法主要功能是给dropbox目录所对应的存储空间进行瘦身:</p><ul><li><p>存储设备可用空间低；</p></li><li><p>开机完毕；</p></li><li><p>Settings数据库变化；<br>以上情况都会触发触发执行mReceiver的onReceive方法<br>在DropBoxManagerService.java的mReceiver</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">private final BroadcastReceiver mReceiver &#x3D; new BroadcastReceiver() &#123;</span><br><span class="line">    public void onReceive(Context context, Intent intent) &#123;</span><br><span class="line">        if (intent !&#x3D; null &amp;&amp; Intent.ACTION_BOOT_COMPLETED.equals(intent.getAction())) &#123;</span><br><span class="line">            mBooted &#x3D; true;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;收到ACTION_DEVICE_STORAGE_LOW，则强制重新check存储空间</span><br><span class="line">        mCachedQuotaUptimeMillis &#x3D; 0; </span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;创建工作线程来执行init和trim操作</span><br><span class="line">        new Thread() &#123;</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    init(); &#x2F;&#x2F;初始化</span><br><span class="line">                    trimToFit(); &#x2F;&#x2F;清除一些空间</span><br><span class="line">                &#125; catch (IOException e) &#123;</span><br><span class="line">                    ...</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="init-方法"><a href="#init-方法" class="headerlink" title="init()方法"></a>init()方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">private synchronized void init() throws IOException &#123;</span><br><span class="line">    if (mStatFs &#x3D;&#x3D; null) &#123;</span><br><span class="line">        if (!mDropBoxDir.isDirectory() &amp;&amp; !mDropBoxDir.mkdirs()) &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">        mStatFs &#x3D; new StatFs(mDropBoxDir.getPath());</span><br><span class="line">        mBlockSize &#x3D; mStatFs.getBlockSize(); &#x2F;&#x2F;mBlockSize&#x3D;4096</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (mAllFiles &#x3D;&#x3D; null) &#123;</span><br><span class="line">        File[] files &#x3D; mDropBoxDir.listFiles();</span><br><span class="line">        &#x2F;&#x2F; 列举所有的dropbox文件</span><br><span class="line">        mAllFiles &#x3D; new FileList();</span><br><span class="line">        mFilesByTag &#x3D; new HashMap&lt;String, FileList&gt;();</span><br><span class="line"></span><br><span class="line">        for (File file : files) &#123;</span><br><span class="line">            if (file.getName().endsWith(&quot;.tmp&quot;)) &#123;</span><br><span class="line">                file.delete(); &#x2F;&#x2F;删除后缀为.tmp文件</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            &#x2F;&#x2F; 创建dropbox的实体文件对象, 根据文件名来获取相应的时间戳</span><br><span class="line">            EntryFile entry &#x3D; new EntryFile(file, mBlockSize);</span><br><span class="line">            if (entry.tag &#x3D;&#x3D; null) &#123;</span><br><span class="line">                continue; &#x2F;&#x2F;忽略tag为空的文件</span><br><span class="line">            &#125; else if (entry.timestampMillis &#x3D;&#x3D; 0) &#123;</span><br><span class="line">                file.delete(); &#x2F;&#x2F;删除时间戳为0的文件</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            &#x2F;&#x2F;将entry加入到mAllFiles对象</span><br><span class="line">            enrollEntry(entry);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法主要功能：</p></li><li><p>创建目录/data/system/dropbox;</p></li><li><p>将每一个dropbox文件都对应于一个EntryFile对象,根据文件名来获取相应的时间戳</p></li><li><p>删除后缀为.tmp的文件;</p></li><li><p>删除时间戳为0的文件</p><h4 id="trimToFit-方法"><a href="#trimToFit-方法" class="headerlink" title="trimToFit()方法"></a>trimToFit()方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">private synchronized long trimToFit() &#123;</span><br><span class="line">    int ageSeconds &#x3D; Settings.Global.getInt(mContentResolver,</span><br><span class="line">            Settings.Global.DROPBOX_AGE_SECONDS, DEFAULT_AGE_SECONDS);</span><br><span class="line">    int maxFiles &#x3D; Settings.Global.getInt(mContentResolver,</span><br><span class="line">            Settings.Global.DROPBOX_MAX_FILES, DEFAULT_MAX_FILES);</span><br><span class="line">    long cutoffMillis &#x3D; System.currentTimeMillis() - ageSeconds * 1000;</span><br><span class="line">    </span><br><span class="line">    while (!mAllFiles.contents.isEmpty()) &#123;</span><br><span class="line">        EntryFile entry &#x3D; mAllFiles.contents.first();</span><br><span class="line">        &#x2F;&#x2F;当最老的文件时间戳在3天之内，且文件个数低于1000，则跳出循环</span><br><span class="line">        if (entry.timestampMillis &gt; cutoffMillis </span><br><span class="line">            &amp;&amp; mAllFiles.contents.size() &lt; maxFiles) break;</span><br><span class="line">        FileList tag &#x3D; mFilesByTag.get(entry.tag);</span><br><span class="line">        if (tag !&#x3D; null &amp;&amp; tag.contents.remove(entry)) tag.blocks -&#x3D; entry.blocks;</span><br><span class="line">        if (mAllFiles.contents.remove(entry)) mAllFiles.blocks -&#x3D; entry.blocks;</span><br><span class="line">        if (entry.file !&#x3D; null) entry.file.delete(); &#x2F;&#x2F;删除文件</span><br><span class="line">    &#125;</span><br><span class="line">    long uptimeMillis &#x3D; SystemClock.uptimeMillis();</span><br><span class="line">    &#x2F;&#x2F;除非接收设备存储低的广播，否则间隔5s才能再次执行restat</span><br><span class="line">    if (uptimeMillis &gt; mCachedQuotaUptimeMillis + QUOTA_RESCAN_MILLIS) &#123;</span><br><span class="line">        int quotaPercent &#x3D; Settings.Global.getInt(mContentResolver,</span><br><span class="line">                Settings.Global.DROPBOX_QUOTA_PERCENT, DEFAULT_QUOTA_PERCENT);</span><br><span class="line">        int reservePercent &#x3D; Settings.Global.getInt(mContentResolver,</span><br><span class="line">                Settings.Global.DROPBOX_RESERVE_PERCENT, DEFAULT_RESERVE_PERCENT);</span><br><span class="line">        int quotaKb &#x3D; Settings.Global.getInt(mContentResolver,</span><br><span class="line">                Settings.Global.DROPBOX_QUOTA_KB, DEFAULT_QUOTA_KB);</span><br><span class="line">        &#x2F;&#x2F;重新统计文件</span><br><span class="line">        mStatFs.restat(mDropBoxDir.getPath());</span><br><span class="line">        int available &#x3D; mStatFs.getAvailableBlocks();</span><br><span class="line">        int nonreserved &#x3D; available - mStatFs.getBlockCount() * reservePercent &#x2F; 100;</span><br><span class="line">        int maximum &#x3D; quotaKb * 1024 &#x2F; mBlockSize;</span><br><span class="line">        &#x2F;&#x2F;可用的块数量</span><br><span class="line">        mCachedQuotaBlocks &#x3D; Math.min(maximum, Math.max(0, nonreserved * quotaPercent &#x2F; 100));</span><br><span class="line">        mCachedQuotaUptimeMillis &#x3D; uptimeMillis;</span><br><span class="line">    &#125;</span><br><span class="line">    if (mAllFiles.blocks &gt; mCachedQuotaBlocks) &#123;</span><br><span class="line">        &#x2F;&#x2F;公平地限制所有tag的空间</span><br><span class="line">        int unsqueezed &#x3D; mAllFiles.blocks, squeezed &#x3D; 0;</span><br><span class="line">        TreeSet&lt;FileList&gt; tags &#x3D; new TreeSet&lt;FileList&gt;(mFilesByTag.values());</span><br><span class="line">        for (FileList tag : tags) &#123;</span><br><span class="line">            if (squeezed &gt; 0 &amp;&amp; tag.blocks &lt;&#x3D; (mCachedQuotaBlocks - unsqueezed) &#x2F; squeezed) &#123;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">            unsqueezed -&#x3D; tag.blocks;</span><br><span class="line">            squeezed++;</span><br><span class="line">        &#125;</span><br><span class="line">        int tagQuota &#x3D; (mCachedQuotaBlocks - unsqueezed) &#x2F; squeezed;</span><br><span class="line">        &#x2F;&#x2F;移除每个tags中的旧items</span><br><span class="line">        for (FileList tag : tags) &#123;</span><br><span class="line">            if (mAllFiles.blocks &lt; mCachedQuotaBlocks) break;</span><br><span class="line">            while (tag.blocks &gt; tagQuota &amp;&amp; !tag.contents.isEmpty()) &#123;</span><br><span class="line">                EntryFile entry &#x3D; tag.contents.first();</span><br><span class="line">                if (tag.contents.remove(entry)) tag.blocks -&#x3D; entry.blocks;</span><br><span class="line">                if (mAllFiles.contents.remove(entry)) mAllFiles.blocks -&#x3D; entry.blocks;</span><br><span class="line">                try &#123;</span><br><span class="line">                    if (entry.file !&#x3D; null) entry.file.delete();</span><br><span class="line">                    enrollEntry(new EntryFile(mDropBoxDir, entry.tag, entry.timestampMillis));</span><br><span class="line">                &#125; catch (IOException e) &#123;</span><br><span class="line">                    Slog.e(TAG, &quot;Can&#39;t write tombstone file&quot;, e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return mCachedQuotaBlocks * mBlockSize;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>trimToFit过程中触发条件是：当文件有效时长超过3天，或者最大文件数超过1000，再或者剩余可用存储设备过低；<br>DBMS有很多常量参数：</p></li><li><p>DEFAULT_AGE_SECONDS = 3 * 86400：文件最长可存活时长为3天</p></li><li><p>DEFAULT_MAX_FILES = 1000：最大dropbox文件个数为1000</p></li><li><p>DEFAULT_QUOTA_KB = 5 * 1024：分配dropbox空间的最大值5M</p></li><li><p>DEFAULT_QUOTA_PERCENT = 10：是指dropbox目录最多可占用空间比例10%</p></li><li><p>DEFAULT_RESERVE_PERCENT = 10：是指dropbox不可使用的存储空间比例10%</p></li><li><p>QUOTA_RESCAN_MILLIS = 5000：重新扫描retrim时长为5s<br>当然上面这些都是默认值，完全可以通过设置content://settings/global数据库中相应项来设定值。</p></li></ul><h3 id="DropBox工作"><a href="#DropBox工作" class="headerlink" title="DropBox工作"></a>DropBox工作</h3><p>以下任一场景，都会调用AMS.addErrorToDropBox()来触发DBMS工作。</p><ul><li>crash: AMS.handleApplicationCrashInner()</li><li>anr: AMS.appNotResponding()</li><li>watchdog: Watchdog.run()</li><li>native_crash: NativeCrashReporter.run()</li><li>wtf: 当调用Log.wtf()或者Log.wtfQuiet()</li><li>lowmem: 当内存较低时，触发AMS.reportMemUsage()</li></ul><p>在ActivityManagerService.java的addErrorToDropBox()方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">public void addErrorToDropBox(String eventType, ProcessRecord process, String processName, ActivityRecord activity, ActivityRecord parent, String subject, final String report, final File logFile, final ApplicationErrorReport.CrashInfo crashInfo) &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;创建dropbox标签名</span><br><span class="line">    final String dropboxTag &#x3D; processClass(process) + &quot;_&quot; + eventType;</span><br><span class="line">    &#x2F;&#x2F;获取dropbox服务的代理端</span><br><span class="line">    final DropBoxManager dbox &#x3D; (DropBoxManager)</span><br><span class="line">            mContext.getSystemService(Context.DROPBOX_SERVICE);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;当不需要输出dropbox报告则直接返回</span><br><span class="line">    if (dbox &#x3D;&#x3D; null || !dbox.isTagEnabled(dropboxTag)) return;</span><br><span class="line"></span><br><span class="line">    final StringBuilder sb &#x3D; new StringBuilder(1024);</span><br><span class="line">    &#x2F;&#x2F;输出Process,flags,以及进程中所有package</span><br><span class="line">    appendDropBoxProcessHeaders(process, processName, sb);</span><br><span class="line">    ...</span><br><span class="line">    if (subject !&#x3D; null) &#123;</span><br><span class="line">        sb.append(&quot;Subject: &quot;).append(subject).append(&quot;\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    sb.append(&quot;Build: &quot;).append(Build.FINGERPRINT).append(&quot;\n&quot;);</span><br><span class="line">    sb.append(&quot;\n&quot;);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;创建新线程，避免将调用者阻塞在I&#x2F;O</span><br><span class="line">    Thread worker &#x3D; new Thread(&quot;Error dump: &quot; + dropboxTag) &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void run() &#123;</span><br><span class="line">            if (report !&#x3D; null) &#123;</span><br><span class="line">                &#x2F;&#x2F;比如ANR时输出Cpuinfo，或者lowmem时输出的内存信息</span><br><span class="line">                sb.append(report); </span><br><span class="line">            &#125;</span><br><span class="line">            if (logFile !&#x3D; null) &#123;</span><br><span class="line">                &#x2F;&#x2F;比如anr或者Watchdog时输出的traces文件(kill -3)，最大上限为256KB</span><br><span class="line">                sb.append(FileUtils.readTextFile(logFile, DROPBOX_MAX_SIZE,</span><br><span class="line">                            &quot;\n\n[[TRUNCATED]]&quot;));</span><br><span class="line">            &#125;</span><br><span class="line">            if (crashInfo !&#x3D; null &amp;&amp; crashInfo.stackTrace !&#x3D; null) &#123;</span><br><span class="line">                &#x2F;&#x2F; 比如crash时输出的调用栈</span><br><span class="line">                sb.append(crashInfo.stackTrace);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            String setting &#x3D; Settings.Global.ERROR_LOGCAT_PREFIX + dropboxTag;</span><br><span class="line">            int lines &#x3D; Settings.Global.getInt(mContext.getContentResolver(), setting, 0);</span><br><span class="line">            &#x2F;&#x2F;当dropboxTag所对应的settings项不等于0，则输出logcat</span><br><span class="line">            if (lines &gt; 0) &#123;</span><br><span class="line">              &#x2F;&#x2F;输出evets&#x2F;system&#x2F;main&#x2F;crash这些log信息</span><br><span class="line">              java.lang.Process logcat &#x3D; new ProcessBuilder(&quot;&#x2F;system&#x2F;bin&#x2F;logcat&quot;,</span><br><span class="line">                      &quot;-v&quot;, &quot;time&quot;, &quot;-b&quot;, &quot;events&quot;, &quot;-b&quot;, &quot;system&quot;, &quot;-b&quot;, &quot;main&quot;,</span><br><span class="line">                      &quot;-b&quot;, &quot;crash&quot;,</span><br><span class="line">                      &quot;-t&quot;, String.valueOf(lines)).redirectErrorStream(true).start();</span><br><span class="line"></span><br><span class="line">              input &#x3D; new InputStreamReader(logcat.getInputStream());</span><br><span class="line"></span><br><span class="line">              int num;</span><br><span class="line">              char[] buf &#x3D; new char[8192];</span><br><span class="line">              &#x2F;&#x2F;不断读取input中的log内容，并添加到sb</span><br><span class="line">              while ((num &#x3D; input.read(buf)) &gt; 0) sb.append(buf, 0, num);</span><br><span class="line">              ...</span><br><span class="line">            &#125;</span><br><span class="line">            &#x2F;&#x2F;将log信息输出到DropBox</span><br><span class="line">            dbox.addText(dropboxTag, sb.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    if (process &#x3D;&#x3D; null) &#123;</span><br><span class="line">        &#x2F;&#x2F;当进程为空，意味着system_server进程崩溃，系统可能很快就要挂了,</span><br><span class="line">        &#x2F;&#x2F;那么不再创建新线程，而是直接在system_server进程中同步运行</span><br><span class="line">        worker.run();</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        &#x2F;&#x2F;启动新线程</span><br><span class="line">        worker.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法主要功能是输出以下内容项：</p><ul><li>Process,flags, package等头信息；</li><li>当report不为空，则比如ANR时输出Cpuinfo，或者lowmem时输出的内存信息</li><li>当logFile不为空，则比如anr或者Watchdog时输出的traces文件(kill -3)，最大上限为256KB；</li><li>当stack不为空，则比如crash时输出的调用栈；</li><li>输出logcat的events/system/main/crash信息。</li></ul><p>AMS.processClass()方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">private static String processClass(ProcessRecord process) &#123;</span><br><span class="line">    &#x2F;&#x2F;MY_PID代表的是当前进程pid，正是system_server进程</span><br><span class="line">    if (process &#x3D;&#x3D; null || process.pid &#x3D;&#x3D; MY_PID) &#123;</span><br><span class="line">        return &quot;system_server&quot;;</span><br><span class="line">    &#125; else if ((process.info.flags &amp; ApplicationInfo.FLAG_SYSTEM) !&#x3D; 0) &#123;</span><br><span class="line">        return &quot;system_app&quot;;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        return &quot;data_app&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>dropbox文件名格式为<a href="mailto:&#x64;&#114;&#x6f;&#112;&#98;&#111;&#x78;&#x54;&#x61;&#x67;&#x40;&#120;&#x78;&#120;&#46;&#116;&#x78;&#116;">&#x64;&#114;&#x6f;&#112;&#98;&#111;&#x78;&#x54;&#x61;&#x67;&#x40;&#120;&#x78;&#120;&#46;&#116;&#x78;&#116;</a> xxx代表时间戳,例如<a href="mailto:&#x73;&#x79;&#x73;&#116;&#101;&#x6d;&#x5f;&#x73;&#101;&#x72;&#118;&#x65;&#114;&#x5f;&#99;&#114;&#x61;&#x73;&#x68;&#64;&#x31;&#52;&#x36;&#53;&#x36;&#53;&#x30;&#x38;&#52;&#x35;&#x33;&#x35;&#x35;&#x2e;&#x74;&#x78;&#116;">&#x73;&#x79;&#x73;&#116;&#101;&#x6d;&#x5f;&#x73;&#101;&#x72;&#118;&#x65;&#114;&#x5f;&#99;&#114;&#x61;&#x73;&#x68;&#64;&#x31;&#52;&#x36;&#53;&#x36;&#53;&#x30;&#x38;&#52;&#x35;&#x33;&#x35;&#x35;&#x2e;&#x74;&#x78;&#116;</a>,则记录该文件时间戳为1465650845355. 文件后缀除了.txt，还有压缩格式.txt.gz. 对于dropboxTag是由processClass + eventType组合而成.</p><p>processClass分为system_server, system_app, data_app;<br>eventType：分为crash,anr,wtf,native_cras,lowmem, watchdog</p><p>列举部分常见tags以及含义:</p><table><thead><tr><th>dropboxTag</th><th>含义</th></tr></thead><tbody><tr><td>system_server_anr</td><td>system进程无响应</td></tr><tr><td>system_server_watchdog</td><td>system进程发生watchdog</td></tr><tr><td>system_server_crash</td><td>system进程崩溃</td></tr><tr><td>system_server_native_crash</td><td>system进程native出现崩溃</td></tr><tr><td>system_server_wtf</td><td>system进程发生严重错误</td></tr><tr><td>system_server_lowmem</td><td>system进程内存不足</td></tr><tr><td>当然除了system_server进程, 还有system_app, data_app类型的进程, 以上所有类型都适用,列举部分:</td><td></td></tr></tbody></table><table><thead><tr><th>dropboxTag</th><th>含义</th></tr></thead><tbody><tr><td>system_app_crash</td><td>系统app崩溃</td></tr><tr><td>system_app_anr</td><td>系统app无响应</td></tr><tr><td>data_app_crash</td><td>普通app崩溃</td></tr><tr><td>data_app_anr</td><td>普通app无响应</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Android Framework </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ANR程序问题分析之traces</title>
      <link href="/blog/2018/07/13/ANR%E7%A8%8B%E5%BA%8F%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90%E4%B9%8Btraces/"/>
      <url>/blog/2018/07/13/ANR%E7%A8%8B%E5%BA%8F%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90%E4%B9%8Btraces/</url>
      
        <content type="html"><![CDATA[<p>每次发生ANR，这个文件都会被清空，写入新的内容。如果想查看以前发生ANR的信息，可以去查看DB文件，<br>也就是DropBox的中的日志<br>跟踪功能，保存历史上发生的所有ANR的日志<br>“/ data / system / dropbox”是DB指定的文件存放位置。<br>日志保存的最长时间，默认是3天</p><h3 id="ANR的异常信息"><a href="#ANR的异常信息" class="headerlink" title="ANR的异常信息"></a>ANR的异常信息</h3><p>使用logcat命令查看会得到类似如下的log</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;WindowManager所在的进程是system_server，进程号是127</span><br><span class="line">I&#x2F;WindowManager( 127): Input event dispatching timed out sending to com.example.anrdemo&#x2F;com.example.anrdemo.ANRActivity</span><br><span class="line">&#x2F;&#x2F;system_server进程中的ActivityManagerService请求kernel向5033进程发送SIGNAL_QUIT请求</span><br><span class="line">&#x2F;&#x2F;你可以在shell中使用命令达到相同的目的：adb shell kill -3 5033</span><br><span class="line">&#x2F;&#x2F;和其他的Java虚拟机一样，SIGNAL_QUIT也是Dalvik内部支持的功能之一</span><br><span class="line">I&#x2F;Process ( 127): Sending signal. PID: 5033 SIG: 3</span><br><span class="line">&#x2F;&#x2F;5033进程的虚拟机实例接收到SIGNAL_QUIT信号后会将进程中各个线程的函数堆栈信息输出到traces.txt文件中</span><br><span class="line">&#x2F;&#x2F;发生ANR的进程正常情况下会第一个输出</span><br><span class="line">I&#x2F;dalvikvm( 5033): threadid&#x3D;4: reacting to signal 3</span><br><span class="line">I&#x2F;dalvikvm( 5033): Wrote stack traces to &#39;&#x2F;data&#x2F;anr&#x2F;traces.txt&#39;</span><br><span class="line">... ...&#x2F;&#x2F;另外还有其他一些进程</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;随后会输出CPU使用情况</span><br><span class="line">E&#x2F;ActivityManager( 127): ANR in com.example.anrdemo (com.example.anrdemo&#x2F;.ANRActivity)</span><br><span class="line">&#x2F;&#x2F;Reason表示导致ANR问题的直接原因</span><br><span class="line">E&#x2F;ActivityManager( 127): Reason: keyDispatchingTimedOut</span><br><span class="line">E&#x2F;ActivityManager( 127): Load: 3.85 &#x2F; 3.41 &#x2F; 3.16</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;请注意ago，表示ANR发生之前的一段时间内的CPU使用率，并不是某一时刻的值</span><br><span class="line">E&#x2F;ActivityManager( 127): CPU usage from 26835ms to 3662ms ago with 99% awake:</span><br><span class="line">E&#x2F;ActivityManager( 127): 9.4% 98&#x2F;mediaserver: 9.4% user + 0% kernel</span><br><span class="line">E&#x2F;ActivityManager( 127): 8.9% 127&#x2F;system_server: 6.9% user + 2% kernel &#x2F; faults: 1823 minor</span><br><span class="line">... ...</span><br><span class="line">E&#x2F;ActivityManager( 127): +0% 5033&#x2F;com.example.anrdemo: 0% user + 0% kernel</span><br><span class="line">E&#x2F;ActivityManager( 127): 39% TOTAL: 32% user + 6.1% kernel</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;这里是later，表示ANR发生之后</span><br><span class="line">E&#x2F;ActivityManager( 127): CPU usage from 601ms to 1132ms later with 99% awake:</span><br><span class="line">E&#x2F;ActivityManager( 127): 10% 127&#x2F;system_server: 1.7% user + 8.9% kernel &#x2F; faults: 5 minor</span><br><span class="line">E&#x2F;ActivityManager( 127): 10% 163&#x2F;InputDispatcher: 1.7% user + 8.9% kernel</span><br><span class="line">E&#x2F;ActivityManager( 127): 1.7% 127&#x2F;system_server: 1.7% user + 0% kernel</span><br><span class="line">E&#x2F;ActivityManager( 127): 1.7% 135&#x2F;SurfaceFlinger: 0% user + 1.7% kernel</span><br><span class="line">E&#x2F;ActivityManager( 127): 1.7% 2814&#x2F;Binder Thread #: 1.7% user + 0% kernel</span><br><span class="line">... ...</span><br><span class="line">E&#x2F;ActivityManager( 127): 37% TOTAL: 27% user + 9.2% kernel</span><br></pre></td></tr></table></figure><p>发生ANR时Android为我们提供了两种“利器”：traces文件和CPU使用率</p><h3 id="ANR信息是如何输出的"><a href="#ANR信息是如何输出的" class="headerlink" title="ANR信息是如何输出的"></a>ANR信息是如何输出的</h3><p>ActivityManagerService类中，找到它的appNotResponding函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">    final void appNotResponding(ProcessRecord app, ActivityRecord activity,</span><br><span class="line">                                ActivityRecord parent, final String annotation) &#123;</span><br><span class="line">&#x2F;&#x2F;firstPids和lastPids两个集合存放那些将会在traces中输出信息的进程的进程号</span><br><span class="line">        ArrayList&lt;Integer&gt; firstPids &#x3D; new ArrayList&lt;Integer&gt;(5);</span><br><span class="line">        SparseArray&lt;Boolean&gt; lastPids &#x3D; new SparseArray&lt;Boolean&gt;(20);</span><br><span class="line">&#x2F;&#x2F;mController是IActivityController接口的实例，是为Monkey测试程序预留的，默认为null</span><br><span class="line">        if (mController !&#x3D; null) &#123;</span><br><span class="line">... ...</span><br><span class="line">        &#125;</span><br><span class="line">        long anrTime &#x3D; SystemClock.uptimeMillis();</span><br><span class="line">        if (MONITOR_CPU_USAGE) &#123;</span><br><span class="line">            updateCpuStatsNow(); &#x2F;&#x2F;更新CPU使用率</span><br><span class="line">        &#125;</span><br><span class="line">        synchronized (this) &#123; &#x2F;&#x2F;一些特定条件下会忽略ANR</span><br><span class="line">            if (mShuttingDown) &#123;</span><br><span class="line">                Slog.i(TAG, &quot;During shutdown skipping ANR: &quot; + app + &quot; &quot; + annotation);</span><br><span class="line">                return;</span><br><span class="line">            &#125; else if (app.notResponding) &#123;</span><br><span class="line">                Slog.i(TAG, &quot;Skipping duplicate ANR: &quot; + app + &quot; &quot; + annotation);</span><br><span class="line">                return;</span><br><span class="line">            &#125; else if (app.crashing) &#123;</span><br><span class="line">                Slog.i(TAG, &quot;Crashing app skipping ANR: &quot; + app + &quot; &quot; + annotation);</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">            &#x2F;&#x2F;使用一个标志变量避免同一个应用在没有处理完时重复输出log</span><br><span class="line">            app.notResponding &#x3D; true;</span><br><span class="line">... ...</span><br><span class="line">         &#x2F;&#x2F;①当前发生ANR的应用进程被第一个添加进firstPids集合中</span><br><span class="line">            firstPids.add(app.pid);</span><br><span class="line">... ...</span><br><span class="line">        &#125;</span><br><span class="line">... ...</span><br><span class="line">        &#x2F;&#x2F;②dumpStackTraces是输出traces文件的函数</span><br><span class="line">        File tracesFile &#x3D; dumpStackTraces(true, firstPids, processStats, lastPids, null);</span><br><span class="line">        String cpuInfo &#x3D; null;</span><br><span class="line">        if (MONITOR_CPU_USAGE) &#123; &#x2F;&#x2F;MONITOR_CPU_USAGE默认为true</span><br><span class="line">            updateCpuStatsNow(); &#x2F;&#x2F;再次更新CPU信息</span><br><span class="line">            synchronized (mProcessStatsThread) &#123;</span><br><span class="line">                &#x2F;&#x2F;输出ANR发生前一段时间内的CPU使用率</span><br><span class="line">                cpuInfo &#x3D; mProcessStats.printCurrentState(anrTime);</span><br><span class="line">            &#125;</span><br><span class="line">            info.append(processStats.printCurrentLoad());</span><br><span class="line">            info.append(cpuInfo);</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;输出ANR发生后一段时间内的CPU使用率</span><br><span class="line">        info.append(processStats.printCurrentState(anrTime));</span><br><span class="line">... ...</span><br><span class="line">        &#x2F;&#x2F;③将ANR信息同时输出到DropBox中</span><br><span class="line">        addErrorToDropBox(&quot;anr&quot;, app, app.processName, activity, parent, annotation,</span><br><span class="line">                cpuInfo, tracesFile, null);</span><br><span class="line">... ...</span><br><span class="line">        &#x2F;&#x2F;在Android4.0中可以设置是否不显示ANR提示对话框，如果设置的话就不会显示对话框，并且会杀掉ANR进程</span><br><span class="line">        boolean showBackground &#x3D; Settings.Secure.getInt(mContext.getContentResolver(),</span><br><span class="line">                Settings.Secure.ANR_SHOW_BACKGROUND, 0) !&#x3D; 0;</span><br><span class="line">        synchronized (this) &#123;</span><br><span class="line">            if (!showBackground &amp;&amp; !app.isInterestingToUserLocked() &amp;&amp; app.pid !&#x3D; MY_PID) &#123;</span><br><span class="line">... ...</span><br><span class="line">                Process.killProcessQuiet(app.pid);</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">... ...</span><br><span class="line">            &#x2F;&#x2F; 显示ANR提示对话框</span><br><span class="line">            Message msg &#x3D; Message.obtain();</span><br><span class="line">            HashMap map &#x3D; new HashMap();</span><br><span class="line">            msg.what &#x3D; SHOW_NOT_RESPONDING_MSG;</span><br><span class="line">            msg.obj &#x3D; map;</span><br><span class="line">            map.put(&quot;app&quot;, app);</span><br><span class="line">            if (activity !&#x3D; null) &#123;</span><br><span class="line">                map.put(&quot;activity&quot;, activity);</span><br><span class="line">            &#125;</span><br><span class="line">            mHandler.sendMessage(msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>当前发生ANR的应用进程被第一个添加进firstPids集合中，所以会第一个向traces文件中写入信息。反过来说，traces文件中出现的第一个进程正常情况下就是发生ANR的那个进程。不过有时候会很不凑巧，发生ANR的进程还没有来得及输出trace信息，就由于某种原因退出了，所以偶尔会遇到traces文件中找不到发生ANR的进程信息的情况。<br>dumpStackTraces是输出traces文件的函数，接下来分析这个函数<br>addErrorToDropBox函数将ANR信息同时输出到DropBox中，它也是个非常有用的日志存放工具，后面也会分析它的作用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"> public static File dumpStackTraces(boolean clearTraces, ArrayList&lt;Integer&gt; firstPids,</span><br><span class="line">                                       ProcessStats processStats, SparseArray&lt;Boolean&gt; lastPids, String[] nativeProcs) &#123;</span><br><span class="line">&#x2F;&#x2F;系统属性“dalvik.vm.stack-trace-file”用来配置trace信息输出文件</span><br><span class="line">        String tracesPath &#x3D; SystemProperties.get(&quot;dalvik.vm.stack-trace-file&quot;, null);</span><br><span class="line">        if (tracesPath &#x3D;&#x3D; null || tracesPath.length() &#x3D;&#x3D; 0) &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        File tracesFile &#x3D; new File(tracesPath);</span><br><span class="line">        try &#123;</span><br><span class="line">            File tracesDir &#x3D; tracesFile.getParentFile();</span><br><span class="line">            if (!tracesDir.exists()) tracesFile.mkdirs();</span><br><span class="line">&#x2F;&#x2F;FileUtils.setPermissions是个很有用的函数，设置文件属性时经常会用到</span><br><span class="line">            FileUtils.setPermissions(tracesDir.getPath(), 0775, -1, -1); &#x2F;&#x2F; drwxrwxr-x</span><br><span class="line">&#x2F;&#x2F;clearTraces为true，会删除旧文件，创建新文件</span><br><span class="line">            if (clearTraces &amp;&amp; tracesFile.exists()) tracesFile.delete();</span><br><span class="line">            tracesFile.createNewFile();</span><br><span class="line">            FileUtils.setPermissions(tracesFile.getPath(), 0666, -1, -1); &#x2F;&#x2F; -rw-rw-rw-</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            Slog.w(TAG, &quot;Unable to prepare ANR traces file: &quot; + tracesPath, e);</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">&#x2F;&#x2F;一个重载函数</span><br><span class="line">        dumpStackTraces(tracesPath, firstPids, processStats, lastPids, nativeProcs);</span><br><span class="line">        return tracesFile;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>之所以trace信息会输出到“/data/anr/traces.txt”文件中，就是系统属性“dalvik.vm.stack-trace-file”设置的。你可以通过在设备的shell中使用setprop和getprop对系统属性进行设置和读取：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">getpropdalvik.vm.stack-trace-file</span><br><span class="line">setprop dalvik.vm.stack-trace-file &#x2F;tmp&#x2F;stack-traces.txt</span><br></pre></td></tr></table></figure><p>每次发生ANR时都会删除旧的traces文件，重新创建新文件。也就是说Android只保留最后一次发生ANR时的traces信息，那么以前的traces信息就丢失了么？稍后回答。<br>接着来看重载的dumpStackTraces函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">   private static void dumpStackTraces(String tracesPath, ArrayList&lt;Integer&gt; firstPids,</span><br><span class="line">                                        ProcessStats processStats, SparseArray&lt;Boolean&gt; lastPids, String[] nativeProcs) &#123;</span><br><span class="line">&#x2F;&#x2F;使用FileObserver监听应用进程是否已经完成写入traces文件的操作</span><br><span class="line">&#x2F;&#x2F;Android在判断桌面壁纸文件是否设置完成时也是用的FileObserver，很有用的类</span><br><span class="line">        FileObserver observer &#x3D; new FileObserver(tracesPath, FileObserver.CLOSE_WRITE) &#123;</span><br><span class="line">            public synchronized void onEvent(int event, String path) &#123;</span><br><span class="line">                notify();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">... ...</span><br><span class="line">&#x2F;&#x2F;首先输出firstPids集合中指定的进程，这些也是对ANR问题来说最重要的进程</span><br><span class="line">        if (firstPids !&#x3D; null) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                int num &#x3D; firstPids.size();</span><br><span class="line">                for (int i &#x3D; 0; i &lt; num; i++) &#123;</span><br><span class="line">                    synchronized (observer) &#123;</span><br><span class="line">&#x2F;&#x2F;前面提到的SIGNAL_QUIT</span><br><span class="line">                        Process.sendSignal(firstPids.get(i), Process.SIGNAL_QUIT);</span><br><span class="line">                        observer.wait(200);</span><br><span class="line">... ...</span><br><span class="line">                    &#125;</span><br></pre></td></tr></table></figure><h3 id="分析ANR的trace信息"><a href="#分析ANR的trace信息" class="headerlink" title="分析ANR的trace信息"></a>分析ANR的trace信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;文件中输出的第一个进程的trace信息，正是发生ANR的演示程序</span><br><span class="line">&#x2F;&#x2F;开头显示进程号、ANR发生的时间点和进程名称</span><br><span class="line">----- pid 9183 at 2012-09-28 22:20:42 -----</span><br><span class="line">Cmd line: com.example.anrdemo</span><br><span class="line"> </span><br><span class="line">DALVIK THREADS: &#x2F;&#x2F;以下是各个线程的函数堆栈信息</span><br><span class="line">&#x2F;&#x2F;mutexes表示虚拟机实例中各种线程相关对象锁的value值</span><br><span class="line">(mutexes: tll&#x3D;0 tsl&#x3D;0 tscl&#x3D;0 ghl&#x3D;0 hwl&#x3D;0 hwll&#x3D;0)</span><br><span class="line">&#x2F;&#x2F;依次是：线程名、线程优先级、线程创建时的序号、①线程当前状态</span><br><span class="line">&quot;main&quot; prio&#x3D;5 tid&#x3D;1 TIMED_WAIT</span><br><span class="line">&#x2F;&#x2F;依次是：线程组名称、suspendCount、debugSuspendCount、线程的Java对象地址、线程的Native对象地址</span><br><span class="line">| group&#x3D;&quot;main&quot; sCount&#x3D;1 dsCount&#x3D;0 obj&#x3D;0x4025b1b8 self&#x3D;0xce68</span><br><span class="line">&#x2F;&#x2F;sysTid是线程号，主线程的线程号和进程号相同</span><br><span class="line">| sysTid&#x3D;9183 nice&#x3D;0 sched&#x3D;0&#x2F;0 cgrp&#x3D;default handle&#x3D;-1345002368</span><br><span class="line">| schedstat&#x3D;( 140838632 210998525 213 )</span><br><span class="line">at java.lang.VMThread.sleep(Native Method)</span><br><span class="line">at java.lang.Thread.sleep(Thread.java:1213)</span><br><span class="line">at java.lang.Thread.sleep(Thread.java:1195)</span><br><span class="line">at com.example.anrdemo.ANRActivity.makeANR(ANRActivity.java:44)</span><br><span class="line">at com.example.anrdemo.ANRActivity.onClick(ANRActivity.java:38)</span><br><span class="line">at android.view.View.performClick(View.java:2486)</span><br><span class="line">at android.view.View$PerformClick.run(View.java:9130)</span><br><span class="line">at android.os.Handler.handleCallback(Handler.java:587)</span><br><span class="line">at android.os.Handler.dispatchMessage(Handler.java:92)</span><br><span class="line">at android.os.Looper.loop(Looper.java:130)</span><br><span class="line">at android.app.ActivityThread.main(ActivityThread.java:3703)</span><br><span class="line">at java.lang.reflect.Method.invokeNative(Native Method)</span><br><span class="line">at java.lang.reflect.Method.invoke(Method.java:507)</span><br><span class="line">at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:841)</span><br><span class="line">at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:599)</span><br><span class="line">at dalvik.system.NativeStart.main(Native Method)</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F;②Binder线程是进程的线程池中用来处理binder请求的线程</span><br><span class="line">&quot;Binder Thread #2&quot; prio&#x3D;5 tid&#x3D;8 NATIVE</span><br><span class="line">| group&#x3D;&quot;main&quot; sCount&#x3D;1 dsCount&#x3D;0 obj&#x3D;0x40750b90 self&#x3D;0x1440b8</span><br><span class="line">| sysTid&#x3D;9190 nice&#x3D;0 sched&#x3D;0&#x2F;0 cgrp&#x3D;default handle&#x3D;1476256</span><br><span class="line">| schedstat&#x3D;( 915528 18463135 4 )</span><br><span class="line">at dalvik.system.NativeStart.run(Native Method)</span><br><span class="line"> </span><br><span class="line">&quot;Binder Thread #1&quot; prio&#x3D;5 tid&#x3D;7 NATIVE</span><br><span class="line">| group&#x3D;&quot;main&quot; sCount&#x3D;1 dsCount&#x3D;0 obj&#x3D;0x4074f848 self&#x3D;0x78d40</span><br><span class="line">| sysTid&#x3D;9189 nice&#x3D;0 sched&#x3D;0&#x2F;0 cgrp&#x3D;default handle&#x3D;1308088</span><br><span class="line">| schedstat&#x3D;( 3509523 25543212 10 )</span><br><span class="line">at dalvik.system.NativeStart.run(Native Method)</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F;线程名称后面标识有daemon，说明这是个守护线程</span><br><span class="line">&quot;Compiler&quot; daemon prio&#x3D;5 tid&#x3D;6 VMWAIT</span><br><span class="line">| group&#x3D;&quot;system&quot; sCount&#x3D;1 dsCount&#x3D;0 obj&#x3D;0x4074b928 self&#x3D;0x141e78</span><br><span class="line">| sysTid&#x3D;9188 nice&#x3D;0 sched&#x3D;0&#x2F;0 cgrp&#x3D;default handle&#x3D;1506000</span><br><span class="line">| schedstat&#x3D;( 21606438 21636964 101 )</span><br><span class="line">at dalvik.system.NativeStart.run(Native Method)</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F;JDWP线程是支持虚拟机调试的线程，不需要关心</span><br><span class="line">&quot;JDWP&quot; daemon prio&#x3D;5 tid&#x3D;5 VMWAIT</span><br><span class="line">| group&#x3D;&quot;system&quot; sCount&#x3D;1 dsCount&#x3D;0 obj&#x3D;0x4074b878 self&#x3D;0x16c958</span><br><span class="line">| sysTid&#x3D;9187 nice&#x3D;0 sched&#x3D;0&#x2F;0 cgrp&#x3D;default handle&#x3D;1510224</span><br><span class="line">| schedstat&#x3D;( 366211 2807617 7 )</span><br><span class="line">at dalvik.system.NativeStart.run(Native Method)</span><br><span class="line">&#x2F;&#x2F;“Signal Catcher”负责接收和处理kernel发送的各种信号，例如SIGNAL_QUIT、SIGNAL_USR1等就是被该线程</span><br><span class="line">&#x2F;&#x2F;接收到，这个文件的内容就是由该线程负责输出的，可以看到它的状态是RUNNABLE，不过此线程也不需要关心</span><br><span class="line">&quot;Signal Catcher&quot; daemon prio&#x3D;5 tid&#x3D;4 RUNNABLE</span><br><span class="line">| group&#x3D;&quot;system&quot; sCount&#x3D;0 dsCount&#x3D;0 obj&#x3D;0x4074b7b8 self&#x3D;0x150008</span><br><span class="line">| sysTid&#x3D;9186 nice&#x3D;0 sched&#x3D;0&#x2F;0 cgrp&#x3D;default handle&#x3D;1501664</span><br><span class="line">| schedstat&#x3D;( 1708985 6286621 9 )</span><br><span class="line">at dalvik.system.NativeStart.run(Native Method)</span><br><span class="line"> </span><br><span class="line">&quot;GC&quot; daemon prio&#x3D;5 tid&#x3D;3 VMWAIT</span><br><span class="line">| group&#x3D;&quot;system&quot; sCount&#x3D;1 dsCount&#x3D;0 obj&#x3D;0x4074b710 self&#x3D;0x168010</span><br><span class="line">| sysTid&#x3D;9185 nice&#x3D;0 sched&#x3D;0&#x2F;0 cgrp&#x3D;default handle&#x3D;1503184</span><br><span class="line">| schedstat&#x3D;( 305176 4821778 2 )</span><br><span class="line">at dalvik.system.NativeStart.run(Native Method)</span><br><span class="line"> </span><br><span class="line">&quot;HeapWorker&quot; daemon prio&#x3D;5 tid&#x3D;2 VMWAIT</span><br><span class="line">| group&#x3D;&quot;system&quot; sCount&#x3D;1 dsCount&#x3D;0 obj&#x3D;0x4074b658 self&#x3D;0x16a080</span><br><span class="line">| sysTid&#x3D;9184 nice&#x3D;0 sched&#x3D;0&#x2F;0 cgrp&#x3D;default handle&#x3D;550856</span><br><span class="line">| schedstat&#x3D;( 33691407 26336669 15 )</span><br><span class="line">at dalvik.system.NativeStart.run(Native Method)</span><br><span class="line"> </span><br><span class="line">----- end 9183 -----</span><br><span class="line"> </span><br><span class="line">----- pid 127 at 2012-09-28 22:20:42 -----</span><br><span class="line">Cmd line: system_server</span><br><span class="line">... ...</span><br><span class="line">&#x2F;&#x2F;省略其他进程的信息</span><br></pre></td></tr></table></figure><h3 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h3><table><thead><tr><th>Thread.java中定义的状态</th><th>Thread.cpp中定义的状态</th><th>说明</th></tr></thead><tbody><tr><td>TERMINATED</td><td>ZOMBIE</td><td>线程死亡，终止运行</td></tr><tr><td>RUNNABLE</td><td>RUNNING/RUNNABLE</td><td>线程可运行或正在运行</td></tr><tr><td>TIMED_WAITING</td><td>TIMED_WAIT</td><td>执行了带有超时参数的wait、sleep或join函数</td></tr><tr><td>BLOCKED</td><td>MONITOR</td><td>线程阻塞，等待获取对象锁</td></tr><tr><td>WAITING</td><td>WAIT</td><td>执行了无超时参数的wait函数</td></tr><tr><td>NEW</td><td>INITIALIZING</td><td>新建，正在初始化，为其分配资源</td></tr><tr><td>NEW</td><td>STARTING</td><td>新建，正在启动</td></tr><tr><td>RUNNABLE</td><td>NATIVE</td><td>正在执行JNI本地函数</td></tr><tr><td>WAITING</td><td>VMWAIT</td><td>正在等待VM资源</td></tr><tr><td>RUNNABLE</td><td>SUSPENDED</td><td>线程暂停，通常是由于GC或debug被暂停</td></tr><tr><td></td><td>UNKNOWN</td><td>未知状态</td></tr><tr><td>Thread.java中的状态和Thread.cpp中的状态是有对应关系的。可以看到前者更加概括，也比较容易理解，面向Java的使用者；而后者更详细，面向虚拟机内部的环境。traces.txt中显示的线程状态都是Thread.cpp中定义的。另外，所有的线程都是遵循POSIX标准的本地线程。关于线程更多的说明可以查阅源码/dalvik/vm/Thread.cpp中的说明。<!-- 线程的ThreadGroup最好也写进去 --></td><td></td><td></td></tr><tr><td>traces.txt文件中的这些信息是由每个Dalvik进程的SignalCatcher线程输出的，相关代码可以查看/dalvik/vm/目录下的SignalCatcher.cpp::logThreadStacks函数和Thread.cpp:: dvmDumpAllThreadsEx函数。另外请注意，输出堆栈信息时SignalCatcher会暂停所有线程。</td><td></td><td></td></tr><tr><td>通过该文件很容易就能知道问题进程的主线程发生ANR时正在执行怎样的操作。例如上述示例， ANRActivity在makeANR函数中执行线程sleep时发生ANR，可以推测sleep时间过长，超过了超时上限导致。</td><td></td><td></td></tr></tbody></table><h3 id="CPU使用率"><a href="#CPU使用率" class="headerlink" title="CPU使用率"></a>CPU使用率</h3><p>内容读取自/proc/stat</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">E&#x2F;ActivityManager( 127): ANR in com.example.anrdemo (com.example.anrdemo&#x2F;.ANRActivity)</span><br><span class="line">E&#x2F;ActivityManager( 127): Reason: keyDispatchingTimedOut</span><br><span class="line">E&#x2F;ActivityManager( 127): Load: 3.85 &#x2F; 3.41 &#x2F; 3.16 &#x2F;&#x2F;➀ CPU平均负载</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F;②ANR发生之前的一段时间内的CPU使用率</span><br><span class="line">E&#x2F;ActivityManager( 127): CPU usage from 26835ms to 3662ms ago with 99% awake:&#x2F;&#x2F;③</span><br><span class="line">E&#x2F;ActivityManager( 127): 9.4% 98&#x2F;mediaserver: 9.4% user + 0% kernel</span><br><span class="line">E&#x2F;ActivityManager( 127): 8.9% 127&#x2F;system_server: 6.9% user + 2% kernel &#x2F; faults: 1823 minor &#x2F;&#x2F;⑤ minor或者major的页错误次数</span><br><span class="line">... ...</span><br><span class="line">E&#x2F;ActivityManager( 127):&#x2F;&#x2F;⑥+0% 5033&#x2F;com.example.anrdemo: 0% user + 0% kernel</span><br><span class="line">E&#x2F;ActivityManager( 127): 39% TOTAL: 32% user + 6.1% kernel</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F;⑦ANR发生之后的一段时间内的CPU使用率</span><br><span class="line">E&#x2F;ActivityManager( 127): CPU usage from 601ms to 1132ms later with 99% awake:</span><br><span class="line">E&#x2F;ActivityManager( 127): 10% 127&#x2F;system_server: 1.7% user + 8.9% kernel &#x2F; faults: 5 minor</span><br><span class="line">E&#x2F;ActivityManager( 127): 10% 163&#x2F;InputDispatcher: 1.7% user + 8.9% kernel</span><br><span class="line">E&#x2F;ActivityManager( 127): 1.7% 127&#x2F;system_server: 1.7% user + 0% kernel</span><br><span class="line">E&#x2F;ActivityManager( 127): 1.7% 135&#x2F;SurfaceFlinger: 0% user + 1.7% kernel</span><br><span class="line">E&#x2F;ActivityManager( 127): 1.7% 2814&#x2F;Binder Thread #: 1.7% user + 0% kernel</span><br><span class="line">... ...</span><br><span class="line">E&#x2F;ActivityManager( 127): 37% TOTAL: 27% user + 9.2% kernel</span><br></pre></td></tr></table></figure><h4 id="CPU负载-平均负载"><a href="#CPU负载-平均负载" class="headerlink" title="CPU负载/平均负载"></a>CPU负载/平均负载</h4><p>CPU负载是指某一时刻系统中运行队列长度之和加上当前正在CPU上运行的进程数，而CPU平均负载可以理解为一段时间内正在使用和等待使用CPU的活动进程的平均数量。在Linux中“活动进程”是指当前状态为运行或不可中断阻塞的进程。通常所说的负载其实就是指平均负载。<br>用一个从网上看到的很生动的例子来说明（不考虑CPU时间片的限制），把设备中的一个单核CPU比作一个电话亭，把进程比作正在使用和等待使用电话的人，假如有一个人正在打电话，有三个人在排队等待，此刻电话亭的负载就是4。使用中会不断的有人打完电话离开，也会不断的有其他人排队等待，为了得到一个有参考价值的负载值，可以规定每隔5秒记录一下电话亭的负载，并将某一时刻之前的一分钟、五分钟、十五分钟的的负载情况分别求平均值，最终就得到了三个时段的平均负载。<br>实际上我们通常关心的就是在某一时刻的前一分钟、五分钟、十五分钟的CPU平均负载，例如以上日志中这三个值分别是3.85、3.41、3.16，说明前一分钟内正在使用和等待使用CPU的活动进程平均有3.85个，依此类推。在大型服务器端应用中主要关注的是第五分钟和第十五分钟的两个值，但是Android主要应用在便携手持设备中，有特殊的软硬件环境和应用场景，短时间内的系统的较高负载就有可能造成ANR，所以笔者认为一分钟内的平均负载相对来说更具有参考价值。<br>CPU的负载和使用率没有必然关系，有可能只有一个进程在使用CPU，但执行的是复杂的操作；也有可能等待和正在使用CPU的进程很多，但每个进程执行的都是简单操作。<br>实际处理问题时偶尔会遇到由于平均负载高引起的ANR，典型的特征就是系统中应用进程数量多，CPU总使用率较高，但是每个进程的CPU使用率不高，当前应用进程主线程没有异常阻塞，一分钟内的CPU平均负载较高。</p><blockquote><p>提示：Linux内核不断进行着CPU负载的记录，我们可以在任意时刻通过在shell中执行“cat /proc/loadavg”查看。</p></blockquote><h4 id="ANR发生之前和之后一段时间的CPU使用率"><a href="#ANR发生之前和之后一段时间的CPU使用率" class="headerlink" title="ANR发生之前和之后一段时间的CPU使用率"></a>ANR发生之前和之后一段时间的CPU使用率</h4><p>CPU使用率可以理解为一段时间（记作T）内除CPU空闲时间（记作I）之外的时间与这段时间T的比值，用公式表示可以写为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CPU使用率&#x3D; (T – I) &#x2F; T</span><br></pre></td></tr></table></figure><p>而时间段T是两个采样时间点的时间差值。<br>之所以可以这样计算，是因为Linux内核会把从系统启动开始到当前时刻CPU活动的所有时间信息都记录下来，我们可以通过查看“/proc/stat”文件获取这些信息。主要包括以下几种时间，这些时间都是从系统启动开始计算的，单位都是0.01秒：</p><ul><li>user： CPU在用户态的运行时间，不包括nice值为负数的进程运行的时间</li><li>nice： CPU在用户态并且nice值为负数的进程运行的时间</li><li>system：CPU在内核态运行的时间</li><li>idle： CPU空闲时间，不包括iowait时间</li><li>iowait： CPU等待I/O操作的时间</li><li>irq： CPU硬中断的时间</li><li>softirq：CPU软中断的时间</li></ul><blockquote><p>注意：随着Linux内核版本的不同，包含的时间类型有可能不同,Android源码只需要关心以上七种类型即可</p></blockquote><p>CPU使用率的计算是在ProcessStats类中实现的。如果在某两个时刻T1和T2（T1 &lt; T2）进行采样记录，CPU使用率的整个算法可以归纳为以下几个公式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">userTime &#x3D; (user2 + nice2) – (user1 + nice1)</span><br><span class="line">systemTime &#x3D; system2 - system1</span><br><span class="line">idleTime &#x3D; idle2 - idle1</span><br><span class="line">iowaitTime &#x3D; iowait2 - iowait1</span><br><span class="line">irqTime &#x3D; irq2 - irq1</span><br><span class="line">softirqTime &#x3D; softirq2 - softirq1</span><br><span class="line">TotalTime &#x3D; userTime + systemTime + idleTime + iowaitTime + irqTime + softirqTime</span><br></pre></td></tr></table></figure><p>有了以上数据就可以计算具体的使用率了，例如用户态CPU使用率为：<br><code>userCpuUsage = userTime / TotalTime</code><br>依此类推可以计算其他类型的使用率。而整个时间段内CPU使用率为：<br><code>CpuUsage = (TotalTime – idleTime) / TotalTime</code><br>以上计算的是整个系统的CPU使用率，对于指定进程的使用率是通过读取该进程的“/proc/进程号/stat”文件计算的，而对于指定进程的指定线程的使用率是通过读取该线程的“/proc/进程号/task/线程号/stat”文件计算的。进程和线程的CPU使用率只包含该进程或线程的总使用率、用户态使用率和内核态使用率。<br>AMS在执行appNotResponding函数过程中，共输出了两个时间段的CPU使用率，通常情况下在ANR发生时间点之前和之后各有一段。两段使用率都是两次调用ProcessStats对象的update函数，每次调用update函数时会保留上一时间点的采样数据，并记录当前时间点的采样数据。然后再调用ProcessStats对象的printCurrentState函数<br>代码位置ActivityManagerService.java → appNotResponding</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    &#x2F;&#x2F;第一次使用成员变量mProcessStats采样</span><br><span class="line">if(MONITOR_CPU_USAGE)</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        updateCpuStatsNow();</span><br><span class="line">    &#125;</span><br><span class="line">......</span><br><span class="line">    &#x2F;&#x2F;声明了一个局部变量，参数true表示包括线程信息</span><br><span class="line">    final ProcessStats processStats &#x3D; new ProcessStats(true);</span><br><span class="line">    &#x2F;&#x2F;将processStats作为实参传入，在dumpStackTraces中相隔500毫秒两次调用其update函数进行采样</span><br><span class="line">    File tracesFile &#x3D; dumpStackTraces(true, firstPids, processStats, lastPids);</span><br><span class="line">    String cpuInfo &#x3D; null;</span><br><span class="line">if(MONITOR_CPU_USAGE)</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">&#x2F;&#x2F;因为在第一次调用后，可能由于输出trace信息等操作，中间执行了较长的时间，所以有第二次使用成员变量</span><br><span class="line">&#x2F;&#x2F;mProcessStats采样，尽量使得采样时间点靠后。</span><br><span class="line">&#x2F;&#x2F;此函数中要求连续两次采样时间间隔不少于5秒，所以一般不会执行第二次采样。一旦执行，就会出现两个采样</span><br><span class="line">&#x2F;&#x2F;时间点一个在ANR发生之前，另一个在其之后，或者两个时间点都在ANR发生之后的情况。</span><br><span class="line">        updateCpuStatsNow();</span><br><span class="line">        synchronized (mProcessStatsThread) &#123;</span><br><span class="line">&#x2F;&#x2F;mProcessStats是成员变量，创建对象时传入的参数是false，所以不包括线程信息</span><br><span class="line">&#x2F;&#x2F;此处先输出ANR发生之前一段时间内的CPU使用率</span><br><span class="line">            cpuInfo &#x3D; mProcessStats.printCurrentState(anrTime);</span><br><span class="line">        &#125;</span><br><span class="line">        info.append(processStats.printCurrentLoad());</span><br><span class="line">        info.append(cpuInfo);</span><br><span class="line">    &#125;</span><br><span class="line">&#x2F;&#x2F;processStats对象是在ANR发生后创建并采样的，所以输出的是ANR发生之后一段时间内的CPU使用率</span><br><span class="line">info.append(processStats.printCurrentState(anrTime));</span><br></pre></td></tr></table></figure><h4 id="非睡眠时间百分比"><a href="#非睡眠时间百分比" class="headerlink" title="非睡眠时间百分比"></a>非睡眠时间百分比</h4><p>在记录CPU使用率的每个采样时间点时使用了两种记录方法：SystemClock.uptimeMillis()和SystemClock.elapsedRealtime()，两者的区别就是uptimeMillis不包含睡眠时间，所以两个采样时间点之间的uptimeMillis和elapsedRealtime之比就是非睡眠时间百分比。</p><h4 id="页错误次数"><a href="#页错误次数" class="headerlink" title="页错误次数"></a>页错误次数</h4><p>进程的CPU使用率最后输出的“faults: xxx minor/major”部分表示的是页错误次数，当次数为0时不显示。major是指Major Page Fault（主要页错误，简称MPF），内核在读取数据时会先后查找CPU的高速缓存和物理内存，如果找不到会发出一个MPF信息，请求将数据加载到内存。Minor是指Minor Page Fault（次要页错误，简称MnPF），磁盘数据被加载到内存后，内核再次读取时，会发出一个MnPF信息。一个文件第一次被读写时会有很多的MPF，被缓存到内存后再次访问MPF就会很少，MnPF反而变多，这是内核为减少效率低下的磁盘I/O操作采用的缓存技术的结果。</p><p>如果ANR发生时发现CPU使用率中iowait占比很高，可以通过查看进程的major次数来推断是哪个进程在进行磁盘I/O操作。<!-- 求证一下 --></p><h4 id="新增和移除的进程或线程"><a href="#新增和移除的进程或线程" class="headerlink" title="新增和移除的进程或线程"></a>新增和移除的进程或线程</h4><p>如果一个进程或线程的CPU使用率前有“+”，说明该进程或线程是在最后两次CPU使用率采样时间段内新建的；反之如果是“-”，说明该进程或线程在采样时间段内终止了；如果是空，说明该进程或线程是在倒数第二次采样时间点之前已经存在。</p>]]></content>
      
      
      <categories>
          
          <category> Android Framework </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ANR程序无响应简介</title>
      <link href="/blog/2018/07/12/ANR%E7%A8%8B%E5%BA%8F%E6%97%A0%E5%93%8D%E5%BA%94%E7%AE%80%E4%BB%8B/"/>
      <url>/blog/2018/07/12/ANR%E7%A8%8B%E5%BA%8F%E6%97%A0%E5%93%8D%E5%BA%94%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<p>ANR，英文全称为 Application Not Responding，即应用无响应。<br>具体表现，弹出一个应用无响应的窗口，也可能不弹出直接闪退。</p><h3 id="ANR的类型"><a href="#ANR的类型" class="headerlink" title="ANR的类型"></a>ANR的类型</h3><p>ANR一般有三种类型：</p><ol><li>KeyDispatchTimeout(5 seconds) –主要类型 按键或触摸事件在特定时间内无响应<br>定义参考：ActivityManagerService.java<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; How long we wait until we timeout on key dispatching.</span><br><span class="line">static final int KEY_DISPATCHING_TIMEOUT &#x3D; 5*1000;</span><br></pre></td></tr></table></figure></li><li>BroadcastTimeout(前台 10 seconds，后台 60 seconds) BroadcastReceiver在特定时间内无法处理完成<br>定义参考：ActivityManagerService.java<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; How long we allow a receiver to run before giving up on it.</span><br><span class="line">static final int BROADCAST_FG_TIMEOUT &#x3D; 10*1000;</span><br><span class="line">static final int BROADCAST_BG_TIMEOUT &#x3D; 60*1000;</span><br></pre></td></tr></table></figure></li><li>ServiceTimeout(前台 20 seconds，后台 200 seconds) –小概率类型 Service在特定的时间内无法处理完成<br>定义参考：ActiveServices.java<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; How long we wait for a service to finish executing.</span><br><span class="line">static final int SERVICE_TIMEOUT &#x3D; 20*1000;</span><br><span class="line">&#x2F;&#x2F; How long we wait for a service to finish executing.</span><br><span class="line">static final int SERVICE_BACKGROUND_TIMEOUT &#x3D; SERVICE_TIMEOUT * 10;</span><br></pre></td></tr></table></figure><h3 id="ANR产生的原因"><a href="#ANR产生的原因" class="headerlink" title="ANR产生的原因"></a>ANR产生的原因</h3></li><li>应用自身引起，例如：<br>主线程阻塞、IOWait等；</li><li>其他进程间接引起，例如：<br>当前应用进程进行进程间通信请求其他进程，其他进程的操作长时间没有反馈；<br>其他进程的CPU占用率高，使得当前应用进程无法抢占到CPU时间片</li></ol><h3 id="ANR的分析解决"><a href="#ANR的分析解决" class="headerlink" title="ANR的分析解决"></a>ANR的分析解决</h3><ol><li>分析ANR Trace文件<br>ANR Trace文件的路径：/data/anr/traces.txt<br>导出traces.txt文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb pull &#x2F;data&#x2F;anr&#x2F;traces.txt      .&#x2F;</span><br></pre></td></tr></table></figure><blockquote><p>注意:每次发生ANR时都会删除旧的traces文件，重新创建新文件。也就是说Android只保留最后一次发生ANR时的traces信息</p></blockquote></li><li>分析Android的异常信息收集DropBox的日志<br>DropBox文件路径: /data/system/dropbox<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb pull &#x2F;data&#x2F;system&#x2F;dropbox&#x2F;      .&#x2F;</span><br></pre></td></tr></table></figure></li><li>通过<a href="https://github.com/markzhai/AndroidPerformanceMonitor">BlockCanary</a>检测耗时操作，应用内集成进行检测,将IO操作/耗时操作全部封装成异步任务，放进子线程.</li></ol>]]></content>
      
      
      <categories>
          
          <category> Android Framework </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>控制屏幕底部导航栏的显示与隐藏</title>
      <link href="/blog/2018/07/11/%E6%8E%A7%E5%88%B6%E5%B1%8F%E5%B9%95%E5%BA%95%E9%83%A8%E5%AF%BC%E8%88%AA%E6%A0%8F%E7%9A%84%E6%98%BE%E7%A4%BA%E4%B8%8E%E9%9A%90%E8%97%8F/"/>
      <url>/blog/2018/07/11/%E6%8E%A7%E5%88%B6%E5%B1%8F%E5%B9%95%E5%BA%95%E9%83%A8%E5%AF%BC%E8%88%AA%E6%A0%8F%E7%9A%84%E6%98%BE%E7%A4%BA%E4%B8%8E%E9%9A%90%E8%97%8F/</url>
      
        <content type="html"><![CDATA[<p>导航栏（也就是屏幕底部的三个按钮,home,back,recentapp）是系统应用SystemUi.apk的一部分.我们可以在SystemUi.apk的源码中留下接口便于我们控制导航栏的显示和隐藏，我们可以通过广播的接收与发送的方式来实现这个接口。</p><pre><code>app-------&gt;发送广播（hide/show）SystemUi.apk--------&gt;监听广播 (hide-隐藏导航栏，show-显示导航栏)</code></pre><p>SystemUi.apk是系统应用，它在Android文件系统中的路径是：/system/app/；它在Android源码中的路径是：frameworks/base/packages/SystemUI/；</p><p>我们只需修改frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBar.java</p><p>&lt;1&gt;显示方法使用addNavigationBar()（原有）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">private void addNavigationBar() &#123;  </span><br><span class="line">    if (DEBUG) Slog.v(TAG, &quot;addNavigationBar: about to add &quot; + mNavigationBarView);  </span><br><span class="line">    if (mNavigationBarView &#x3D;&#x3D; null) return;  </span><br><span class="line">  </span><br><span class="line">    prepareNavigationBarView();  </span><br><span class="line">  </span><br><span class="line">    mWindowManager.addView(mNavigationBarView, getNavigationBarLayoutParams());  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>&lt;2&gt;隐藏方法定义如下（新加）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">private void removeNavigationBar()&#123;</span><br><span class="line">    if(DEBUG) Log.v(TAG,&quot;removeNavigationBar: about to remove &quot;+ mNavigationBarView);</span><br><span class="line">    if(mNavigationBarView &#x3D;&#x3D; null) return;</span><br><span class="line">    mWindowManager.removeView(mNavigationBarView);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&lt;3&gt;广播的注册</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">IntentFilter filter1 &#x3D; new IntentFilter();  </span><br><span class="line">filter1.addAction(&quot;MyRecv_action&quot;);  </span><br><span class="line">context.registerReceiver(mBroadcastReceiver1, filter1);  </span><br></pre></td></tr></table></figure><p>&lt;4&gt;广播监听及处理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">private boolean isDisplayNavBar;</span><br><span class="line">private BroadcastReceiver mBroadcastReceiver &#x3D; new BroadcastReceiver() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void onReceive(Context context, Intent intent) &#123;</span><br><span class="line">        String action &#x3D; intent.getAction();</span><br><span class="line">        if (isOrderedBroadcast())&#123;</span><br><span class="line">            if(action.equals(&quot;MyRecv_action&quot;))&#123;</span><br><span class="line">                String cmd &#x3D; intent.getStringExtra(&quot;cmd&quot;);</span><br><span class="line">                &#x2F;&#x2F;布尔标志isDisplayNavBar保存当前导航栏的状态</span><br><span class="line">                if(cmd.equals(&quot;hide&quot;)&amp;&amp;isDisplayNavBar)&#123;</span><br><span class="line">                    isDisplayNavBar&#x3D;false;</span><br><span class="line">                    removeNavigationBar();</span><br><span class="line">                &#125;else if(cmd.equals(&quot;show&quot;)&amp;&amp;!isDisplayNavBar)&#123;</span><br><span class="line">                    addNavigationBar();</span><br><span class="line">                    isDisplayNavBar&#x3D;true;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            this.abortBroadcast();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>至此修改完毕，编译完毕之后产生新的SystemUi.apk ，替换原文件系统的SystemUi.apk 后重启即可。</p><p>隐藏导航栏：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Intent intent&#x3D;new Intent();  </span><br><span class="line">intent.setAction(&quot;MyRecv_action&quot;);  </span><br><span class="line">intent.putExtra(&quot;cmd&quot;,&quot;hide&quot;);  </span><br><span class="line">this.sendOrderedBroadcast(intent,null);  </span><br></pre></td></tr></table></figure><p>显示导航栏：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Intent intent&#x3D;new Intent();  </span><br><span class="line">intent.setAction(&quot;MyRecv_action&quot;);  </span><br><span class="line">intent.putExtra(&quot;cmd&quot;,&quot;show&quot;);  </span><br><span class="line">this.sendOrderedBroadcast(intent,null);  </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android Framework </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[ArchLinux]pacman -S sudo不成功</title>
      <link href="/blog/2018/07/10/ArchLinux-pacman-S-sudo%E4%B8%8D%E6%88%90%E5%8A%9F/"/>
      <url>/blog/2018/07/10/ArchLinux-pacman-S-sudo%E4%B8%8D%E6%88%90%E5%8A%9F/</url>
      
        <content type="html"><![CDATA[<p>I want to install sudo. So I type in pacman -S sudo. But then I get the following errors:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">~$: pacman -S sudo</span><br><span class="line">warning: database file for &#39;extra&#39; does not exist</span><br><span class="line">warning: database file for &#39;community&#39; does not exist</span><br><span class="line">error: failed to prepare transaction (could not find database)</span><br></pre></td></tr></table></figure><p>Firstly, try running pacman -Syy, then try to install sudo again.</p><p>Check that the repositories are uncommented in /etc/pacman.conf.</p><p>Or your mirrorlist might be outdated: Generate a current list of mirrors and copy it to /etc/pacman.d/mirrorlist</p><p>Quoting from this relevant forum thread:</p><p>You can:</p><p>pick another mirror<br>try using an http mirror, not an ftp one (pick http mirror from the mirrorlist).<br>Alternatively you can manually download the databases with:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget ftp:&#x2F;&#x2F;mirror.csclub.uwaterloo.ca&#x2F;archlinux&#x2F;community&#x2F;os&#x2F;x86_64&#x2F;community.db</span><br><span class="line">wget ftp:&#x2F;&#x2F;mirror.csclub.uwaterloo.ca&#x2F;archlinux&#x2F;extra&#x2F;os&#x2F;x86_64&#x2F;extra.db</span><br></pre></td></tr></table></figure><p>move them to  /var/lib/pacman/sync/  and run ‘pacman -Syu’ again. If you find any *.part files in <code>/var/lib/pacman/sync/</code> e.g. <code>/var/lib/pacman/sync/core.db.part</code> - remove them.</p><p>To prevent having problems like these it is critical to understand pacman. To learn more about using pacman, see the ArchWiki pacman article, and consult man pacman.</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Archlinux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>隐藏电池图标</title>
      <link href="/blog/2018/07/09/%E9%9A%90%E8%97%8F%E7%94%B5%E6%B1%A0%E5%9B%BE%E6%A0%87/"/>
      <url>/blog/2018/07/09/%E9%9A%90%E8%97%8F%E7%94%B5%E6%B1%A0%E5%9B%BE%E6%A0%87/</url>
      
        <content type="html"><![CDATA[<p>删除小电池图标及百分比</p><ol><li>右上角百分比<br>/frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/policy/BatteryController.java<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mBatteryPercentageView.setVisibility(View.GONE); </span><br></pre></td></tr></table></figure></li><li>下拉图标<br>/frameworks/base/packages/SystemUI/src/com/android/systemui/phone/StatusBarHeaderView.java<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">\\注释((BatteryMeterView) findViewById(R.id.battery)).setBatteryController(batteryController);</span><br><span class="line"></span><br><span class="line">mBatteryLevel.setVisibility &#x3D; (View.GONE); —锁屏百分比 </span><br></pre></td></tr></table></figure></li><li>下拉百分比<br>/frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/phone/KeyguardStatusBarView.java<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mBatteryLevel.setVisibility(View.GONE);</span><br><span class="line"></span><br><span class="line">\\注释((BatteryMeterView) findViewById(R.id.battery)).setBatteryController(batteryController); —锁屏界面图标 </span><br></pre></td></tr></table></figure></li><li>右上角图标<br>/frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBar.java<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;注释((BatteryMeterView) mStatusBarView.findViewById(R.id.battery)) —右上角图标</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;注释dispatchDemoCommandToView(command, args, R.id.battery); </span><br></pre></td></tr></table></figure></li><li>注释battery<br>/frameworks/base/packages/SystemUI/res/layout/system_icon.xml<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">注释battery </span><br></pre></td></tr></table></figure></li><li>解除电池图标相关属性设置<br>/frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBarTransitions.java —解除电池图标相关属性设置<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">注释mBattery相关的内容</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Android Framework </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SystemUI之快捷设置区域QSPanel</title>
      <link href="/blog/2018/07/08/SystemUI%E4%B9%8B%E5%BF%AB%E6%8D%B7%E8%AE%BE%E7%BD%AE%E5%8C%BA%E5%9F%9FQSPanel/"/>
      <url>/blog/2018/07/08/SystemUI%E4%B9%8B%E5%BF%AB%E6%8D%B7%E8%AE%BE%E7%BD%AE%E5%8C%BA%E5%9F%9FQSPanel/</url>
      
        <content type="html"><![CDATA[<p>SystemUI下拉之后的那些快捷设置菜单选项也是属于SystemUI的一种;它的加载也是随着PhoneStatusBar的加载而加载;<br>/frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBar.java<br>首先从布局方面入手：<br>快捷设置区域的布局是由PhoneStatusBar.Java的makeStatusBarView()统一加载;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mStatusBarWindow&#x3D;(StatusBarWindowView)View.inflate(context,</span><br><span class="line">R.layout.super_status_bar,null);</span><br></pre></td></tr></table></figure><p>加载frameworks/base/packages/SystemUI/res/layout/super_status_bar.xml布局</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">..</span><br><span class="line">...</span><br><span class="line">    &lt;com.android.systemui.statusbar.phone.PanelHolder</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;panel_holder&quot;</span><br><span class="line">        android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class="line">        android:background&#x3D;&quot;@color&#x2F;transparent&quot; &gt;</span><br><span class="line">        &lt;include layout&#x3D;&quot;@layout&#x2F;status_bar_expanded&quot;</span><br><span class="line">            android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">            android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class="line">            android:visibility&#x3D;&quot;gone&quot; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;com.android.systemui.statusbar.phone.PanelHolder&gt;</span><br><span class="line">...</span><br><span class="line">..</span><br></pre></td></tr></table></figure><p>而这个布局回去include另外一个布局status_bar_expanded.xml布局，frameworks/base/packages/SystemUI/res/layout/status_bar_expanded.xml;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">..</span><br><span class="line">...</span><br><span class="line">&lt;LinearLayout</span><br><span class="line">    android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">    android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">    android:orientation&#x3D;&quot;vertical&quot;&gt;</span><br><span class="line">    &lt;include</span><br><span class="line">        layout&#x3D;&quot;@layout&#x2F;qs_panel&quot;</span><br><span class="line">        android:layout_marginTop&#x3D;&quot;@dimen&#x2F;status_bar_header_height_expanded&quot;</span><br><span class="line">        android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        android:layout_marginLeft&#x3D;&quot;@dimen&#x2F;notification_side_padding&quot;</span><br><span class="line">      android:layout_marginRight&#x3D;&quot;@dimen&#x2F;notification_side_padding&quot;&#x2F;&gt;</span><br><span class="line">...</span><br><span class="line">..</span><br></pre></td></tr></table></figure><p>同样的在这个布局文件中又会去include一个qs_panel.xml布局，frameworks/base/packages/SystemUI/res/layout/qs_panel.xml;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;com.android.systemui.qs.QSContainer</span><br><span class="line">        xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;quick_settings_container&quot;</span><br><span class="line">        android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        android:background&#x3D;&quot;@drawable&#x2F;qs_background_primary&quot;</span><br><span class="line">        android:paddingTop&#x3D;&quot;8dp&quot;</span><br><span class="line">        android:paddingBottom&#x3D;&quot;8dp&quot;</span><br><span class="line">        android:elevation&#x3D;&quot;2dp&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;com.android.systemui.qs.QSPanel</span><br><span class="line">            android:id&#x3D;&quot;@+id&#x2F;quick_settings_panel&quot;</span><br><span class="line">            android:background&#x3D;&quot;#0000&quot;</span><br><span class="line">            android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">            android:layout_height&#x3D;&quot;wrap_content&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;com.android.systemui.qs.QSContainer&gt;</span><br></pre></td></tr></table></figure><p>见名知意，这个id为quick_settings_panel即为我们所找的那个SystemUI上的快捷设置区域控件的ID;<br>代码控制方面：<br>同样的也是由PhoneStatusBar.java的makeStatusBarView()方法开始的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Set up the quick settings tile panel</span><br><span class="line">mQSPanel &#x3D; (QSPanel) mStatusBarWindow.findViewById(R.id.quick_settings_panel);</span><br><span class="line">if (mQSPanel !&#x3D; null) &#123;</span><br><span class="line">    final QSTileHost qsh &#x3D; new QSTileHost(mContext, this,</span><br><span class="line">            mBluetoothController, mLocationController, mRotationLockController,</span><br><span class="line">            mNetworkController, mZenModeController, mHotspotController,</span><br><span class="line">            mCastController, mFlashlightController,</span><br><span class="line">            mUserSwitcherController, mKeyguardMonitor,</span><br><span class="line">            mSecurityController);</span><br><span class="line">    mQSPanel.setHost(qsh);</span><br><span class="line">    mQSPanel.setTiles(qsh.getTiles());</span><br><span class="line">    mBrightnessMirrorController &#x3D; new BrightnessMirrorController(mStatusBarWindow);</span><br><span class="line">    mQSPanel.setBrightnessMirror(mBrightnessMirrorController);</span><br><span class="line">    mHeader.setQSPanel(mQSPanel);</span><br><span class="line">    qsh.setCallback(new QSTileHost.Callback() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void onTilesChanged() &#123;</span><br><span class="line">            mQSPanel.setTiles(qsh.getTiles());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一步步分析，首先先实例化一个QSPanel对象，然后再去创建QSTileHost对象，其传入的参数即为各种快捷设置控制器，如蓝牙、屏幕旋转、定位、闪光灯等等;<br>分析QSTileHost.java的构造方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">public QSTileHost(Context context, PhoneStatusBar statusBar,</span><br><span class="line">        BluetoothController bluetooth, LocationController location,</span><br><span class="line">        RotationLockController rotation, NetworkController network,</span><br><span class="line">        ZenModeController zen, HotspotController hotspot,</span><br><span class="line">        CastController cast, FlashlightController flashlight,</span><br><span class="line">        UserSwitcherController userSwitcher, KeyguardMonitor keyguard,</span><br><span class="line">        SecurityController security) &#123;</span><br><span class="line">   </span><br><span class="line">    mContext &#x3D; context;</span><br><span class="line">    mStatusBar &#x3D; statusBar;</span><br><span class="line">    mBluetooth &#x3D; bluetooth;</span><br><span class="line">    mLocation &#x3D; location;</span><br><span class="line">    mRotation &#x3D; rotation;</span><br><span class="line">    mNetwork &#x3D; network;</span><br><span class="line">    mZen &#x3D; zen;</span><br><span class="line">    mHotspot &#x3D; hotspot;</span><br><span class="line">    mCast &#x3D; cast;</span><br><span class="line">    mFlashlight &#x3D; flashlight;</span><br><span class="line">    mUserSwitcherController &#x3D; userSwitcher;</span><br><span class="line">    mKeyguard &#x3D; keyguard;</span><br><span class="line">    mSecurity &#x3D; security;</span><br><span class="line">   </span><br><span class="line">    final HandlerThread ht &#x3D; new HandlerThread(QSTileHost.class.getSimpleName(),</span><br><span class="line">            Process.THREAD_PRIORITY_BACKGROUND);</span><br><span class="line">    ht.start();</span><br><span class="line">    mLooper &#x3D; ht.getLooper();</span><br><span class="line">    mUserTracker &#x3D; new CurrentUserTracker(mContext) &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void onUserSwitched(int newUserId) &#123;</span><br><span class="line">            recreateTiles();</span><br><span class="line">            for (QSTile&lt;?&gt; tile : mTiles.values()) &#123;</span><br><span class="line">                tile.userSwitch(newUserId);</span><br><span class="line">            &#125;</span><br><span class="line">            mSecurity.onUserSwitched(newUserId);</span><br><span class="line">            mNetwork.onUserSwitched(newUserId);</span><br><span class="line">            mObserver.register();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    recreateTiles();</span><br><span class="line"></span><br><span class="line">    mUserTracker.startTracking();</span><br><span class="line">    mObserver.register();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实例化各个控制器，创建一个子线程handler获取Looper对象"><a href="#实例化各个控制器，创建一个子线程handler获取Looper对象" class="headerlink" title="实例化各个控制器，创建一个子线程handler获取Looper对象"></a>实例化各个控制器，创建一个子线程handler获取Looper对象</h3><h3 id="使用TunerService去Settings中查询key为TILES-SETTING的值，即查询快捷设置菜单项，查询到的结果通过onTuningChanged-方法回调返回"><a href="#使用TunerService去Settings中查询key为TILES-SETTING的值，即查询快捷设置菜单项，查询到的结果通过onTuningChanged-方法回调返回" class="headerlink" title="使用TunerService去Settings中查询key为TILES_SETTING的值，即查询快捷设置菜单项，查询到的结果通过onTuningChanged()方法回调返回;"></a>使用TunerService去Settings中查询key为TILES_SETTING的值，即查询快捷设置菜单项，查询到的结果通过onTuningChanged()方法回调返回;</h3><p>frameworks/base/packages/SystemUI/src/com/android/systemui/tuner/TunerService.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">private void addTunable(Tunable tunable, String key) &#123;</span><br><span class="line">        if (!mTunableLookup.containsKey(key)) &#123;</span><br><span class="line">            mTunableLookup.put(key, new ArraySet&lt;Tunable&gt;());</span><br><span class="line">        &#125;</span><br><span class="line">        mTunableLookup.get(key).add(tunable);</span><br><span class="line">        Uri uri &#x3D; Settings.Secure.getUriFor(key);</span><br><span class="line">        if (!mListeningUris.containsKey(uri)) &#123;</span><br><span class="line">            mListeningUris.put(uri, key);</span><br><span class="line">            mContentResolver.registerContentObserver(uri, false, mObserver, mCurrentUser);</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F; Send the first state.</span><br><span class="line">        String value &#x3D; Settings.Secure.getStringForUser(mContentResolver, key, mCurrentUser);</span><br><span class="line">        tunable.onTuningChanged(key, value);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/phone/QSTileHost.java的onTuningChanged()方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">    public void onTuningChanged(String key, String newValue) &#123;</span><br><span class="line">        if (!TILES_SETTING.equals(key)) &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        if (DEBUG) Log.d(TAG, &quot;Recreating tiles&quot;);</span><br><span class="line">        final List&lt;String&gt; tileSpecs &#x3D; loadTileSpecs(newValue);</span><br><span class="line">        if (tileSpecs.equals(mTileSpecs)) return;</span><br><span class="line">        for (Map.Entry&lt;String, QSTile&lt;?&gt;&gt; tile : mTiles.entrySet()) &#123;</span><br><span class="line">            if (!tileSpecs.contains(tile.getKey())) &#123;</span><br><span class="line">                if (DEBUG) Log.d(TAG, &quot;Destroying tile: &quot; + tile.getKey());</span><br><span class="line">                tile.getValue().destroy();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        final LinkedHashMap&lt;String, QSTile&lt;?&gt;&gt; newTiles &#x3D; new LinkedHashMap&lt;&gt;();</span><br><span class="line">        for (String tileSpec : tileSpecs) &#123;</span><br><span class="line">            if (mTiles.containsKey(tileSpec)) &#123;</span><br><span class="line">                newTiles.put(tileSpec, mTiles.get(tileSpec));</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                if (DEBUG) Log.d(TAG, &quot;Creating tile: &quot; + tileSpec);</span><br><span class="line">                try &#123;</span><br><span class="line">                    newTiles.put(tileSpec, createTile(tileSpec));</span><br><span class="line">                &#125; catch (Throwable t) &#123;</span><br><span class="line">                    Log.w(TAG, &quot;Error creating tile for spec: &quot; + tileSpec, t);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        mTileSpecs.clear();</span><br><span class="line">        mTileSpecs.addAll(tileSpecs);</span><br><span class="line">        mTiles.clear();</span><br><span class="line">        mTiles.putAll(newTiles);</span><br><span class="line">        if (mCallback !&#x3D; null) &#123;</span><br><span class="line">            mCallback.onTilesChanged();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="在通过调用loadTileSpecs-方法对查询的结果进行判断处理"><a href="#在通过调用loadTileSpecs-方法对查询的结果进行判断处理" class="headerlink" title="在通过调用loadTileSpecs()方法对查询的结果进行判断处理;"></a>在通过调用loadTileSpecs()方法对查询的结果进行判断处理;</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">protected List&lt;String&gt; loadTileSpecs(Context context, String tileList) &#123;</span><br><span class="line">        final Resources res &#x3D; context.getResources();</span><br><span class="line">        final String defaultTileList &#x3D; res.getString(R.string.quick_settings_tiles_default);</span><br><span class="line">        if (tileList &#x3D;&#x3D; null) &#123;</span><br><span class="line">            tileList &#x3D; res.getString(R.string.quick_settings_tiles);</span><br><span class="line">            if (DEBUG) Log.d(TAG, &quot;Loaded tile specs from config: &quot; + tileList);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            if (DEBUG) Log.d(TAG, &quot;Loaded tile specs from setting: &quot; + tileList);</span><br><span class="line">        &#125;</span><br><span class="line">        final ArrayList&lt;String&gt; tiles &#x3D; new ArrayList&lt;String&gt;();</span><br><span class="line">        boolean addedDefault &#x3D; false;</span><br><span class="line">        for (String tile : tileList.split(&quot;,&quot;)) &#123;</span><br><span class="line">            tile &#x3D; tile.trim();</span><br><span class="line">            if (tile.isEmpty()) continue;</span><br><span class="line">            if (tile.equals(&quot;default&quot;)) &#123;</span><br><span class="line">                if (!addedDefault) &#123;</span><br><span class="line">                    tiles.addAll(Arrays.asList(defaultTileList.split(&quot;,&quot;)));</span><br><span class="line">                    addedDefault &#x3D; true;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                tiles.add(tile);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return tiles;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>如果返回的结果tileList不为null，使用”,”来拆分结果，对得到的每个tile进行判断，如果不为”default”,即保存此tile;<br>如果返回的结果tileList为null，则tileList赋值为”default”，并读取config.xml中的quick_settings_tiles_default字串，拆分保存;<br>返回所符合要求显示的快捷设置tile集合;</p><h3 id="在QSTileHost-java的onTuningChanged-方法中调用createTile-方法来创建每一个快捷设置的tile对象；"><a href="#在QSTileHost-java的onTuningChanged-方法中调用createTile-方法来创建每一个快捷设置的tile对象；" class="headerlink" title="在QSTileHost.java的onTuningChanged()方法中调用createTile()方法来创建每一个快捷设置的tile对象；"></a>在QSTileHost.java的onTuningChanged()方法中调用createTile()方法来创建每一个快捷设置的tile对象；</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public QSTile&lt;?&gt; createTile(String tileSpec) &#123;</span><br><span class="line">        if (tileSpec.equals(&quot;wifi&quot;)) return new WifiTile(this);</span><br><span class="line">        else if (tileSpec.equals(&quot;bt&quot;)) return new BluetoothTile(this);</span><br><span class="line">        else if (tileSpec.equals(&quot;cell&quot;)) return new CellularTile(this);</span><br><span class="line">        else if (tileSpec.equals(&quot;dnd&quot;)) return new DndTile(this);</span><br><span class="line">        else if (tileSpec.equals(&quot;inversion&quot;)) return new ColorInversionTile(this);</span><br><span class="line">        else if (tileSpec.equals(&quot;airplane&quot;)) return new AirplaneModeTile(this);</span><br><span class="line">        else if (tileSpec.equals(&quot;work&quot;)) return new WorkModeTile(this);</span><br><span class="line">        else if (tileSpec.equals(&quot;rotation&quot;)) return new RotationLockTile(this);</span><br><span class="line">        else if (tileSpec.equals(&quot;flashlight&quot;)) return new FlashlightTile(this);</span><br><span class="line">        else if (tileSpec.equals(&quot;location&quot;)) return new LocationTile(this);</span><br><span class="line">        else if (tileSpec.equals(&quot;cast&quot;)) return new CastTile(this);</span><br><span class="line">        else if (tileSpec.equals(&quot;hotspot&quot;)) return new HotspotTile(this);</span><br><span class="line">        else if (tileSpec.equals(&quot;user&quot;)) return new UserTile(this);</span><br><span class="line">        else if (tileSpec.equals(&quot;battery&quot;)) return new BatteryTile(this);</span><br><span class="line">        else if (tileSpec.equals(&quot;saver&quot;)) return new DataSaverTile(this);</span><br><span class="line">        else if (tileSpec.equals(&quot;night&quot;)) return new NightDisplayTile(this);</span><br><span class="line">        &#x2F;&#x2F; Intent tiles.</span><br><span class="line">        else if (tileSpec.startsWith(IntentTile.PREFIX)) return IntentTile.create(this,tileSpec);</span><br><span class="line">        else if (tileSpec.startsWith(CustomTile.PREFIX)) return CustomTile.create(this,tileSpec);</span><br><span class="line">        else &#123;</span><br><span class="line">            Log.w(TAG, &quot;Bad tile spec: &quot; + tileSpec);</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>并将其保存在成员变量的mTiles集合中，最后回调onTilesChanged()方法，通知PhoneStatusBar.java对快捷设置选项显示更新;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (mCallback !&#x3D; null) &#123;</span><br><span class="line">            mCallback.onTilesChanged();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>至此QSTileHost.java的构造方法分析完成，然后再回到调用处PhoneStatusBar.java的makeStatusBarView()方法继续分析：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mQSPanel.setHost(qsh);</span><br><span class="line">mQSPanel.setTiles(qsh.getTiles());</span><br></pre></td></tr></table></figure><p>设置QSPanel.setHost()、设置QSPanel.setTiles();而其中的其中setTiles()方法会先remove掉所有的TileRecord记录并移除所有的tileView;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public void setTiles(Collection&lt;QSTile&lt;?&gt;&gt; tiles) &#123;</span><br><span class="line">        for (TileRecord record : mRecords) &#123;</span><br><span class="line">            removeView(record.tileView);</span><br><span class="line">        &#125;</span><br><span class="line">        mRecords.clear();</span><br><span class="line">        for (QSTile&lt;?&gt; tile : tiles) &#123;</span><br><span class="line">            addTile(tile);</span><br><span class="line">        &#125;</span><br><span class="line">        if (isShowingDetail()) &#123;</span><br><span class="line">            mDetail.bringToFront();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>然后在重新调用addTile()创建TileRecord对象并赋值绑定相应的回调和点击事件(点击、双击、长按)接口，再将其保存到ArrayList<TileRecord> mRecords集合中，然后再去addView();</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">private void addTile(final QSTile&lt;?&gt; tile) &#123;</span><br><span class="line">        final TileRecord r &#x3D; new TileRecord();</span><br><span class="line">        r.tile &#x3D; tile;</span><br><span class="line">        r.tileView &#x3D; tile.createTileView(mContext);</span><br><span class="line">        r.tileView.setVisibility(View.GONE);</span><br><span class="line">        final QSTile.Callback callback &#x3D; new QSTile.Callback() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onStateChanged(QSTile.State state) &#123;</span><br><span class="line">                int visibility &#x3D; state.visible ? VISIBLE : GONE;</span><br><span class="line">                if (state.visible &amp;&amp; !mGridContentVisible) &#123;</span><br><span class="line"> </span><br><span class="line">                    &#x2F;&#x2F; We don&#39;t want to show it if the content is hidden,</span><br><span class="line">                    &#x2F;&#x2F; then we just set it to invisible, to ensure that it gets visible again</span><br><span class="line">                    visibility &#x3D; INVISIBLE;</span><br><span class="line">                &#125;</span><br><span class="line">                setTileVisibility(r.tileView, visibility);</span><br><span class="line">                r.tileView.onStateChanged(state);</span><br><span class="line">            &#125;</span><br><span class="line">            @Override</span><br><span class="line">            public void onShowDetail(boolean show) &#123;</span><br><span class="line">                QSPanel.this.showDetail(show, r);</span><br><span class="line">            &#125;</span><br><span class="line">            @Override</span><br><span class="line">            public void onToggleStateChanged(boolean state) &#123;</span><br><span class="line">                if (mDetailRecord &#x3D;&#x3D; r) &#123;</span><br><span class="line">                    fireToggleStateChanged(state);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            @Override</span><br><span class="line">            public void onScanStateChanged(boolean state) &#123;</span><br><span class="line">                r.scanState &#x3D; state;</span><br><span class="line">                if (mDetailRecord &#x3D;&#x3D; r) &#123;</span><br><span class="line">                    fireScanStateChanged(r.scanState);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            @Override</span><br><span class="line">            public void onAnnouncementRequested(CharSequence announcement) &#123;</span><br><span class="line">                announceForAccessibility(announcement);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        r.tile.setCallback(callback);</span><br><span class="line">        final View.OnClickListener click &#x3D; new View.OnClickListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onClick(View v) &#123;</span><br><span class="line">                r.tile.click();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        final View.OnClickListener clickSecondary &#x3D; new View.OnClickListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onClick(View v) &#123;</span><br><span class="line">                r.tile.secondaryClick();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        final View.OnLongClickListener longClick &#x3D; new View.OnLongClickListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public boolean onLongClick(View v) &#123;</span><br><span class="line">                r.tile.longClick();</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        r.tileView.init(click, clickSecondary, longClick);</span><br><span class="line">        r.tile.setListening(mListening);</span><br><span class="line">        callback.onStateChanged(r.tile.getState());</span><br><span class="line">        r.tile.refreshState();</span><br><span class="line">        mRecords.add(r);</span><br><span class="line"> </span><br><span class="line">        addView(r.tileView);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>再回到调用处PhoneStatusBar.java的makeStatusBarView()方法继续分析：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">qsh.setCallback(new QSTileHost.Callback() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public void onTilesChanged() &#123;</span><br><span class="line">                    mQSPanel.setTiles(qsh.getTiles());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br></pre></td></tr></table></figure><p>为QSTileHost的对象设置onTilesChanged()回调监听；</p><p>至此完成快捷区域加载显示的大致流程分析。</p><h3 id="隐藏下拉状态栏快捷方式方法："><a href="#隐藏下拉状态栏快捷方式方法：" class="headerlink" title="隐藏下拉状态栏快捷方式方法："></a>隐藏下拉状态栏快捷方式方法：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">    private QSTile&lt;?&gt; createTile(String tileSpec) &#123;</span><br><span class="line">        if (tileSpec.equals(&quot;wifi&quot;)) return new WifiTile(this);</span><br><span class="line">        &#x2F;**delete by chensy 隐藏下拉状态栏 蓝牙、飞行模式、自动旋转、GPS、投屏 start*&#x2F;</span><br><span class="line">&#x2F;&#x2F;        else if (tileSpec.equals(&quot;bt&quot;)) return new BluetoothTile(this);</span><br><span class="line">        else if (tileSpec.equals(&quot;inversion&quot;)) return new ColorInversionTile(this);</span><br><span class="line">        else if (tileSpec.equals(&quot;cell&quot;)) return new CellularTileForSlot(this, PhoneConstants.SIM_ID_1);</span><br><span class="line">        else if (tileSpec.equals(&quot;cell2&quot;)) return new CellularTileForSlot(this, PhoneConstants.SIM_ID_2);</span><br><span class="line">&#x2F;&#x2F;        else if (tileSpec.equals(&quot;airplane&quot;)) return new AirplaneModeTile(this);</span><br><span class="line">&#x2F;&#x2F;        else if (tileSpec.equals(&quot;rotation&quot;)) return new RotationLockTile(this);</span><br><span class="line">        else if (tileSpec.equals(&quot;flashlight&quot;)) return new FlashlightTile(this);</span><br><span class="line">&#x2F;&#x2F;        else if (tileSpec.equals(&quot;location&quot;)) return new LocationTile(this);</span><br><span class="line">&#x2F;&#x2F;        else if (tileSpec.equals(&quot;cast&quot;)) return new CastTile(this);</span><br><span class="line">        &#x2F;**delete by chensy 隐藏下拉状态栏 蓝牙、飞行模式、自动旋转、GPS、投屏 end*&#x2F;</span><br><span class="line">        else if (tileSpec.equals(&quot;hotspot&quot;)) return new HotspotTile(this);</span><br><span class="line">        else if (tileSpec.startsWith(IntentTile.PREFIX)) return IntentTile.create(this,tileSpec);</span><br><span class="line">        else throw new IllegalArgumentException(&quot;Bad tile spec: &quot; + tileSpec);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android Framework </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无线网络-&gt;更多-&gt;删除飞行模式、网络热点共享入口</title>
      <link href="/blog/2018/07/07/%E6%97%A0%E7%BA%BF%E7%BD%91%E7%BB%9C-%E6%9B%B4%E5%A4%9A-%E5%88%A0%E9%99%A4%E9%A3%9E%E8%A1%8C%E6%A8%A1%E5%BC%8F%E3%80%81%E7%BD%91%E7%BB%9C%E7%83%AD%E7%82%B9%E5%85%B1%E4%BA%AB%E5%85%A5%E5%8F%A3/"/>
      <url>/blog/2018/07/07/%E6%97%A0%E7%BA%BF%E7%BD%91%E7%BB%9C-%E6%9B%B4%E5%A4%9A-%E5%88%A0%E9%99%A4%E9%A3%9E%E8%A1%8C%E6%A8%A1%E5%BC%8F%E3%80%81%E7%BD%91%E7%BB%9C%E7%83%AD%E7%82%B9%E5%85%B1%E4%BA%AB%E5%85%A5%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<h3 id="删除飞行模式开关"><a href="#删除飞行模式开关" class="headerlink" title="删除飞行模式开关"></a>删除飞行模式开关</h3><p>/packages/apps/Settings/src/com/android/settings/WirelessSettings.java</p><p>onCreate（）方法里面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**add || true by chensy 隐藏飞行模式 *&#x2F;</span><br><span class="line">if (mPm.hasSystemFeature(PackageManager.FEATURE_TELEVISION)||true) &#123;</span><br><span class="line">    removePreference(KEY_TOGGLE_AIRPLANE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>/packages/apps/Settings/res/xml/wireless_settings.xml<br>还有一处，把引用android:dependency=”toggle_airplane”去掉</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">--</span><br><span class="line">   &lt;PreferenceScreen</span><br><span class="line">       android:key&#x3D;&quot;mobile_network_settings&quot;</span><br><span class="line">       android:title&#x3D;&quot;@string&#x2F;network_settings_title&quot;</span><br><span class="line">       settings:keywords&#x3D;&quot;@string&#x2F;keywords_more_mobile_networks&quot;&gt;</span><br><span class="line">       &lt;!-- android:dependency&#x3D;&quot;toggle_airplane&quot;--&gt;</span><br><span class="line">       &lt;intent</span><br><span class="line">           android:action&#x3D;&quot;android.intent.action.MAIN&quot;</span><br><span class="line">           android:targetPackage&#x3D;&quot;com.android.phone&quot;</span><br><span class="line">           android:targetClass&#x3D;&quot;com.android.phone.MobileNetworkSettings&quot; &#x2F;&gt;</span><br><span class="line">   &lt;&#x2F;PreferenceScreen&gt;</span><br></pre></td></tr></table></figure><h3 id="删除网络热点共享入口"><a href="#删除网络热点共享入口" class="headerlink" title="删除网络热点共享入口"></a>删除网络热点共享入口</h3><p>/packages/apps/Settings/src/com/android/settings/WirelessSettings.java</p><p>onCreate（）方法里面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;** add || true by chensy 隐藏WiFi热点 *&#x2F;</span><br><span class="line">if (isSecondaryUser || !cm.isTetheringSupported() || true</span><br><span class="line">        || mUm.hasUserRestriction(UserManager.DISALLOW_CONFIG_TETHERING)) &#123;</span><br><span class="line">    getPreferenceScreen().removePreference(findPreference(KEY_TETHER_SETTINGS));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android Framework </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设备-&gt;显示-&gt;删除休眠、设备旋转、投射屏幕入口</title>
      <link href="/blog/2018/07/06/%E8%AE%BE%E5%A4%87-%E6%98%BE%E7%A4%BA-%E5%88%A0%E9%99%A4%E4%BC%91%E7%9C%A0%E3%80%81%E8%AE%BE%E5%A4%87%E6%97%8B%E8%BD%AC%E3%80%81%E6%8A%95%E5%B0%84%E5%B1%8F%E5%B9%95%E5%85%A5%E5%8F%A3/"/>
      <url>/blog/2018/07/06/%E8%AE%BE%E5%A4%87-%E6%98%BE%E7%A4%BA-%E5%88%A0%E9%99%A4%E4%BC%91%E7%9C%A0%E3%80%81%E8%AE%BE%E5%A4%87%E6%97%8B%E8%BD%AC%E3%80%81%E6%8A%95%E5%B0%84%E5%B1%8F%E5%B9%95%E5%85%A5%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<h3 id="删除休眠"><a href="#删除休眠" class="headerlink" title="删除休眠"></a>删除休眠</h3><p>/packages/apps/Settings/src/com/android/settings/DisplaySettings.java</p><p>在onCreate()方法里面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;** delete by chensy 删除休眠功能</span><br><span class="line">        mScreenTimeoutPreference &#x3D; (ListPreference) findPreference(KEY_SCREEN_TIMEOUT);</span><br><span class="line">        final long currentTimeout &#x3D; Settings.System.getLong(resolver, SCREEN_OFF_TIMEOUT,</span><br><span class="line">                FALLBACK_SCREEN_TIMEOUT_VALUE);</span><br><span class="line">        mScreenTimeoutPreference.setValue(String.valueOf(currentTimeout));</span><br><span class="line">        mScreenTimeoutPreference.setOnPreferenceChangeListener(this);</span><br><span class="line">        disableUnusableTimeouts(mScreenTimeoutPreference);</span><br><span class="line">        updateTimeoutPreferenceDescription(currentTimeout);  *&#x2F;   &#x2F;&#x2F;把这一大段注释掉，然后添加下面这句</span><br><span class="line">removePreference(KEY_SCREEN_TIMEOUT);</span><br></pre></td></tr></table></figure><h3 id="删除设备旋转"><a href="#删除设备旋转" class="headerlink" title="删除设备旋转"></a>删除设备旋转</h3><p>在onCreate()方法里面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">removePreference(KEY_AUTO_ROTATE);</span><br></pre></td></tr></table></figure><h3 id="删除投射屏幕"><a href="#删除投射屏幕" class="headerlink" title="删除投射屏幕"></a>删除投射屏幕</h3><p>在onCreate()方法里面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">removePreference(&quot;wifi_display&quot;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android Framework </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>恢复出厂设置添加密码输入</title>
      <link href="/blog/2018/07/05/%E6%81%A2%E5%A4%8D%E5%87%BA%E5%8E%82%E8%AE%BE%E7%BD%AE%E6%B7%BB%E5%8A%A0%E5%AF%86%E7%A0%81%E8%BE%93%E5%85%A5/"/>
      <url>/blog/2018/07/05/%E6%81%A2%E5%A4%8D%E5%87%BA%E5%8E%82%E8%AE%BE%E7%BD%AE%E6%B7%BB%E5%8A%A0%E5%AF%86%E7%A0%81%E8%BE%93%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<p>恢复出厂设置需要添加密码输入才能点击恢复出厂设置</p><h3 id="自定义输入密码框"><a href="#自定义输入密码框" class="headerlink" title="自定义输入密码框"></a>自定义输入密码框</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line">package com.android.settings;</span><br><span class="line"></span><br><span class="line">import android.content.Context;</span><br><span class="line">import android.content.res.TypedArray;</span><br><span class="line">import android.graphics.Canvas;</span><br><span class="line">import android.graphics.Paint;</span><br><span class="line">import android.graphics.RectF;</span><br><span class="line">import android.util.AttributeSet;</span><br><span class="line">import android.util.DisplayMetrics;</span><br><span class="line">import android.util.TypedValue;</span><br><span class="line">import android.widget.EditText;</span><br><span class="line"></span><br><span class="line">import static android.graphics.Paint.ANTI_ALIAS_FLAG;</span><br><span class="line"></span><br><span class="line">    public class PasswordInputView extends EditText &#123;</span><br><span class="line">        &#x2F;&#x2F;外边框颜色</span><br><span class="line">        private int borderColor &#x3D; 0xFFCCCCCC;</span><br><span class="line">        &#x2F;&#x2F;外边框线的粗细</span><br><span class="line">        private float borderWidth &#x3D; 5;</span><br><span class="line">        &#x2F;&#x2F;外边框圆角半径</span><br><span class="line">        private float borderRadius &#x3D; 3;</span><br><span class="line">        &#x2F;&#x2F;中间分割线粗细</span><br><span class="line">        private float dividerWidth &#x3D; 3;</span><br><span class="line">        &#x2F;&#x2F;密码长度，默认6个字符</span><br><span class="line">        private int passwordLength &#x3D; 6;</span><br><span class="line">        &#x2F;&#x2F;密码文字颜色</span><br><span class="line">        private int passwordColor &#x3D; 0xFFCCCCCC;</span><br><span class="line">        &#x2F;&#x2F;密码圆点的半径</span><br><span class="line">        private float passwordRadius &#x3D; 3;</span><br><span class="line">        &#x2F;&#x2F;画笔</span><br><span class="line">        private Paint paint;</span><br><span class="line">        &#x2F;&#x2F;整个view的宽，高</span><br><span class="line">        private int width, height;</span><br><span class="line">    public PasswordInputView(Context context, AttributeSet attrs) &#123;</span><br><span class="line">        super(context, attrs);</span><br><span class="line"></span><br><span class="line">        DisplayMetrics dm &#x3D; getResources().getDisplayMetrics();</span><br><span class="line">        borderWidth &#x3D; (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_SP, borderWidth, dm);</span><br><span class="line">        borderRadius &#x3D; (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_SP, borderRadius, dm);</span><br><span class="line">        passwordLength &#x3D; (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_SP, passwordLength, dm);</span><br><span class="line">        passwordRadius &#x3D; (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_SP, passwordRadius, dm);</span><br><span class="line">        &#x2F;&#x2F;获得自定义属性的值</span><br><span class="line">        TypedArray a &#x3D; context.getTheme().obtainStyledAttributes(attrs, R.styleable.PasswordInputView, 0, 0);</span><br><span class="line">        borderColor &#x3D; a.getColor(R.styleable.PasswordInputView_pivBorderColor, borderColor);</span><br><span class="line">        borderWidth &#x3D; a.getDimension(R.styleable.PasswordInputView_pivBorderWidth, borderWidth);</span><br><span class="line">        borderRadius &#x3D; a.getDimension(R.styleable.PasswordInputView_pivBorderRadius, borderRadius);</span><br><span class="line">        passwordLength &#x3D; a.getInt(R.styleable.PasswordInputView_pivPasswordLength, passwordLength);</span><br><span class="line">        passwordColor &#x3D; a.getColor(R.styleable.PasswordInputView_pivPasswordColor, passwordColor);</span><br><span class="line">        passwordRadius &#x3D; a.getDimension(R.styleable.PasswordInputView_pivPasswordRadius, passwordRadius);</span><br><span class="line">        dividerWidth &#x3D; a.getDimension(R.styleable.PasswordInputView_dividerWidth, dividerWidth);</span><br><span class="line">        a.recycle();</span><br><span class="line"></span><br><span class="line">        paint &#x3D; new Paint(ANTI_ALIAS_FLAG);</span><br><span class="line">    &#125;</span><br><span class="line">  @Override</span><br><span class="line">    protected void onDraw(Canvas canvas) &#123;</span><br><span class="line">        width &#x3D; getWidth();</span><br><span class="line">        height &#x3D; getHeight();</span><br><span class="line">        drawBorder(canvas);</span><br><span class="line">        drawDivider(canvas);</span><br><span class="line">        drawCircle(canvas);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;绘制外边框</span><br><span class="line">    private void drawBorder(Canvas canvas) &#123;</span><br><span class="line">        paint.setStyle(Paint.Style.STROKE);</span><br><span class="line">        paint.setColor(borderColor);</span><br><span class="line">        paint.setStrokeWidth(borderWidth);</span><br><span class="line">        RectF rectF &#x3D; new RectF(0, 0, width, height);</span><br><span class="line">        canvas.drawRoundRect(rectF, borderRadius, borderRadius, paint);</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;绘制分割线</span><br><span class="line">    private void drawDivider(Canvas canvas) &#123;</span><br><span class="line">        paint.setStyle(Paint.Style.STROKE);</span><br><span class="line">        paint.setColor(borderColor);</span><br><span class="line">        paint.setStrokeWidth(dividerWidth);</span><br><span class="line">        for (int i &#x3D; 1; i &lt; passwordLength; i++) &#123;</span><br><span class="line">            int x &#x3D; i * (width &#x2F; passwordLength);</span><br><span class="line">            canvas.drawLine(x, 0, x, height, paint);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;绘制圆点</span><br><span class="line">    private void drawCircle(Canvas canvas) &#123;</span><br><span class="line">        paint.setStyle(Paint.Style.FILL);</span><br><span class="line">        paint.setColor(passwordColor);</span><br><span class="line">        String content &#x3D; getText().toString().trim();</span><br><span class="line">        for (int i &#x3D; 0; i &lt; content.length(); i++) &#123;</span><br><span class="line">            int cx &#x3D; width &#x2F; passwordLength &#x2F; 2 + i * width &#x2F; passwordLength;</span><br><span class="line">            int cy &#x3D; height &#x2F; 2;</span><br><span class="line">            canvas.drawCircle(cx, cy, width &#x2F; passwordLength &#x2F; 8, paint);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    protected void onTextChanged(CharSequence text, int start, int lengthBefore, int lengthAfter) &#123;</span><br><span class="line">        super.onTextChanged(text, start, lengthBefore, lengthAfter);</span><br><span class="line">        invalidate();</span><br><span class="line">        &#x2F;&#x2F;密码输入完成后做的操作，例如密码验证，页面跳转等</span><br><span class="line">        if (text.length() &#x3D;&#x3D; passwordLength) &#123;</span><br><span class="line">            if (onCompleteListener !&#x3D; null) &#123;</span><br><span class="line">                onCompleteListener.onComplete(text);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    private OnCompleteListener onCompleteListener;</span><br><span class="line"></span><br><span class="line">    public void setOnCompleteListener(OnCompleteListener onCompleteListener) &#123;</span><br><span class="line">        this.onCompleteListener &#x3D; onCompleteListener;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public interface OnCompleteListener &#123;</span><br><span class="line">        void onComplete(CharSequence text);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义数字属性"><a href="#自定义数字属性" class="headerlink" title="自定义数字属性"></a>自定义数字属性</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;declare-styleable name&#x3D;&quot;PasswordInputView&quot;&gt;</span><br><span class="line">      &lt;attr name&#x3D;&quot;pivBorderColor&quot; format&#x3D;&quot;color&quot;&#x2F;&gt;</span><br><span class="line">      &lt;attr name&#x3D;&quot;pivBorderWidth&quot; format&#x3D;&quot;dimension&quot;&#x2F;&gt;</span><br><span class="line">      &lt;attr name&#x3D;&quot;pivBorderRadius&quot; format&#x3D;&quot;dimension&quot;&#x2F;&gt;</span><br><span class="line">      &lt;attr name&#x3D;&quot;pivPasswordColor&quot; format&#x3D;&quot;color&quot;&#x2F;&gt;</span><br><span class="line">      &lt;attr name&#x3D;&quot;pivPasswordWidth&quot; format&#x3D;&quot;dimension&quot;&#x2F;&gt;</span><br><span class="line">      &lt;attr name&#x3D;&quot;pivPasswordRadius&quot; format&#x3D;&quot;dimension&quot;&#x2F;&gt;</span><br><span class="line">      &lt;attr name&#x3D;&quot;pivPasswordLength&quot; format&#x3D;&quot;integer&quot;&#x2F;&gt;</span><br><span class="line">      &lt;attr name&#x3D;&quot;dividerWidth&quot; format&#x3D;&quot;dimension&quot;&#x2F;&gt;</span><br><span class="line">  &lt;&#x2F;declare-styleable&gt;</span><br></pre></td></tr></table></figure><h3 id="布局文件"><a href="#布局文件" class="headerlink" title="布局文件"></a>布局文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--add by chensy 添加恢复出厂设置 添加密码 start--&gt;</span><br><span class="line">&lt;com.android.settings.PasswordInputView</span><br><span class="line">    android:id&#x3D;&quot;@+id&#x2F;passwordInputView&quot;</span><br><span class="line">    android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">    android:layout_height&#x3D;&quot;56dp&quot;</span><br><span class="line">    android:layout_margin&#x3D;&quot;10dp&quot;</span><br><span class="line">    android:cursorVisible&#x3D;&quot;false&quot;</span><br><span class="line">    android:inputType&#x3D;&quot;number&quot;</span><br><span class="line">    app:pivBorderColor&#x3D;&quot;#808080&quot;</span><br><span class="line">    app:pivBorderRadius&#x3D;&quot;5dp&quot;</span><br><span class="line">    app:pivBorderWidth&#x3D;&quot;1dp&quot;</span><br><span class="line">    app:pivPasswordColor&#x3D;&quot;#808080&quot;</span><br><span class="line">    app:dividerWidth&#x3D;&quot;0.5dp&quot;</span><br><span class="line">    android:maxLength&#x3D;&quot;8&quot;</span><br><span class="line">    app:pivPasswordLength&#x3D;&quot;8&quot;</span><br><span class="line">    android:background&#x3D;&quot;@null&quot;</span><br><span class="line">    android:focusable&#x3D;&quot;true&quot; &#x2F;&gt;</span><br><span class="line">&lt;!--add by chensy 添加恢复出厂设置 密码 end--&gt;</span><br></pre></td></tr></table></figure><h3 id="添加恢复出厂设置输入密码"><a href="#添加恢复出厂设置输入密码" class="headerlink" title="添加恢复出厂设置输入密码"></a>添加恢复出厂设置输入密码</h3><p>packages/apps/Settings/src/com/android/settings/MasterClearConfirm.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">  @Override</span><br><span class="line">  public View onCreateView(LayoutInflater inflater, ViewGroup container,</span><br><span class="line">          Bundle savedInstanceState) &#123;</span><br><span class="line">      if (UserManager.get(getActivity()).hasUserRestriction(</span><br><span class="line">              UserManager.DISALLOW_FACTORY_RESET)) &#123;</span><br><span class="line">          return inflater.inflate(R.layout.master_clear_disallowed_screen, null);</span><br><span class="line">      &#125;</span><br><span class="line">mContentView &#x3D; inflater.inflate(R.layout.master_clear_confirm, null);</span><br><span class="line">      &#x2F;**add by chensy 添加恢复出厂设置密码*&#x2F;</span><br><span class="line">      inputView &#x3D; (PasswordInputView)mContentView.findViewById(R.id.passwordInputView);</span><br><span class="line">      inputView.setFocusable(true);</span><br><span class="line">      inputView.requestFocus();</span><br><span class="line">      inputView.setOnCompleteListener(new PasswordInputView.OnCompleteListener() &#123;</span><br><span class="line">          @Override</span><br><span class="line">          public void onComplete(CharSequence text) &#123;</span><br><span class="line">              Log.d(&quot;chensy&quot;, &quot;onComplete: &quot;+text);</span><br><span class="line">              passwd &#x3D; text;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      &#x2F;** add by chensy 添加恢复出厂设置密码 *&#x2F;</span><br><span class="line">      establishFinalConfirmationState();</span><br><span class="line">      return mContentView;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android Framework </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决被第三方应用强制竖屏</title>
      <link href="/blog/2018/07/04/%E8%A7%A3%E5%86%B3%E8%A2%AB%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%94%E7%94%A8%E5%BC%BA%E5%88%B6%E7%AB%96%E5%B1%8F/"/>
      <url>/blog/2018/07/04/%E8%A7%A3%E5%86%B3%E8%A2%AB%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%94%E7%94%A8%E5%BC%BA%E5%88%B6%E7%AB%96%E5%B1%8F/</url>
      
        <content type="html"><![CDATA[<p>代码路径 frameworks\base\core\java\android\view\windowmanager.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"></span><br><span class="line">        * Specific orientation value for a window.</span><br><span class="line">        * May be any of the same values allowed</span><br><span class="line">        * for &#123;@link android.content.pm.ActivityInfo#screenOrientation&#125;. </span><br><span class="line">        * If not set, a default value of </span><br><span class="line">        * &#123;@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_UNSPECIFIED&#125; </span><br><span class="line">        * will be used.</span><br><span class="line">        *&#x2F;</span><br><span class="line">       public int screenOrientation &#x3D; ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED;</span><br></pre></td></tr></table></figure><p>把UNSPECIFIED修改为LANDSCAPE或PORTRAIT!!!</p>]]></content>
      
      
      <categories>
          
          <category> Android Framework </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>屏蔽ANR弹框</title>
      <link href="/blog/2018/07/03/%E5%B1%8F%E8%94%BDANR%E5%BC%B9%E6%A1%86/"/>
      <url>/blog/2018/07/03/%E5%B1%8F%E8%94%BDANR%E5%BC%B9%E6%A1%86/</url>
      
        <content type="html"><![CDATA[<p>代码位置:</p><p>frameworks\base\services\core\java\com\android\server\am中的ActivityManagerService</p><p>修改位置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; private boolean mShowDialogs &#x3D; true;</span><br><span class="line">  private boolean mShowDialogs &#x3D; false;</span><br><span class="line">  </span><br><span class="line">  &#x2F;&#x2F; TODO: If our config change, should we auto dismiss any </span><br><span class="line">  &#x2F;&#x2F; showing dialogs?</span><br><span class="line">  </span><br><span class="line">  &#x2F;&#x2F;del 20180703 start</span><br><span class="line">  &#x2F;&#x2F; mShowDialogs &#x3D; shouldShowDialogs(newConfig);</span><br><span class="line">  &#x2F;&#x2F;del 20180703   end</span><br><span class="line">  </span><br><span class="line">  AttributeCache ac &#x3D; AttributeCache.instance();</span><br><span class="line">  if (ac !&#x3D; null) &#123;</span><br><span class="line">        ac.updateConfiguration(configCopy);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">@Override</span><br><span class="line">public void handleMessage(Message msg) &#123;</span><br><span class="line">    switch (msg.what) &#123;</span><br><span class="line">    case SHOW_ERROR_MSG: &#123;</span><br><span class="line">        HashMap&lt;String, Object&gt; data &#x3D; (HashMap&lt;String, Object&gt;) msg.obj;</span><br><span class="line">        boolean showBackground &#x3D; Settings.Secure.getInt(mContext.getContentResolver(),</span><br><span class="line">                Settings.Secure.ANR_SHOW_BACKGROUND, 0) !&#x3D; 0;</span><br><span class="line">        synchronized (ActivityManagerService.this) &#123;</span><br><span class="line">            ProcessRecord proc &#x3D; (ProcessRecord)data.get(&quot;app&quot;);</span><br><span class="line">            AppErrorResult res &#x3D; (AppErrorResult) data.get(&quot;result&quot;);</span><br><span class="line">            if (proc !&#x3D; null &amp;&amp; proc.crashDialog !&#x3D; null) &#123;</span><br><span class="line">                Slog.e(TAG, &quot;App already has crash dialog: &quot; + proc);</span><br><span class="line">                if (res !&#x3D; null) &#123;</span><br><span class="line">                    res.set(0);</span><br><span class="line">                &#125;</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">            if (!showBackground &amp;&amp; UserHandle.getAppId(proc.uid)</span><br><span class="line">                    &gt;&#x3D; Process.FIRST_APPLICATION_UID &amp;&amp; proc.userId !&#x3D; mCurrentUserId</span><br><span class="line">                    &amp;&amp; proc.pid !&#x3D; MY_PID) &#123;</span><br><span class="line">                Slog.w(TAG, &quot;Skipping crash dialog of &quot; + proc + &quot;: background&quot;);</span><br><span class="line">                if (res !&#x3D; null) &#123;</span><br><span class="line">                    res.set(0);</span><br><span class="line">                &#125;</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">            &#x2F;&#x2F; if (mShowDialogs &amp;&amp; !mSleeping &amp;&amp; !mShuttingDown)  &#x2F;&#x2F; 兼容性开关的一个控制SystemProperties.getBoolean(&quot;mstar.app.compatibility.enable&quot;, false)</span><br><span class="line">            if (mShowDialogs &amp;&amp; !mSleeping &amp;&amp; !mShuttingDown&amp;&amp;SystemProperties.getBoolean(&quot;mstar.app.compatibility.enable&quot;, false)) &#123;</span><br><span class="line">                Dialog d &#x3D; new AppErrorDialog(mContext,</span><br><span class="line">                        ActivityManagerService.this, res, proc);</span><br><span class="line">                d.show();</span><br><span class="line">                proc.crashDialog &#x3D; d;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                &#x2F;&#x2F; The device is asleep, so just pretend that the user</span><br><span class="line">                &#x2F;&#x2F; saw a crash dialog and hit &quot;force quit&quot;.</span><br><span class="line">                if (res !&#x3D; null) &#123;</span><br><span class="line">                    res.set(0);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ensureBootCompleted();</span><br><span class="line">    &#125; break;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android Framework </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>桌面隐藏指定应用图标</title>
      <link href="/blog/2018/07/02/%E6%A1%8C%E9%9D%A2%E9%9A%90%E8%97%8F%E6%8C%87%E5%AE%9A%E5%BA%94%E7%94%A8%E5%9B%BE%E6%A0%87/"/>
      <url>/blog/2018/07/02/%E6%A1%8C%E9%9D%A2%E9%9A%90%E8%97%8F%E6%8C%87%E5%AE%9A%E5%BA%94%E7%94%A8%E5%9B%BE%E6%A0%87/</url>
      
        <content type="html"><![CDATA[<h3 id="修改AndroidManifest-xml配置文件"><a href="#修改AndroidManifest-xml配置文件" class="headerlink" title="修改AndroidManifest.xml配置文件"></a>修改AndroidManifest.xml配置文件</h3><p>Launcher是根据应用清单文件里来显示图标</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;category android:name&#x3D;&quot;android.intent.category.LAUNCHER&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure><p>所以如果我们有应用的源码，可以直接将清单文件里的这句话去掉，应用便不会在桌面上显示了。</p><h3 id="修改AndroidManifest-xml配置文件-1"><a href="#修改AndroidManifest-xml配置文件-1" class="headerlink" title="修改AndroidManifest.xml配置文件"></a>修改AndroidManifest.xml配置文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;activity android:name&#x3D;&quot;.app.activity.MainActivity&quot;&gt;</span><br><span class="line">    &lt;intent-filter&gt;</span><br><span class="line">        &lt;action android:name&#x3D;&quot;android.intent.action.MAIN&quot; &#x2F;&gt;</span><br><span class="line">        &lt;!-- 只要添加下面这句话，可以隐藏应用图标   +++ --&gt;</span><br><span class="line">        &lt;!-- &lt;data --&gt;</span><br><span class="line">        &lt;!-- android:host&#x3D;&quot;AuthActivity&quot; --&gt;</span><br><span class="line">        &lt;!-- android:scheme&#x3D;&quot;com.android.example&quot; --&gt;</span><br><span class="line">        &lt;!-- tools:ignore&#x3D;&quot;AppLinkUrlError&quot; &#x2F;&gt; --&gt;</span><br><span class="line">        &lt;!-- 只要添加上面这句话，可以隐藏应用图标   +++ --&gt;</span><br><span class="line">        &lt;category android:name&#x3D;&quot;android.intent.category.LAUNCHER&quot; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;intent-filter&gt;</span><br><span class="line">&lt;&#x2F;activity&gt;</span><br></pre></td></tr></table></figure><h3 id="根据包名过滤"><a href="#根据包名过滤" class="headerlink" title="根据包名过滤"></a>根据包名过滤</h3><p>packages/apps/Launcher3/src/com/android/launcher3/LauncherModel.java<br>里面有个loadAllApps()方法,在里面修改，我们要做的，就是跳过我们要隐藏的应用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> &#x2F;&#x2F; Create the ApplicationInfos</span><br><span class="line"> for (int i &#x3D; 0; i &lt; apps.size(); i++) &#123;</span><br><span class="line">    LauncherActivityInfoCompat app &#x3D; apps.get(i);</span><br><span class="line">                        &#x2F;** add by chensy 隐藏桌面指定应用显示在桌面上 start*&#x2F;</span><br><span class="line">if(&quot;com.google.android.email&quot;.equals(apps.get(i).getApplicationInfo().packageName)</span><br><span class="line">        || &quot;com.android.soundrecorder&quot;.equals(apps.get(i).getApplicationInfo().packageName)</span><br><span class="line">        || &quot;com.android.quicksearchbox&quot;.equals(apps.get(i).getApplicationInfo().packageName)</span><br><span class="line">             || &quot;com.android.contacts&quot;.equals(apps.get(i).getApplicationInfo().packageName)</span><br><span class="line">           || &quot;com.android.documentsui&quot;.equals(apps.get(i).getApplicationInfo().packageName)</span><br><span class="line">             || &quot;com.android.camera2&quot;.equals(apps.get(i).getApplicationInfo().packageName)</span><br><span class="line">              || &quot;com.android.apkinstaller&quot;.equals(apps.get(i).getApplicationInfo().packageName)</span><br><span class="line">             )&#123;</span><br><span class="line">     continue;</span><br><span class="line">                &#125;</span><br><span class="line">       &#x2F;** add by chensy 隐藏桌面指定应用显示在桌面上 end *&#x2F;</span><br><span class="line">            &#x2F;&#x2F; This builds the icon bitmaps.</span><br><span class="line">       mBgAllAppsList.add(new AppInfo(mContext, app, user, mIconCache, mLabelCache));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android Framework </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设置默认语言时区</title>
      <link href="/blog/2018/07/01/%E8%AE%BE%E7%BD%AE%E9%BB%98%E8%AE%A4%E8%AF%AD%E8%A8%80%E6%97%B6%E5%8C%BA/"/>
      <url>/blog/2018/07/01/%E8%AE%BE%E7%BD%AE%E9%BB%98%E8%AE%A4%E8%AF%AD%E8%A8%80%E6%97%B6%E5%8C%BA/</url>
      
        <content type="html"><![CDATA[<p>修改device\rockchip{product_name}\system.prop文件</p><ul><li><p>默认语言</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ro.product.locale.language&#x3D;zh</span><br><span class="line">ro.product.locale.region&#x3D;CN</span><br></pre></td></tr></table></figure></li><li><p>默认时区</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">persist.sys.timezone&#x3D;Asia&#x2F;Shanghai</span><br></pre></td></tr></table></figure></li><li><p>最终效果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">persist.sys.language&#x3D;zh</span><br><span class="line">persist.sys.country&#x3D;CN</span><br><span class="line">persist.sys.localevar&#x3D;</span><br><span class="line">persist.sys.timezone&#x3D;Asia&#x2F;Shanghai</span><br><span class="line">ro.product.locale.language&#x3D;zh</span><br><span class="line">ro.product.locale.region&#x3D;CN</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android Framework </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开发者选项中动画设置开关</title>
      <link href="/blog/2018/06/30/%E5%BC%80%E5%8F%91%E8%80%85%E9%80%89%E9%A1%B9%E4%B8%AD%E5%8A%A8%E7%94%BB%E8%AE%BE%E7%BD%AE%E5%BC%80%E5%85%B3/"/>
      <url>/blog/2018/06/30/%E5%BC%80%E5%8F%91%E8%80%85%E9%80%89%E9%A1%B9%E4%B8%AD%E5%8A%A8%E7%94%BB%E8%AE%BE%E7%BD%AE%E5%BC%80%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>开发者选项中动画设置：</p><ul><li>窗口动画缩放(Windos animation scale)</li><li>过渡动画缩放(Transition animation scale)</li><li>动画程序时长缩放(Animation duration scale)<br>分别对应Window动画(非Activity窗口。比如，Dialog、toast、自定义浮窗、输入法等窗口)、Activity动画(Activity窗口。Activity窗口)、View动画(比如View属性动画、水波纹背景动画)</li></ul><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><h4 id="Setting设置动画"><a href="#Setting设置动画" class="headerlink" title="Setting设置动画"></a>Setting设置动画</h4><p>代码路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">packages&#x2F;apps&#x2F;Settings&#x2F;src&#x2F;com&#x2F;android&#x2F;settings&#x2F;DevelopmentSettings.java</span><br></pre></td></tr></table></figure><p>WindowManagerService提供了setAnimationScale() API供Setting使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import android.os.RemoteException;</span><br><span class="line">import android.os.ServiceManager;</span><br><span class="line">import android.view.IWindowManager;</span><br><span class="line"></span><br><span class="line">        IWindowManager mWindowManager &#x3D; IWindowManager.Stub.asInterface(ServiceManager.getService(&quot;window&quot;));</span><br><span class="line">        try &#123;</span><br><span class="line">            float scale &#x3D; 0;  &#x2F;&#x2F;动画时长 [0,0.5,1,1.5,2,5,10]对应设置的[关闭,0.5x,1x.1.5x,2x,5x,10x]</span><br><span class="line">            mWindowManager.setAnimationScale(0, scale); &#x2F;&#x2F;设置窗口动画缩放</span><br><span class="line">            mWindowManager.setAnimationScale(1, scale); &#x2F;&#x2F;设置过渡动画缩放</span><br><span class="line">            mWindowManager.setAnimationScale(2, scale); &#x2F;&#x2F;动画程序时长缩放</span><br><span class="line">        &#125; catch (RemoteException e) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 声明权限</span><br><span class="line">        &lt;uses-permission android:name&#x3D;&quot;android.permission.SET_ANIMATION_SCALE&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure><h4 id="setAnimationScale-函数"><a href="#setAnimationScale-函数" class="headerlink" title="setAnimationScale()函数"></a>setAnimationScale()函数</h4><p>setAnimationScale()函数在frameworks/base/services/core/java/com/android/server/wm/WindowManagerService.java中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@Override</span><br><span class="line">   public void setAnimationScale(int which, float scale) &#123;</span><br><span class="line">       if (!checkCallingPermission(android.Manifest.permission.SET_ANIMATION_SCALE,</span><br><span class="line">               &quot;setAnimationScale()&quot;)) &#123;</span><br><span class="line">           throw new SecurityException(&quot;Requires SET_ANIMATION_SCALE permission&quot;);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       scale &#x3D; fixScale(scale);</span><br><span class="line">       switch (which) &#123;</span><br><span class="line">           case 0: mWindowAnimationScaleSetting &#x3D; scale; break;</span><br><span class="line">           case 1: mTransitionAnimationScaleSetting &#x3D; scale; break;</span><br><span class="line">           case 2: mAnimatorDurationScaleSetting &#x3D; scale; break;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       &#x2F;&#x2F; Persist setting</span><br><span class="line">       mH.sendEmptyMessage(H.PERSIST_ANIMATION_SCALE);</span><br></pre></td></tr></table></figure><h4 id="打印dump信息"><a href="#打印dump信息" class="headerlink" title="打印dump信息"></a>打印dump信息</h4><p>执行命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell dumpsys window w -a</span><br></pre></td></tr></table></figure><h4 id="Window动画时长设置"><a href="#Window动画时长设置" class="headerlink" title="Window动画时长设置"></a>Window动画时长设置</h4><p>Window动画的设置是通过frameworks\base\services\core\java\com\android\server\wm\WindowStateAnimator.java文件的setAnimation()函数来完成的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public void setAnimation(Animation anim, long startTime) &#123;</span><br><span class="line">    ......</span><br><span class="line">    mAnimation.scaleCurrentDuration(mService.getWindowAnimationScaleLocked());</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用Animation.scaleCurrentDuration()函数来重置动画时长为duration*scale</p><h4 id="Activity动画时长设置"><a href="#Activity动画时长设置" class="headerlink" title="Activity动画时长设置"></a>Activity动画时长设置</h4><p>Activity切换动画的设置是通过frameworks\base\services\core\java\com\android\server\wm\AppWindowAnimator.java文件的setAnimation()函数来完成的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public void setAnimation(Animation anim, int width, int height, boolean skipFirstFrame) &#123;</span><br><span class="line">    ......</span><br><span class="line">    anim.scaleCurrentDuration(mService.getTransitionAnimationScaleLocked());</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用Animation.scaleCurrentDuration()函数来重置动画时长为duration*scale</p><h4 id="View动画时长设置"><a href="#View动画时长设置" class="headerlink" title="View动画时长设置"></a>View动画时长设置</h4><p>View动画时长是通过ValueAnimator.sDurationScale静态变量来控制的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public static IWindowManager getWindowManagerService() &#123;</span><br><span class="line">    synchronized (WindowManagerGlobal.class) &#123;</span><br><span class="line">        if (sWindowManagerService &#x3D;&#x3D; null) &#123;</span><br><span class="line">            sWindowManagerService &#x3D; IWindowManager.Stub.asInterface(</span><br><span class="line">                    ServiceManager.getService(&quot;window&quot;));</span><br><span class="line">            try &#123;</span><br><span class="line">                sWindowManagerService &#x3D; getWindowManagerService();</span><br><span class="line">                ValueAnimator.setDurationScale(sWindowManagerService.getCurrentAnimatorScale());</span><br><span class="line">            &#125; catch (RemoteException e) &#123;</span><br><span class="line">                Log.e(TAG, &quot;Failed to get WindowManagerService, cannot set animator scale&quot;, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return sWindowManagerService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在进程启动后第一次调用getWindowManagerService()时便会从WMS中获取缩放值，然后保存到ValueAnimator.sDurationScale中<br> 如果Setting中更新了View动画缩放因子，那么WMS中调用dispatchNewAnimatorScaleLocked()函数后会回调上层应用的onAnimatorScaleChanged()接口，通知应用View的动画时长Scale更新<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> public static IWindowSession getWindowSession() &#123;</span><br><span class="line">    synchronized (WindowManagerGlobal.class) &#123;</span><br><span class="line">        if (sWindowSession &#x3D;&#x3D; null) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                InputMethodManager imm &#x3D; InputMethodManager.getInstance();</span><br><span class="line">                IWindowManager windowManager &#x3D; getWindowManagerService();</span><br><span class="line">                sWindowSession &#x3D; windowManager.openSession(</span><br><span class="line">                        new IWindowSessionCallback.Stub() &#123;</span><br><span class="line">                            @Override</span><br><span class="line">                            public void onAnimatorScaleChanged(float scale) &#123;</span><br><span class="line">                                ValueAnimator.setDurationScale(scale);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;,</span><br><span class="line">                        imm.getClient(), imm.getInputContext());</span><br><span class="line">            &#125; catch (RemoteException e) &#123;</span><br><span class="line">                Log.e(TAG, &quot;Failed to open window session&quot;, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return sWindowSession;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>对于View动画，如果动画时长使用了ValueAnimator.sDurationScale，那么必然受”Animator duration scale”控制</p>]]></content>
      
      
      <categories>
          
          <category> Android Framework </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>View添加触摸震动反馈</title>
      <link href="/blog/2018/06/29/View%E6%B7%BB%E5%8A%A0%E8%A7%A6%E6%91%B8%E9%9C%87%E5%8A%A8%E5%8F%8D%E9%A6%88/"/>
      <url>/blog/2018/06/29/View%E6%B7%BB%E5%8A%A0%E8%A7%A6%E6%91%B8%E9%9C%87%E5%8A%A8%E5%8F%8D%E9%A6%88/</url>
      
        <content type="html"><![CDATA[<p>所有的View设置可点击震动</p><p>代码路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;frameworks&#x2F;base&#x2F;core&#x2F;java&#x2F;android&#x2F;view&#x2F;View.java</span><br></pre></td></tr></table></figure><ol><li><p>导包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import android.os.Vibrator;</span><br><span class="line">import android.provider.Settings;</span><br></pre></td></tr></table></figure></li><li><p>声明变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">private Vibrator mVibrator;</span><br></pre></td></tr></table></figure></li><li><p>获取服务<br>在View的构造方法里获取</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">  &#x2F;**</span><br><span class="line">   * Simple constructor to use when creating a view from code.</span><br><span class="line">   *</span><br><span class="line">   * @param context The Context the view is running in, through which it can</span><br><span class="line">   *        access the current theme, resources, etc.</span><br><span class="line">   *&#x2F;</span><br><span class="line">  public View(Context context) &#123;</span><br><span class="line">      mContext &#x3D; context;</span><br><span class="line">      mResources &#x3D; context !&#x3D; null ? context.getResources() : null;</span><br><span class="line">      mViewFlags &#x3D; SOUND_EFFECTS_ENABLED | HAPTIC_FEEDBACK_ENABLED;</span><br><span class="line">      &#x2F;&#x2F; Set some flags defaults</span><br><span class="line">      mPrivateFlags2 &#x3D;</span><br><span class="line">              (LAYOUT_DIRECTION_DEFAULT &lt;&lt; PFLAG2_LAYOUT_DIRECTION_MASK_SHIFT) |</span><br><span class="line">              (TEXT_DIRECTION_DEFAULT &lt;&lt; PFLAG2_TEXT_DIRECTION_MASK_SHIFT) |</span><br><span class="line">              (PFLAG2_TEXT_DIRECTION_RESOLVED_DEFAULT) |</span><br><span class="line">              (TEXT_ALIGNMENT_DEFAULT &lt;&lt; PFLAG2_TEXT_ALIGNMENT_MASK_SHIFT) |</span><br><span class="line">              (PFLAG2_TEXT_ALIGNMENT_RESOLVED_DEFAULT) |</span><br><span class="line">              (IMPORTANT_FOR_ACCESSIBILITY_DEFAULT &lt;&lt; PFLAG2_IMPORTANT_FOR_ACCESSIBILITY_SHIFT);</span><br><span class="line">      mTouchSlop &#x3D; ViewConfiguration.get(context).getScaledTouchSlop();</span><br><span class="line">      setOverScrollMode(OVER_SCROLL_IF_CONTENT_SCROLLS);</span><br><span class="line">      mUserPaddingStart &#x3D; UNDEFINED_PADDING;</span><br><span class="line">      mUserPaddingEnd &#x3D; UNDEFINED_PADDING;</span><br><span class="line">      mRenderNode &#x3D; RenderNode.create(getClass().getName(), this);</span><br><span class="line"></span><br><span class="line">      if (!sCompatibilityDone &amp;&amp; context !&#x3D; null) &#123;</span><br><span class="line">          final int targetSdkVersion &#x3D; context.getApplicationInfo().targetSdkVersion;</span><br><span class="line"></span><br><span class="line">          &#x2F;&#x2F; Older apps may need this compatibility hack for measurement.</span><br><span class="line">          sUseBrokenMakeMeasureSpec &#x3D; targetSdkVersion &lt;&#x3D; JELLY_BEAN_MR1;</span><br><span class="line"></span><br><span class="line">          &#x2F;&#x2F; Older apps expect onMeasure() to always be called on a layout pass, regardless</span><br><span class="line">          &#x2F;&#x2F; of whether a layout was requested on that View.</span><br><span class="line">          sIgnoreMeasureCache &#x3D; targetSdkVersion &lt; KITKAT;</span><br><span class="line"></span><br><span class="line">          sCompatibilityDone &#x3D; true;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;** add for view 触摸时震动 start **&#x2F;</span><br><span class="line"> mVibrator &#x3D; (Vibrator) mContext.getSystemService(Context.VIBRATOR_SERVICE);</span><br><span class="line">&#x2F;&#x2F; end add</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>触发震动<br>在playSoundEffect() 函数触发</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">  &#x2F;**</span><br><span class="line">   * Play a sound effect for this view.</span><br><span class="line">   *</span><br><span class="line">   * &lt;p&gt;The framework will play sound effects for some built in actions, such as</span><br><span class="line">   * clicking, but you may wish to play these effects in your widget,</span><br><span class="line">   * for instance, for internal navigation.</span><br><span class="line">   *</span><br><span class="line">   * &lt;p&gt;The sound effect will only be played if sound effects are enabled by the user, and</span><br><span class="line">   * &#123;@link #isSoundEffectsEnabled()&#125; is true.</span><br><span class="line">   *</span><br><span class="line">   * @param soundConstant One of the constants defined in &#123;@link SoundEffectConstants&#125;</span><br><span class="line">   *&#x2F;</span><br><span class="line">  public void playSoundEffect(int soundConstant) &#123;</span><br><span class="line">      if (mAttachInfo &#x3D;&#x3D; null || mAttachInfo.mRootCallbacks &#x3D;&#x3D; null || !isSoundEffectsEnabled()) &#123;</span><br><span class="line">          return;</span><br><span class="line">      &#125;</span><br><span class="line">&#x2F;** add for view 触摸时震动 start **&#x2F;</span><br><span class="line">     boolean vibratorEnabled &#x3D; Settings.System.getInt(mContext.getContentResolver(),Settings.System.HAPTIC_FEEDBACK_ENABLED,1)&#x3D;&#x3D;1;</span><br><span class="line">     if(mVibrator !&#x3D;null &amp;&amp; vibratorEnabled )&#123;</span><br><span class="line">             try &#123;</span><br><span class="line">                 mVibrator.vibrate(50);</span><br><span class="line">             &#125; catch (Exception e) &#123;</span><br><span class="line">                 android.util.Log.v(&quot;View&quot;,&quot;Exception&quot;+e.toString());</span><br><span class="line">             &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     &#x2F;&#x2F; end add</span><br><span class="line"></span><br><span class="line">      mAttachInfo.mRootCallbacks.playSoundEffect(soundConstant);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Android Framework </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>去除无线网络感叹号</title>
      <link href="/blog/2018/06/28/%E5%8E%BB%E9%99%A4%E6%97%A0%E7%BA%BF%E7%BD%91%E7%BB%9C%E6%84%9F%E5%8F%B9%E5%8F%B7/"/>
      <url>/blog/2018/06/28/%E5%8E%BB%E9%99%A4%E6%97%A0%E7%BA%BF%E7%BD%91%E7%BB%9C%E6%84%9F%E5%8F%B9%E5%8F%B7/</url>
      
        <content type="html"><![CDATA[<p>执行adb命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell settings put global captive_portal_detection_enabled 0</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android Framework </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> ADB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>预置系统应用程序</title>
      <link href="/blog/2018/06/27/%E9%A2%84%E7%BD%AE%E7%B3%BB%E7%BB%9F%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/"/>
      <url>/blog/2018/06/27/%E9%A2%84%E7%BD%AE%E7%B3%BB%E7%BB%9F%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>我们需要在系统安装好之后首次启动系统就存在我们的应用程序，而不需要开机之后再次安装，这样就需要考虑进行预置APP（应用），预置还有一个作用，就是有的程序被卸载之后，在系统执行双清操作（清空数据，恢复出厂）之后是可以恢复的。<br>对预置应用我们可以简单做个分类：<br>按照是否可以卸载可以分为不可卸载的和可卸载的；可卸载的又可以分为恢复出厂设置时能恢复的和不能恢复的；按照有没有APK源码又可以分为源码预置还是只是预置APK。</p><p>对于预置应用，我们一般做的是没有源码的APP（单个APK文件，相对简单，更符合需求），因此重点在预置无源码的应用程序上。</p><p>下图是几个常用的apk安装目录（参考-<source>/out/target/product/xxx/system/app）：</p><table><thead><tr><th>目录</th><th>描述</th></tr></thead><tbody><tr><td>/system/framework</td><td>用于存放资源型应用（系统框架）</td></tr><tr><td>/system/app</td><td>用于存放系统应用，不能卸载</td></tr><tr><td>/system/priv-app</td><td>Android4.4+新增，系统【核心】应用存放路径（最高权限）</td></tr><tr><td>/vendor/app</td><td>用于存放厂商应用，可以卸载，恢复出厂时恢复</td></tr><tr><td>/data/app</td><td>用于存放用户应用，可以卸载，恢复出厂不能恢复</td></tr><tr><td>/data/app-private</td><td>Android4.4+新增，受DRM保护的应用存放路径</td></tr></tbody></table><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>声明：以预置一个名为 Test 的APK为例</p><h5 id="一、如何将带源码的APK预置进系统，应用不能卸载？（了解）"><a href="#一、如何将带源码的APK预置进系统，应用不能卸载？（了解）" class="headerlink" title="一、如何将带源码的APK预置进系统，应用不能卸载？（了解）"></a>一、如何将带源码的APK预置进系统，应用不能卸载？（了解）</h5><ol><li>在 packages/apps 下面以需要预置的 APK的 名字创建一个新文件夹。 </li><li>将 Test APK的Source code 拷贝到 Test 文件夹下，删除 /bin 和 /gen 目录。 </li><li>在 Test 目录下创建一个名为 Android.mk的文件，内容如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">LOCAL_PATH:&#x3D; $(call my-dir)</span><br><span class="line">include $(CLEAR_VARS)</span><br><span class="line">LOCAL_MODULE_TAGS :&#x3D; optional</span><br><span class="line">LOCAL_SRC_FILES :&#x3D; $(call all-subdir-Java-files)</span><br><span class="line">LOCAL_PACKAGE_NAME :&#x3D; Test</span><br><span class="line">include $(BUILD_PACKAGE)</span><br></pre></td></tr></table></figure></li><li>打开文件 device/xxx/common/device.mk，将 Test 添加到 PRODUCT_PACKAGES 里面。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PRODUCT_PACKAGES +&#x3D; Test</span><br></pre></td></tr></table></figure><blockquote><p>说明：其中 xxx 代表代表厂商或者平台方名字。 </p></blockquote></li><li>重新 build 整个工程<br>编译成功后，Test.apk 会預置到/system/app底下</li></ol><h5 id="二、如何将无源码的-APK-预置进系统，应用不能卸载？（重要）"><a href="#二、如何将无源码的-APK-预置进系统，应用不能卸载？（重要）" class="headerlink" title="二、如何将无源码的 APK 预置进系统，应用不能卸载？（重要）"></a>二、如何将无源码的 APK 预置进系统，应用不能卸载？（重要）</h5><ol><li>在 packages/apps 下面以需要预置的 APK 名字创建文件夹。 </li><li>将 Test.apk 放到 packages/apps/Test 下面。 </li><li>在 packages/apps/Test 下面创建文件 Android.mk，文件内容如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">LOCAL_PATH :&#x3D; $(call my-dir)</span><br><span class="line">include $(CLEAR_VARS)</span><br><span class="line"># Module name should match apk name to be installed</span><br><span class="line">LOCAL_MODULE :&#x3D; Test</span><br><span class="line">LOCAL_MODULE_TAGS :&#x3D; optional</span><br><span class="line">LOCAL_SRC_FILES :&#x3D; $(LOCAL_MODULE).apk</span><br><span class="line">LOCAL_MODULE_CLASS :&#x3D; APPS</span><br><span class="line">LOCAL_MODULE_SUFFIX :&#x3D; $(COMMON_ANDROID_PACKAGE_SUFFIX)</span><br><span class="line">LOCAL_PREBUILT_JNI_LIBS:&#x3D; \</span><br><span class="line">@lib&#x2F;armeabi&#x2F;libtest.so  \</span><br><span class="line">@lib&#x2F;armeabi&#x2F;libtest2.so </span><br><span class="line">LOCAL_CERTIFICATE :&#x3D; PRESIGNED</span><br><span class="line">include $(BUILD_PREBUILT)</span><br></pre></td></tr></table></figure><blockquote><p>注意1：<br>若无so，删除LOCAL_PREBUILT_JNI_LIBS<br>若有so，使用LOCAL_PREBUILT_JNI_LIBS列出所有so的路径，不要忘记使用@。@标识符会将apk中的so抽离出来build进apk同级目录下的lib文件夹中。<br>若apk支持不同 CPU 类型的so，针对so的部分的处理（即将和TARGET_ARCH对应的so抽离出来）</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Ifeq ($(TARGET_ARCH),arm)</span><br><span class="line">LOCAL_PREBUILT_JNI_LIBS :&#x3D; \</span><br><span class="line">@lib&#x2F;armeabi-v7a&#x2F;xxx.so&#x2F;</span><br><span class="line">@ lib&#x2F;armeabi-v7a&#x2F;xxxx.so</span><br><span class="line">else ifeq ($(TARGET_ARCH),x86)</span><br><span class="line">LOCAL_PREBUILT_JNI_LIBS :&#x3D; \</span><br><span class="line">@lib&#x2F;x86&#x2F;xxx.so</span><br><span class="line">else ifeq ($(TARGET_ARCH),arm64)</span><br><span class="line">LOCAL_PREBUILT_JNI_LIBS :&#x3D; \</span><br><span class="line">@lib&#x2F;armeabi-v8a&#x2F;xxx.so</span><br><span class="line">…</span><br></pre></td></tr></table></figure><blockquote><p>注意2：<br>如果App使用System Level的permission，需要預置到/system/priv-app底下 (原在/system/app)。<br>此时修改Android.mk，增加LOCAL_PRIVILEGED_MODULE := true，以声明app需要放在/system/priv-app下。 </p></blockquote></li></ol><blockquote><p>注意3：<br>若需要apk作为32bit的apk运行，则需要在Android.mk中定义 LOCAL_MULTILIB :=32。<br>4. 打开文件 device/xxx/common/device.mk 将 Test 添加到 PRODUCT_PACKAGES 里面。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PRODUCT_PACKAGES +&#x3D; Test</span><br></pre></td></tr></table></figure><p>说明：其中 xxx 代表代表厂商或者平台方名字。<br>5. 重新 build 整个工程<br>编译成功后，Test.apk 会預置到/system/app底下。</p><h5 id="三、如何预置APK使得用户可以卸载，恢复出厂设置时不能恢复？"><a href="#三、如何预置APK使得用户可以卸载，恢复出厂设置时不能恢复？" class="headerlink" title="三、如何预置APK使得用户可以卸载，恢复出厂设置时不能恢复？"></a>三、如何预置APK使得用户可以卸载，恢复出厂设置时不能恢复？</h5><ol><li>在 packages/apps 下面以需要预置的 APK 名字创建文件夹。 </li><li>将 Test.apk 放到 packages/apps/Test 下面。 </li><li>在 packages/apps/Test 下面创建文件 Android.mk，文件内容如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">LOCAL_PATH :&#x3D; $(call my-dir)</span><br><span class="line">include $(CLEAR_VARS)</span><br><span class="line"># Module name should match apk name to be installed</span><br><span class="line">LOCAL_MODULE :&#x3D; Test</span><br><span class="line">LOCAL_MODULE_TAGS :&#x3D; optional</span><br><span class="line">LOCAL_SRC_FILES :&#x3D; $(LOCAL_MODULE).apk</span><br><span class="line">LOCAL_MODULE_CLASS :&#x3D; APPS</span><br><span class="line">LOCAL_MODULE_SUFFIX :&#x3D; $(COMMON_ANDROID_PACKAGE_SUFFIX)</span><br><span class="line"># LOCAL_PRIVILEGED_MODULE :&#x3D; true</span><br><span class="line">LOCAL_MODULE_PATH :&#x3D; $(TARGET_OUT_DATA_APPS)</span><br><span class="line">LOCAL_CERTIFICATE :&#x3D; PRESIGNED</span><br><span class="line">include $(BUILD_PREBUILT)</span><br></pre></td></tr></table></figure><blockquote><p>注意：<br>这个比不能卸载的多了一句 LOCAL_MODULE_PATH := $(TARGET_OUT_DATA_APPS)</p></blockquote></li><li>打开文件 device/mediatek/common/device.mk，将 Test 添加到 PRODUCT_PACKAGES 里面。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PRODUCT_PACKAGES +&#x3D; Test</span><br></pre></td></tr></table></figure></li><li>重新 build 整个工程<h5 id="四、如何预置APK使得用户可以卸载，并且恢复出厂设置时能够恢复？"><a href="#四、如何预置APK使得用户可以卸载，并且恢复出厂设置时能够恢复？" class="headerlink" title="四、如何预置APK使得用户可以卸载，并且恢复出厂设置时能够恢复？"></a>四、如何预置APK使得用户可以卸载，并且恢复出厂设置时能够恢复？</h5></li><li>在 vendor/xxx/proprietary/binary/3rd-party/free 下面以需要预置的 APK 名字创建文件夹。 </li><li>将 Test.apk 放入vendor/xxx/proprietary/binary/3rd-party/free/Test 下面。 </li><li>在 vendor/xxx/proprietary/binary/3rd-party/free/Test 下面创建文件 Android.mk，文件内容如下<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">LOCAL_PATH :&#x3D; $(call my-dir)</span><br><span class="line">include $(CLEAR_VARS)</span><br><span class="line"># Module name should match apk name to be installed</span><br><span class="line">LOCAL_MODULE :&#x3D; Test</span><br><span class="line">LOCAL_MODULE_TAGS :&#x3D; optional</span><br><span class="line">LOCAL_SRC_FILES :&#x3D; $(LOCAL_MODULE).apk</span><br><span class="line">LOCAL_MODULE_CLASS :&#x3D; APPS</span><br><span class="line">LOCAL_MODULE_SUFFIX :&#x3D; $(COMMON_ANDROID_PACKAGE_SUFFIX)</span><br><span class="line">LOCAL_MODULE_PATH :&#x3D; $(TARGET_OUT)&#x2F;vendor&#x2F;operator&#x2F;app</span><br><span class="line">LOCAL_CERTIFICATE :&#x3D; PRESIGNED</span><br><span class="line">include $(BUILD_PREBUILT)</span><br></pre></td></tr></table></figure><blockquote><p>注意：<br>这个比不能卸载的多了一句 LOCAL_MODULE_PATH := $(TARGET_OUT)/vendor/operator/app</p></blockquote></li><li>打开文件device/xxx/common/device.mk 将 Test 添加到 PRODUCT_PACKAGES 里面。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PRODUCT_PACKAGES +&#x3D; Test</span><br></pre></td></tr></table></figure></li><li>然后重新build整个工程。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Android Framework </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>去除USB权限弹窗</title>
      <link href="/blog/2018/06/26/%E5%8E%BB%E9%99%A4USB%E6%9D%83%E9%99%90%E5%BC%B9%E7%AA%97/"/>
      <url>/blog/2018/06/26/%E5%8E%BB%E9%99%A4USB%E6%9D%83%E9%99%90%E5%BC%B9%E7%AA%97/</url>
      
        <content type="html"><![CDATA[<p>在访问一个插入到Android系统的USB设备的时候往往是需要权限的，此时系统会弹出询问权限的对话框，而我们此时希望让它默认允许访问USB设备并且不希望用户看到这个对话框。<br>我们在获取UsbManager和UsbDevice/UsbAcessory之后，首先需要检查是否对这个USB设备/附件有操作的权限，如果没有权限，则需要向系统申请（系统会弹出询问权限的对话框），此时需要注册一个广播接收器用来接收用户的选择。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 检查是否有操作权限</span><br><span class="line">boolean hasPermission &#x3D; mUsbManager.hasPermission(mUsbDevice);</span><br><span class="line">if (!hasPermission) &#123;</span><br><span class="line">    &#x2F;&#x2F; 注册广播，接收用户权限选择</span><br><span class="line">    PendingIntent pi &#x3D; PendingIntent.getBroadcast(mContext, 0, new Intent(TAG_UsbPermission), 0);</span><br><span class="line">    mContext.registerReceiver(new MyPermissionReceiver(), new IntentFilter(TAG_UsbPermission));</span><br><span class="line">    &#x2F;&#x2F; 弹出对话框，申请权限</span><br><span class="line">    mUsbManager.requestPermission(mUsbDevice, pi);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是我们定义的广播接收器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 定义的广播接收器</span><br><span class="line">private class MyPermissionReceiver extends BroadcastReceiver &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void onReceive(Context context, Intent intent) &#123;</span><br><span class="line">        if (intent.getAction().equals(TAG_UsbPermission)) &#123;</span><br><span class="line">            boolean granted &#x3D; intent.getBooleanExtra(UsbManager.EXTRA_PERMISSION_GRANTED, false);</span><br><span class="line">            if (!granted) &#123;</span><br><span class="line">                &#x2F;&#x2F; Todo：已经获取权限，可以执行其他操作</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                &#x2F;&#x2F; Todo：未获取权限。</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="去除USB权限弹窗方法"><a href="#去除USB权限弹窗方法" class="headerlink" title="去除USB权限弹窗方法"></a>去除USB权限弹窗方法</h4><p>在这个过程中，系统会弹出询问权限的对话框，而我们现在不希望用户看到这个界面。<br>进入系统源码，找到文件<br>/frameworks/base/packages/SystemUI/src/com/android/systemui/usb/UsbPermissionActivity.java<br>找到其中的 onCreate() 方法，替换</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setupAlert();</span><br></pre></td></tr></table></figure><p>为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mPermissionGranted &#x3D; true; </span><br><span class="line">finish(); </span><br></pre></td></tr></table></figure><p>这样就不会弹窗了，并且会允许给设备操作权限。<br>当然我们也可以指定只有我们自己的APP不需要弹窗，只需要加一层过滤条件即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; add permission for our packages! </span><br><span class="line">if(mPackageName.startsWith(&quot;com.xxx.xxx&quot;)) &#123; </span><br><span class="line">    mPermissionGranted &#x3D; true; </span><br><span class="line">    finish(); </span><br><span class="line">&#125; else &#123; </span><br><span class="line">    setupAlert();   </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>当然也可以根据设备的VID、PID、设备名称等信息进行过滤（省略）。</p><p>// 更直接的方法<br>frameworks/base/core/res/res/values/config.xml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- If true, then we do not ask user for permission for apps to connect to USB devices.</span><br><span class="line">     Do not set this to true for production devices. Doing so will cause you to fail CTS. --&gt;</span><br><span class="line">&lt;bool name&#x3D;&quot;config_disableUsbPermissionDialogs&quot;&gt;true&lt;&#x2F;bool&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android Framework </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>去除锁屏和休眠</title>
      <link href="/blog/2018/06/25/%E5%8E%BB%E9%99%A4%E9%94%81%E5%B1%8F%E5%92%8C%E4%BC%91%E7%9C%A0/"/>
      <url>/blog/2018/06/25/%E5%8E%BB%E9%99%A4%E9%94%81%E5%B1%8F%E5%92%8C%E4%BC%91%E7%9C%A0/</url>
      
        <content type="html"><![CDATA[<h3 id="去除休眠"><a href="#去除休眠" class="headerlink" title="去除休眠"></a>去除休眠</h3><ol><li>frameworks/base/packages/SettingsProvider/res/values/defaults.xml<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;integer name&#x3D;&quot;def_screen_off_timeout&quot;&gt;60000&lt;&#x2F;integer&gt; </span><br></pre></td></tr></table></figure>60000ms，修改为-1。-1代表0xffffffff，永远不要休眠<pre><code>  或者修改为2147483647  Java中Integer.MAX_VALUE</code></pre></li><li>frameworks\base\packages\SettingsProvider\src\com\android\providers\settings\DatabaseHelper.java<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">loadIntegerSetting(stmt,Settings.System.SCREEN_OFF_TIMEOUT,</span><br><span class="line">                    R.integer.def_screen_off_timeout);</span><br></pre></td></tr></table></figure></li></ol><h3 id="去除锁屏"><a href="#去除锁屏" class="headerlink" title="去除锁屏"></a>去除锁屏</h3><ol><li>frameworks/base/core/res/res/values/config.xml<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;bool name&#x3D;&quot;config_dreamsSupported&quot;&gt;false&lt;&#x2F;bool&gt;</span><br><span class="line">&lt;bool name&#x3D;&quot;config_dreamsEnabledByDefault&quot;&gt;false&lt;&#x2F;bool&gt;</span><br></pre></td></tr></table></figure></li><li>frameworks/base/packages/SettingsProvider/res/values/defaults.xml<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;bool name&#x3D;&quot;def_lockscreen_disabled&quot;&gt;true&lt;&#x2F;bool&gt;</span><br></pre></td></tr></table></figure></li><li>frameworks/base/services/core/java/com/android/server/power/PowerManagerService.java<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public void goToSleep(long eventTime, int reason, int flags) &#123;</span><br><span class="line"></span><br><span class="line">if (true)&#123; return; &#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Android Framework </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HapticFeedback震动反馈</title>
      <link href="/blog/2018/06/24/HapticFeedback%E9%9C%87%E5%8A%A8%E5%8F%8D%E9%A6%88/"/>
      <url>/blog/2018/06/24/HapticFeedback%E9%9C%87%E5%8A%A8%E5%8F%8D%E9%A6%88/</url>
      
        <content type="html"><![CDATA[<h2 id="adb测试震动"><a href="#adb测试震动" class="headerlink" title="adb测试震动"></a>adb测试震动</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@a # busybox find -name &quot;vibrator&quot;</span><br><span class="line">root@a # busybox find -name &quot;vibrator&quot;</span><br><span class="line">.&#x2F;sys&#x2F;devices&#x2F;virtual&#x2F;timed_output&#x2F;vibrator</span><br><span class="line">.&#x2F;sys&#x2F;class&#x2F;timed_output&#x2F;vibrator</span><br></pre></td></tr></table></figure><p>向enable文件写入成功，就立即震动，震动的持续时间即是写入的值，单位为ms</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@a # echo &#39;10000&#39;&gt; &#x2F;sys&#x2F;class&#x2F;timed_output&#x2F;vibrator&#x2F;enable  </span><br><span class="line">root@a # cat &#x2F;sys&#x2F;class&#x2F;timed_output&#x2F;vibrator&#x2F;enable  </span><br><span class="line">3290  </span><br></pre></td></tr></table></figure><p>读enable文件来获得震动剩余的时间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@a # echo ‘0’&gt; &#x2F;sys&#x2F;class&#x2F;timed_output&#x2F;vibrator&#x2F;enable  </span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="按键触摸反馈"><a href="#按键触摸反馈" class="headerlink" title="按键触摸反馈"></a>按键触摸反馈</h2><h3 id="代码路径"><a href="#代码路径" class="headerlink" title="代码路径"></a>代码路径</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;frameworks&#x2F;base&#x2F;policy&#x2F;src&#x2F;com&#x2F;android&#x2F;internal&#x2F;policy&#x2F;impl&#x2F;PhoneWindowManager.java</span><br></pre></td></tr></table></figure><p>interceptKeyBeforeQueueing函数中添加如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if(down&amp;&amp;(keyCode &#x3D;&#x3D; KeyEvent.KEYCODE_HOME)</span><br><span class="line">||(keyCode &#x3D;&#x3D; KeyEvent.KEYCODE_MENU)||(keyCode &#x3D;&#x3D; KeyEvent.KEYCODE_BACK))&#123;</span><br><span class="line">    performHapticFeedbackLw(null, HapticFeedbackConstants.VIRTUAL_KEY, false);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="performHapticFeedbackLw-函数"><a href="#performHapticFeedbackLw-函数" class="headerlink" title="performHapticFeedbackLw()函数"></a>performHapticFeedbackLw()函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public boolean performHapticFeedbackLw(WindowState win, int effectId, boolean always) &#123;</span><br><span class="line">    if (!mVibrator.hasVibrator()) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    final boolean hapticsDisabled &#x3D; Settings.System.getIntForUser(mContext.getContentResolver(),</span><br><span class="line">            Settings.Settings.System.HAPTIC_FEEDBACK_ENABLED.HAPTIC_FEEDBACK_ENABLED, 0, UserHandle.USER_CURRENT) &#x3D;&#x3D; 0;</span><br><span class="line">    if (hapticsDisabled &amp;&amp; !always) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125; Settings.System.HAPTIC_FEEDBACK_ENABLED</span><br><span class="line">    long[] pattern &#x3D; null;</span><br><span class="line">    switch (effectId) &#123;</span><br><span class="line">        case HapticFeedbackConstants.LONG_PRESS:</span><br><span class="line">            pattern &#x3D; mLongPressVibePattern;</span><br><span class="line">            break;</span><br><span class="line">        case HapticFeedbackConstants.VIRTUAL_KEY:</span><br><span class="line">            pattern &#x3D; mVirtualKeyVibePattern;</span><br><span class="line">            break;</span><br><span class="line">        case HapticFeedbackConstants.KEYBOARD_TAP:</span><br><span class="line">            pattern &#x3D; mKeyboardTapVibePattern;</span><br><span class="line">            break;</span><br><span class="line">        case HapticFeedbackConstants.CLOCK_TICK:</span><br><span class="line">            pattern &#x3D; mClockTickVibePattern;</span><br><span class="line">            break;</span><br><span class="line">        case HapticFeedbackConstants.CALENDAR_DATE:</span><br><span class="line">            pattern &#x3D; mCalendarDateVibePattern;</span><br><span class="line">            break;</span><br><span class="line">        case HapticFeedbackConstants.SAFE_MODE_DISABLED:</span><br><span class="line">            pattern &#x3D; mSafeModeDisabledVibePattern;</span><br><span class="line">            break;</span><br><span class="line">        case HapticFeedbackConstants.SAFE_MODE_ENABLED:</span><br><span class="line">            pattern &#x3D; mSafeModeEnabledVibePattern;</span><br><span class="line">            break;</span><br><span class="line">        default:</span><br><span class="line">            return false;</span><br><span class="line">    &#125;</span><br><span class="line">    int owningUid;</span><br><span class="line">    String owningPackage;</span><br><span class="line">    if (win !&#x3D; null) &#123;</span><br><span class="line">        owningUid &#x3D; win.getOwningUid();</span><br><span class="line">        owningPackage &#x3D; win.getOwningPackage();</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        owningUid &#x3D; android.os.Process.myUid();</span><br><span class="line">        owningPackage &#x3D; mContext.getOpPackageName();</span><br><span class="line">    &#125;</span><br><span class="line">    if (pattern.length &#x3D;&#x3D; 1) &#123;</span><br><span class="line">        &#x2F;&#x2F; One-shot vibration</span><br><span class="line">        mVibrator.vibrate(owningUid, owningPackage, pattern[0], VIBRATION_ATTRIBUTES);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        &#x2F;&#x2F; Pattern vibration</span><br><span class="line">        mVibrator.vibrate(owningUid, owningPackage, pattern, -1, VIBRATION_ATTRIBUTES);</span><br><span class="line">    &#125;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如震动值由 mVirtualKeyVibePattern = getLongIntArray(mContext.getResources(),<br>                com.android.internal.R.array.config_virtualKeyVibePattern);获得。<br>配置文件在</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">frameworks&#x2F;base&#x2F;core&#x2F;res&#x2F;res&#x2F;values&#x2F;config.xml</span><br><span class="line">    &lt;!-- Vibrator pattern for feedback about touching a virtual key --&gt;</span><br><span class="line">    &lt;integer-array name&#x3D;&quot;config_virtualKeyVibePattern&quot;&gt;</span><br><span class="line">        &lt;item&gt;0&lt;&#x2F;item&gt;</span><br><span class="line">        &lt;item&gt;10&lt;&#x2F;item&gt;</span><br><span class="line">        &lt;item&gt;20&lt;&#x2F;item&gt;</span><br><span class="line">        &lt;item&gt;30&lt;&#x2F;item&gt;</span><br><span class="line">    &lt;&#x2F;integer-array&gt;</span><br><span class="line">...</span><br><span class="line">..</span><br><span class="line">.</span><br></pre></td></tr></table></figure><h2 id="View长按触发震动"><a href="#View长按触发震动" class="headerlink" title="View长按触发震动"></a>View长按触发震动</h2><h3 id="1-对一个button注册长按监听"><a href="#1-对一个button注册长按监听" class="headerlink" title="1.对一个button注册长按监听"></a>1.对一个button注册长按监听</h3><p>长按button震动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Button click&#x3D; (Button) findViewById(R.id.click);</span><br><span class="line">click.setOnLongClickListener(new View.OnLongClickListener() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public boolean onLongClick(View v) &#123;</span><br><span class="line"></span><br><span class="line">        Toast.makeText(MainActivity.this,&quot;长按点击&quot;,Toast.LENGTH_SHORT).show();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;触发震动反馈</span><br><span class="line">        return true;</span><br><span class="line">        &#x2F;&#x2F;return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="2-View-setOnLongClickListener源码"><a href="#2-View-setOnLongClickListener源码" class="headerlink" title="2.View.setOnLongClickListener源码"></a>2.View.setOnLongClickListener源码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">     * Register a callback to be invoked when this view is clicked and held. If this view is not</span><br><span class="line">     * long clickable, it becomes long clickable.</span><br><span class="line">     *</span><br><span class="line">     * @param l The callback that will run</span><br><span class="line">     *</span><br><span class="line">     * @see #setLongClickable(boolean)</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void setOnLongClickListener(@Nullable OnLongClickListener l) &#123;</span><br><span class="line">        if (!isLongClickable()) &#123;</span><br><span class="line">            setLongClickable(true);</span><br><span class="line">        &#125;</span><br><span class="line">        getListenerInfo().mOnLongClickListener &#x3D; l;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="3-View-performLongClick源码"><a href="#3-View-performLongClick源码" class="headerlink" title="3.View.performLongClick源码"></a>3.View.performLongClick源码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">     * Call this view&#39;s OnLongClickListener, if it is defined. Invokes the context menu if the</span><br><span class="line">     * OnLongClickListener did not consume the event.</span><br><span class="line">     *</span><br><span class="line">     * @return True if one of the above receivers consumed the event, false otherwise.</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public boolean performLongClick() &#123;</span><br><span class="line">        sendAccessibilityEvent(AccessibilityEvent.TYPE_VIEW_LONG_CLICKED);</span><br><span class="line"></span><br><span class="line">        boolean handled &#x3D; false;</span><br><span class="line">        ListenerInfo li &#x3D; mListenerInfo;</span><br><span class="line">        if (li !&#x3D; null &amp;&amp; li.mOnLongClickListener !&#x3D; null) &#123;</span><br><span class="line">            handled &#x3D; li.mOnLongClickListener.onLongClick(View.this);</span><br><span class="line">        &#125;</span><br><span class="line">        if (!handled) &#123;</span><br><span class="line">            handled &#x3D; showContextMenu();</span><br><span class="line">        &#125;</span><br><span class="line">        if (handled) &#123;</span><br><span class="line">&#x2F;&#x2F;  触发震动反馈</span><br><span class="line">            performHapticFeedback(HapticFeedbackConstants.LONG_PRESS);</span><br><span class="line">        &#125;</span><br><span class="line">        return handled;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="4-View-performHapticFeedback-int-feedbackConstant-int-flags-源码"><a href="#4-View-performHapticFeedback-int-feedbackConstant-int-flags-源码" class="headerlink" title="4.View.performHapticFeedback(int feedbackConstant, int flags)源码"></a>4.View.performHapticFeedback(int feedbackConstant, int flags)源码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">     * BZZZTT!!1!</span><br><span class="line">     *</span><br><span class="line">     * &lt;p&gt;Like &#123;@link #performHapticFeedback(int)&#125;, with additional options.</span><br><span class="line">     *</span><br><span class="line">     * @param feedbackConstant One of the constants defined in</span><br><span class="line">     * &#123;@link HapticFeedbackConstants&#125;</span><br><span class="line">     * @param flags Additional flags as per &#123;@link HapticFeedbackConstants&#125;.</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public boolean performHapticFeedback(int feedbackConstant, int flags) &#123;</span><br><span class="line">        if (mAttachInfo &#x3D;&#x3D; null) &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;noinspection SimplifiableIfStatement</span><br><span class="line">        if ((flags &amp; HapticFeedbackConstants.FLAG_IGNORE_VIEW_SETTING) &#x3D;&#x3D; 0</span><br><span class="line">                &amp;&amp; !isHapticFeedbackEnabled()) &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        return mAttachInfo.mRootCallbacks.performHapticFeedback(feedbackConstant,</span><br><span class="line">                (flags &amp; HapticFeedbackConstants.FLAG_IGNORE_GLOBAL_SETTING) !&#x3D; 0);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="5-HapticFeedbackConstants的3个常量"><a href="#5-HapticFeedbackConstants的3个常量" class="headerlink" title="5.HapticFeedbackConstants的3个常量"></a>5.HapticFeedbackConstants的3个常量</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HapticFeedbackConstants.LONG_PRESS</span><br><span class="line">HapticFeedbackConstants.FLAG_IGNORE_VIEW_SETTING  &#x2F;&#x2F;可以无视android:hapticFeedbackEnabled&#x3D;”false”，会触发震动</span><br><span class="line">HapticFeedbackConstants.FLAG_IGNORE_GLOBAL_SETTING &#x2F;&#x2F;可以无视 Settings.System.HAPTIC_FEEDBACK_ENABLED&#x3D;0，会触发震动</span><br></pre></td></tr></table></figure><h3 id="6-HapticFeedbackConstants使用方法"><a href="#6-HapticFeedbackConstants使用方法" class="headerlink" title="6.HapticFeedbackConstants使用方法"></a>6.HapticFeedbackConstants使用方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;Button</span><br><span class="line">        android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;click&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        android:hapticFeedbackEnabled&#x3D;&quot;false&quot;</span><br><span class="line">        android:text&#x3D;&quot;make&quot; &#x2F;&gt;</span><br><span class="line">...</span><br><span class="line">click.setOnClickListener(new View.OnClickListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onClick(View v) &#123;</span><br><span class="line">                &#x2F;&#x2F; v.performHapticFeedback(HapticFeedbackConstants.LONG_PRESS);</span><br><span class="line">&#x2F;&#x2F; v.performHapticFeedback(HapticFeedbackConstants.LONG_PRESS,HapticFeedbackConstants.FLAG_IGNORE_VIEW_SETTING);</span><br><span class="line">                v.performHapticFeedback(HapticFeedbackConstants.LONG_PRESS,HapticFeedbackConstants.FLAG_IGNORE_GLOBAL_SETTING</span><br><span class="line">                        );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><h2 id="代码介绍"><a href="#代码介绍" class="headerlink" title="代码介绍"></a>代码介绍</h2><h3 id="APP层"><a href="#APP层" class="headerlink" title="APP层"></a>APP层</h3><p>获取服务后，调用vibrate()方法，实现震动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mVibrator&#x3D; (Vibrator) getSystemService(VIBRATOR_SERVICE);</span><br><span class="line">mVibrator.vibrate(50);   &#x2F;&#x2F;填入震动时长 :ms</span><br></pre></td></tr></table></figure><h3 id="Framework层"><a href="#Framework层" class="headerlink" title="Framework层"></a>Framework层</h3><p>framework层代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">frameworks&#x2F;base&#x2F;services&#x2F;java&#x2F;com&#x2F;android&#x2F;server&#x2F;VibratorService.java</span><br><span class="line">frameworks&#x2F;base&#x2F;core&#x2F;java&#x2F;android&#x2F;os&#x2F;IVibratorService.aidl</span><br><span class="line">frameworks&#x2F;base&#x2F;core&#x2F;java&#x2F;android&#x2F;os&#x2F;Vibrator.java</span><br><span class="line">frameworks&#x2F;base&#x2F;core&#x2F;java&#x2F;android&#x2F;os&#x2F;SystemVibrator.java</span><br></pre></td></tr></table></figure><p>VibratorService.java<br>    有SystemService拉起的服务。实现IVibratorService.aidl的接口，从而实现VibratorService;它的函数接口，是通过调用JNI层对应的马达控制函数来实现的。</p><p>Vibrator.java<br>    是VibratorService开放给应用层的调用类。Vibrator是抽象类。它便于我们支持不同类型的马达。</p><p>SystemVibrator.java<br>    它是Vibrator.java的子类，实现了vibration的服务接口。<br>    在构造函数中，通过 IVibratorService.Stub.asInterface(ServiceManager.getService(“vibrator”)) 获取马达服务，实际上获取的是VibratorService对象。<br>    SystemVibrator的接口都是调用VibratorService接口实现的</p><h3 id="JNI及HAL层"><a href="#JNI及HAL层" class="headerlink" title="JNI及HAL层"></a>JNI及HAL层</h3><p>代码路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">frameworks&#x2F;base&#x2F;services&#x2F;jni&#x2F;com_android_server_VibratorService.cpp</span><br><span class="line">    hardware&#x2F;libhardware_legacy&#x2F;vibrator&#x2F;vibrator.c</span><br></pre></td></tr></table></figure><p>通过vibrator中sendit函数将对vibrator的控制写进“/sys/class/timed_output/vibrator/enable”节点中。</p>]]></content>
      
      
      <categories>
          
          <category> Android Framework </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> ADB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>定制Android开机动画</title>
      <link href="/blog/2018/06/23/%E5%AE%9A%E5%88%B6Android%E5%BC%80%E6%9C%BA%E5%8A%A8%E7%94%BB/"/>
      <url>/blog/2018/06/23/%E5%AE%9A%E5%88%B6Android%E5%BC%80%E6%9C%BA%E5%8A%A8%E7%94%BB/</url>
      
        <content type="html"><![CDATA[<h3 id="开机动画"><a href="#开机动画" class="headerlink" title="开机动画"></a>开机动画</h3><p>替换 Android 设备 system/media/bootanimation.zip 文件<br>adb push bootanimation.zip /sdcard/bootanimation.zip</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># adb shell</span><br><span class="line"># su</span><br><span class="line"># mount -o remount,rw &#x2F;system</span><br><span class="line"># cp &#x2F;sdcard&#x2F;bootanimation.zip &#x2F;system&#x2F;media&#x2F;bootanimation.zip</span><br><span class="line"># cd &#x2F;system&#x2F;media&#x2F;</span><br><span class="line"># chmod 0644 bootanimation.zip</span><br></pre></td></tr></table></figure><h3 id="制作开机动画包"><a href="#制作开机动画包" class="headerlink" title="制作开机动画包"></a>制作开机动画包</h3><p>解压 bootanimation.zip 文件你会发现，里面会有一个 desc.txt 文件和若干个 part0、part1 这样的目录。</p><p>现在我们查看 desc.txt 文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">720 1280 20</span><br><span class="line">p 1 0 part0</span><br><span class="line">P 0 0 part1</span><br><span class="line">&#x2F;&#x2F; 720 动画的宽度</span><br><span class="line">&#x2F;&#x2F; 1280 动画的高度</span><br><span class="line">&#x2F;&#x2F; 20 每秒播放20帧图片 （最好不要超过30）</span><br><span class="line">&#x2F;&#x2F; p 第二行和第三行的p表示2个part（出第一行外，通常是以p开头的）</span><br><span class="line">&#x2F;&#x2F; 1 对part中静态图片循环播放的次数。例如：part0的静态图片会播放2次，part1的静态图片只有正常的一次。</span><br><span class="line">&#x2F;&#x2F; 0 播放完当前part中的动画后，暂停的帧数。 （如该是40的话，40&#x2F;20&#x3D;2秒，即暂停2秒）</span><br><span class="line">&#x2F;&#x2F; part0 part1 存储静态图片的目录名称</span><br></pre></td></tr></table></figure><p>注意：</p><ol><li><p>desc.txt 文件要在 Linux 环境下生成，因为有些空格不一样</p></li><li><p>part 目录中的图片的命名要是连续的，比如pic_001, pic_002, _pic_003 …</p></li><li><p>打包成bootanimation.zip文件的时候，要要用zip格式的存储方式打包。</p></li></ol><h3 id="系统编译"><a href="#系统编译" class="headerlink" title="系统编译"></a>系统编译</h3><ol><li>把bootanimation.zip放到alps/frameworks/base/data/sounds/目录下</li><li>修改/device/{vendor}/{project}/device.mk，增加：<br>PRODUCT_COPY_FILES += frameworks/base/data/sounds/bootanimation.zip:system/media/bootanimation.zip</li><li>重新build系统，烧录机器即可；</li></ol>]]></content>
      
      
      <categories>
          
          <category> Android Framework </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>发布Hexo Blog到Github Pages</title>
      <link href="/blog/2018/06/22/%E5%8F%91%E5%B8%83Hexo-Blog%E5%88%B0Github-Pages/"/>
      <url>/blog/2018/06/22/%E5%8F%91%E5%B8%83Hexo-Blog%E5%88%B0Github-Pages/</url>
      
        <content type="html"><![CDATA[<h2 id="准备环境："><a href="#准备环境：" class="headerlink" title="准备环境："></a>准备环境：</h2><ul><li><p>安装<a href="https://git-scm.com/">Git</a></p></li><li><p>安装<a href="https://nodejs.org/">Node.js</a></p></li><li><p>安装<a href="https://hexo.io/zh-cn/docs/index.html">hexo</a><br>利用npm命令安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>问题</p></li><li><p>npm ERR! registry error parsing json 错误<br>可能需要设置npm代理，执行命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry http:&#x2F;&#x2F;registry.npmjs.org&#x2F;</span><br></pre></td></tr></table></figure></li><li><p>hexo:command not found<br>删除刚刚安装的npm目录，重新执行命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -h hexo</span><br></pre></td></tr></table></figure><h2 id="创建hexo文件夹"><a href="#创建hexo文件夹" class="headerlink" title="创建hexo文件夹"></a>创建hexo文件夹</h2><p>执行命令，hexo会自动在目标文件夹建立博客网站所需的所有文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><h2 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><h2 id="本地查看"><a href="#本地查看" class="headerlink" title="本地查看"></a>本地查看</h2><p>在hexo文件夹执行以下命令，然后到浏览器输入<code>http://localhost:4000</code>查看</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>问题</p></li><li><p>WARN No layout: index.html?…<br>查看主题目录是否为空，如果为空下载主题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;hexojs&#x2F;hexo-theme-landscape.git themes&#x2F;landscape</span><br></pre></td></tr></table></figure></li><li><p>npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@^1.0.0 (node_modules\chokidar\node_modules\fsevents):<br>npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for <a href="mailto:fsevents@1.0.15">fsevents@1.0.15</a>: wanted {“os”:”darwin”,”arch”:”any”} (current: {“os”:”win32”,”arch”:”x64”})<br>官网给出的方案solution:you are both experiencing a warning that is perfectly normal and will not cause any issues for development. When using OS X there’s a nice filesystem feature provided by the OS by which file changes emit events, making “watching” files for changes the reverse, where they’re passively “listened” for (Change Detection vs an Event Emitter if you need an analogy).<br>This is made possible by fsevents, a package that is only available for OS X and macOS installations due to dependence on the OS’s functionality. Windows and *nix will all see this warning. I haven’t tested it, but the only non-proprietary OS that might have support would be the Darwin open source project.<br>所以这个警告信息可以忽略</p><h2 id="创建页面仓库"><a href="#创建页面仓库" class="headerlink" title="创建页面仓库"></a>创建页面仓库</h2><p>地址：<a href="https://github.com/">https://github.com/</a><br>这个仓库的名字需要和你的账号对应，格式: yourname.github.io<br>问题</p></li><li><p>生成SSH密钥</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;你的邮箱地址&quot;</span><br></pre></td></tr></table></figure><h2 id="hexo部署使用"><a href="#hexo部署使用" class="headerlink" title="hexo部署使用"></a>hexo部署使用</h2><p>编辑_config.yml文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">     type: git</span><br><span class="line">     repo: git@github.com:yourname&#x2F;yourname.github.io.git</span><br><span class="line">     branch: master</span><br></pre></td></tr></table></figure></li><li><p>配置文件的冒号“:”后面有一个空格<br>repo: 刚刚 GitHub 创库地址.git</p></li><li><p>部署步骤</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>问题</p></li><li><p>ERROR Deployer not found: git</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="hexo常用命令使用"><a href="#hexo常用命令使用" class="headerlink" title="hexo常用命令使用"></a>hexo常用命令使用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">hexo help #查看帮助</span><br><span class="line">hexo init #初始化一个目录</span><br><span class="line">hexo new &quot;postName&quot; #新建文章</span><br><span class="line">hexo new page &quot;pageName&quot; #新建页面</span><br><span class="line">hexo generate #生成网页，可以在 public 目录查看整个网站的文件</span><br><span class="line">hexo server #本地预览，&#39;Ctrl+C&#39;关闭</span><br><span class="line">hexo deploy #部署.deploy目录</span><br><span class="line">hexo clean #清除缓存，**强烈建议每次执行命令前先清理缓存，每次部署前先删除 .deploy 文件夹**</span><br></pre></td></tr></table></figure><p>简写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo n &#x3D;&#x3D; hexo new</span><br><span class="line">hexo g &#x3D;&#x3D; hexo generate</span><br><span class="line">hexo s &#x3D;&#x3D; hexo server</span><br><span class="line">hexo d &#x3D;&#x3D; hexo deploy</span><br></pre></td></tr></table></figure><h2 id="编辑文章"><a href="#编辑文章" class="headerlink" title="编辑文章"></a>编辑文章</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;标题&quot;</span><br></pre></td></tr></table></figure><p>在 _posts 目录下会生成文件标题.md：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">title: Hello World</span><br><span class="line">date: 2015-07-30 07:56:29 #发表日期，一般不改动</span><br><span class="line">categories: hexo #文章文类</span><br><span class="line">tags: [hexo,github] #文章标签，多于一项时用这种格式</span><br><span class="line">---</span><br><span class="line">正文，使用 Markdown 语法书写</span><br></pre></td></tr></table></figure><p>编辑完后保存，hexo server 预览</p><h2 id="hexo-部署"><a href="#hexo-部署" class="headerlink" title="hexo 部署"></a>hexo 部署</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><h2 id="hexo目录结构"><a href="#hexo目录结构" class="headerlink" title="hexo目录结构"></a>hexo目录结构</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">├── .deploy       #需要部署的文件</span><br><span class="line">├── node_modules  #Hexo插件</span><br><span class="line">├── public        #生成的静态网页文件</span><br><span class="line">├── scaffolds     #模板</span><br><span class="line">├── source        #博客正文和其他源文件，404、favicon、CNAME 都应该放在这里</span><br><span class="line">|   ├── _drafts   #草稿</span><br><span class="line">|   └── _posts    #文章</span><br><span class="line">├── themes        #主题</span><br><span class="line">├── _config.yml   #全局配置文件</span><br><span class="line">└── package.json</span><br></pre></td></tr></table></figure><p>参考连接： <a href="http://wuxiaolong.me/2015/07/31/build-blog-by-hexo/" title="手把手教你建github技术博客by hexo">http://wuxiaolong.me/2015/07/31/build-blog-by-hexo/</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/blog/2018/06/21/hello-world/"/>
      <url>/blog/2018/06/21/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
